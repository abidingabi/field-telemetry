/* Generated by Nim Compiler v0.11.2 */
/*   (c) 2015 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Windows, amd64, gcc */
/* Command for C compiler:
   g++.exe -c  -w -w -fpermissive  -IC:\Nim\lib -o c:\users\dansm\desktop\folders\robotics\field-telemetry\nimcache\stdlib_system.o c:\users\dansm\desktop\folders\robotics\field-telemetry\nimcache\stdlib_system.cpp */
#define NIM_INTBITS 64
#include "nimbase.h"

#include <setjmp.h>

#include <windows.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <signal.h>

#include <io.h>

#include <fcntl.h>
struct Exception;
struct NimStringDesc;
struct TGenericSeq;
struct Tbigchunk27642;
struct Tbasechunk27638;
struct TNimType;
struct Tgcheap48416;
struct Tcellseq46563;
struct Tcell46547;
struct Tcellset46559;
struct Tpagedesc46555;
struct Tmemregion28410;
struct Tsmallchunk27640;
struct Tllchunk28404;
struct Tintset27617;
struct Ttrunk27613;
struct Tavlnode28408;
struct Tgcstat48414;
struct Tfreecell27630;
struct TNimNode;
struct Ioerror3431;
struct Systemerror3429;
struct TNimObject;
struct Outofmemerror3453;
struct TY13606;
struct Overflowerror3443;
struct Arithmeticerror3439;
struct Indexerror3455;
struct Rangeerror3459;
struct Valueerror3449;
struct TSafePoint;
struct Reraiseerror3463;
struct Fielderror3457;
struct Objectconversionerror3467;
struct Objectassignmenterror3465;
struct Divbyzeroerror3441;
struct Floatinvalidoperror3471;
struct Floatingpointerror3469;
struct Floatoverflowerror3475;
struct Floatunderflowerror3477;
struct Treprclosure84714;
struct Slice87861;
struct Assertionerror3447;
typedef N_NIMCALL_PTR(NIM_BOOL, TY9021) (Exception* e);
typedef N_NIMCALL_PTR(NIM_BOOL, TY9026) (Exception* e);
typedef N_NIMCALL_PTR(void, TY9031) (void);
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
struct  Tbasechunk27638  {
NI prevsize;
NI size;
NIM_BOOL used;
};
struct  Tbigchunk27642  : public Tbasechunk27638 {
Tbigchunk27642* next;
Tbigchunk27642* prev;
NI align;
NF data;
};
struct  Tcellseq46563  {
NI len;
NI cap;
Tcell46547** d;
};
struct  Tcellset46559  {
NI counter;
NI max;
Tpagedesc46555* head;
Tpagedesc46555** data;
};
typedef Tsmallchunk27640* TY28422[512];
typedef Ttrunk27613* Ttrunkbuckets27615[256];
struct  Tintset27617  {
Ttrunkbuckets27615 data;
};
struct  Tmemregion28410  {
NI minlargeobj;
NI maxlargeobj;
TY28422 freesmallchunks;
Tllchunk28404* llmem;
NI currmem;
NI maxmem;
NI freemem;
NI lastsize;
Tbigchunk27642* freechunkslist;
Tintset27617 chunkstarts;
Tavlnode28408* root;
Tavlnode28408* deleted;
Tavlnode28408* last;
Tavlnode28408* freeavlnodes;
};
struct  Tgcstat48414  {
NI stackscans;
NI cyclecollections;
NI maxthreshold;
NI maxstacksize;
NI maxstackcells;
NI cycletablesize;
NI64 maxpause;
};
struct  Tgcheap48416  {
void* stackbottom;
NI cyclethreshold;
Tcellseq46563 zct;
Tcellseq46563 decstack;
Tcellset46559 cycleroots;
Tcellseq46563 tempstack;
NI recgclock;
Tmemregion28410 region;
Tgcstat48414 stat;
};
typedef Tavlnode28408* TY28414[2];
struct  Tavlnode28408  {
TY28414 link;
NI key;
NI upperbound;
NI level;
};
struct  Tcell46547  {
NI refcount;
TNimType* typ;
};
typedef NI TY27620[8];
struct  Ttrunk27613  {
Ttrunk27613* next;
NI key;
TY27620 bits;
};
struct  Tsmallchunk27640  : public Tbasechunk27638 {
Tsmallchunk27640* next;
Tsmallchunk27640* prev;
Tfreecell27630* freelist;
NI free;
NI acc;
NF data;
};
struct  Tfreecell27630  {
Tfreecell27630* next;
NI zerofield;
};
struct  Tllchunk28404  {
NI size;
NI acc;
Tllchunk28404* next;
};
typedef N_NIMCALL_PTR(void, TY3289) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, TY3294) (void* p);
struct  TNimType  {
NI size;
NU8 kind;
NU8 flags;
TNimType* base;
TNimNode* node;
void* finalizer;
TY3289 marker;
TY3294 deepcopy;
};
struct  Tpagedesc46555  {
Tpagedesc46555* next;
NI key;
TY27620 bits;
};
typedef N_NIMCALL_PTR(void, TFinalizer) (void* self);
struct  TNimNode  {
NU8 kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
typedef NI16 TY79805[1000001];
typedef NimStringDesc* TY81432[5];
struct  TNimObject  {
TNimType* m_type;
};
struct  Exception  : public TNimObject {
Exception* parent;
NCSTRING name;
NimStringDesc* message;
NimStringDesc* trace;
};
struct  Systemerror3429  : public Exception {
};
struct  Ioerror3431  : public Systemerror3429 {
};
struct  Outofmemerror3453  : public Systemerror3429 {
};
struct  Arithmeticerror3439  : public Exception {
};
struct  Overflowerror3443  : public Arithmeticerror3439 {
};
typedef N_NOCONV_PTR(void, TY16405) (void);
typedef N_NOCONV_PTR(void, Tsignalhandler21211) (int sig);
typedef N_NIMCALL_PTR(void, TY16801) (NimStringDesc* msg);
struct  Indexerror3455  : public Exception {
};
struct  Rangeerror3459  : public Exception {
};
typedef NIM_CHAR TY77396[65];
struct  Valueerror3449  : public Exception {
};
typedef struct {
N_NIMCALL_PTR(NIM_BOOL, ClPrc) (Exception* e, void* ClEnv);
void* ClEnv;
} TY15609;
struct  TSafePoint  {
TSafePoint* prev;
NI status;
jmp_buf context;
NIM_BOOL hasRaiseAction;
TY15609 raiseAction;
};
typedef TFrame* TY17401[128];
struct  Reraiseerror3463  : public Exception {
};
struct  Fielderror3457  : public Exception {
};
struct  Objectconversionerror3467  : public Exception {
};
struct  Objectassignmenterror3465  : public Exception {
};
struct  Divbyzeroerror3441  : public Arithmeticerror3439 {
};
struct  Floatingpointerror3469  : public Exception {
};
struct  Floatinvalidoperror3471  : public Floatingpointerror3469 {
};
struct  Floatoverflowerror3475  : public Floatingpointerror3469 {
};
struct  Floatunderflowerror3477  : public Floatingpointerror3469 {
};
typedef NU8 Tnimset26202[8192];
typedef NU8 TY77459[32];
typedef NIM_CHAR TY77470[500];
struct  Treprclosure84714  {
Tcellset46559 marked;
NI recdepth;
NI indent;
};
typedef NIM_CHAR TY84423[60];
struct  Slice87861  {
NI a;
NI b;
};
struct  Assertionerror3447  : public Exception {
};
struct TY13606 : TGenericSeq {
  NimStringDesc* data[SEQ_DECL_SIZE];
};
N_NIMCALL(NI, min_7291)(NI x, NI y);
N_NIMCALL(NI8, min_7302)(NI8 x, NI8 y);
N_NIMCALL(NI16, min_7313)(NI16 x, NI16 y);
N_NIMCALL(NI32, min_7324)(NI32 x, NI32 y);
N_NIMCALL(NI64, min_7335)(NI64 x, NI64 y);
N_NIMCALL(NI, max_7359)(NI x, NI y);
N_NIMCALL(NI8, max_7370)(NI8 x, NI8 y);
N_NIMCALL(NI16, max_7381)(NI16 x, NI16 y);
N_NIMCALL(NI32, max_7392)(NI32 x, NI32 y);
N_NIMCALL(NI64, max_7403)(NI64 x, NI64 y);
N_NIMCALL(NF, abs_7427)(NF x);
N_NIMCALL(NF, min_7438)(NF x, NF y);
N_NIMCALL(NF, max_7449)(NF x, NF y);
N_NIMCALL(void, add_9054)(NimStringDesc*& x, NCSTRING y);
N_NIMCALL(NI, abs_9615)(NI x);
N_NIMCALL(NI8, abs_9625)(NI8 x);
N_NIMCALL(NI16, abs_9635)(NI16 x);
N_NIMCALL(NI32, abs_9645)(NI32 x);
N_NIMCALL(NI64, abs_9655)(NI64 x);
static N_INLINE(void, listremove_32202)(Tbigchunk27642*& head, Tbigchunk27642* c);
static N_INLINE(void, nimFrame)(TFrame* s);
N_NOINLINE(void, stackoverflow_19801)(void);
N_NIMCALL(void, writestacktrace_16407)(void);
N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src);
N_NIMCALL(NimStringDesc*, rawNewStringNoInit)(NI space);
N_NIMCALL(void*, newObjNoInit)(TNimType* typ, NI size);
N_NIMCALL(void*, rawnewobj_56204)(TNimType* typ, NI size, Tgcheap48416& gch);
N_NIMCALL(void, collectct_50410)(Tgcheap48416& gch);
N_NOINLINE(NI, stacksize_70611)(void);
static N_INLINE(void, popFrame)(void);
static N_INLINE(NI, getoccupiedmem_46469)(Tmemregion28410* a);
N_NIMCALL(void, collectctbody_73221)(Tgcheap48416& gch);
static N_INLINE(void, prepareforinteriorpointerchecking_43882)(Tmemregion28410& a);
N_NIMCALL(NI, lowgauge_29418)(Tavlnode28408* n);
N_NIMCALL(NI, highgauge_29444)(Tavlnode28408* n);
N_CDECL(void, markstackandregisters_70840)(Tgcheap48416& gch);
static N_INLINE(void, gcmark_69246)(Tgcheap48416& gch, void* p);
static N_INLINE(Tcell46547*, usrtocell_50047)(void* usr);
N_NIMCALL(void*, interiorallocatedptr_43889)(Tmemregion28410* a, void* p);
static N_INLINE(NIM_BOOL, isaccessible_31219)(Tmemregion28410* a, void* p);
N_NIMCALL(NIM_BOOL, contains_29967)(Tintset27617* s, NI key);
N_NIMCALL(Ttrunk27613*, intsetget_29905)(Tintset27617* t, NI key);
static N_INLINE(NI, pageindex_30447)(void* p);
static N_INLINE(Tbasechunk27638*, pageaddr_30455)(void* p);
static N_INLINE(NIM_BOOL, chunkunused_30319)(Tbasechunk27638* c);
static N_INLINE(NIM_BOOL, issmallchunk_30308)(Tbasechunk27638* c);
N_NIMCALL(Tavlnode28408*, inrange_29514)(Tavlnode28408* root, NI key);
static N_INLINE(void, add_46632)(Tcellseq46563& s, Tcell46547* c);
N_NOCONV(void*, alloc_6001)(NI size);
N_NIMCALL(void*, alloc_45031)(Tmemregion28410& allocator, NI size);
N_NIMCALL(void*, rawalloc_35901)(Tmemregion28410& a, NI requestedsize);
static N_INLINE(NI, roundup_27670)(NI x, NI v);
N_NIMCALL(Tsmallchunk27640*, getsmallchunk_35228)(Tmemregion28410& a);
N_NIMCALL(Tbigchunk27642*, getbigchunk_34419)(Tmemregion28410& a, NI size);
N_NIMCALL(void, splitchunk_34216)(Tmemregion28410& a, Tbigchunk27642* c, NI size);
static N_INLINE(void, updateprevsize_31284)(Tmemregion28410& a, Tbigchunk27642* c, NI prevsize);
N_NIMCALL(void, incl_29991)(Tmemregion28410& a, Tintset27617& s, NI key);
N_NIMCALL(Ttrunk27613*, intsetput_29936)(Tmemregion28410& a, Tintset27617& t, NI key);
N_NIMCALL(void*, llalloc_28655)(Tmemregion28410& a, NI size);
static N_INLINE(void*, osallocpages_27423)(NI size);
N_NOINLINE(void, raiseoutofmem_27060)(void);
static N_INLINE(void, inccurrmem_28605)(Tmemregion28410& a, NI bytes);
static N_INLINE(NI, pageindex_30439)(Tbasechunk27638* c);
static N_INLINE(void, listadd_33425)(Tbigchunk27642*& head, Tbigchunk27642* c);
N_NIMCALL(Tbigchunk27642*, requestoschunks_30465)(Tmemregion28410& a, NI size);
static N_INLINE(void, listadd_36804)(Tsmallchunk27640*& head, Tsmallchunk27640* c);
static N_INLINE(void, listremove_39602)(Tsmallchunk27640*& head, Tsmallchunk27640* c);
N_NIMCALL(void, add_29601)(Tmemregion28410& a, Tavlnode28408*& t, NI key, NI upperbound);
N_NIMCALL(Tavlnode28408*, allocavlnode_28831)(Tmemregion28410& a, NI key, NI upperbound);
N_NIMCALL(void, skew_29576)(Tavlnode28408*& t);
N_NIMCALL(void, split_29584)(Tavlnode28408*& t);
N_NOCONV(void, dealloc_6048)(void* p);
N_NIMCALL(void, dealloc_45229)(Tmemregion28410& allocator, void* p);
N_NIMCALL(void, rawdealloc_42224)(Tmemregion28410& a, void* p);
N_NIMCALL(void, freebigchunk_31406)(Tmemregion28410& a, Tbigchunk27642* c_31410);
N_NIMCALL(void, excl_30007)(Tintset27617& s, NI key);
N_NIMCALL(void, freeoschunks_31010)(Tmemregion28410& a, void* p, NI size);
static N_INLINE(void, osdeallocpages_27431)(void* p, NI size);
static N_INLINE(void, deccurrmem_28622)(Tmemregion28410& a, NI bytes);
N_NIMCALL(void, del_29806)(Tmemregion28410& a, Tavlnode28408*& t, NI x);
static N_INLINE(void, deallocavlnode_29406)(Tmemregion28410& a, Tavlnode28408* n);
N_NIMCALL(void, markthreadstacks_69806)(Tgcheap48416& gch);
N_NIMCALL(NIM_BOOL, collectzct_68612)(Tgcheap48416& gch);
static N_INLINE(NIM_BOOL, canbecycleroot_50068)(Tcell46547* c);
N_NIMCALL(void, excl_47296)(Tcellset46559& s, Tcell46547* cell);
N_NIMCALL(Tpagedesc46555*, cellsetget_46724)(Tcellset46559* t, NI key);
static N_INLINE(NI, nexttry_46716)(NI h, NI maxhash);
N_NIMCALL(void, preparedealloc_50608)(Tcell46547* cell);
static N_INLINE(void*, celltousr_50026)(Tcell46547* cell);
N_NIMCALL(void, forallchildren_50417)(Tcell46547* cell, NU8 op);
N_NIMCALL(void, forallchildrenaux_50425)(void* dest, TNimType* mt, NU8 op);
N_NIMCALL(void, dooperation_50421)(void* p, NU8 op);
static N_INLINE(void, decref_52004)(Tcell46547* c);
static N_INLINE(void, rtladdzct_51604)(Tcell46547* c);
N_NOINLINE(void, addzct_50017)(Tcellseq46563& s, Tcell46547* c);
static N_INLINE(void, rtladdcycleroot_50823)(Tcell46547* c);
N_NOINLINE(void, incl_47265)(Tcellset46559& s, Tcell46547* cell);
N_NIMCALL(Tpagedesc46555*, cellsetput_47063)(Tcellset46559& t, NI key);
N_NIMCALL(void, cellsetenlarge_47012)(Tcellset46559& t);
N_NOCONV(void*, alloc0_6017)(NI size);
N_NIMCALL(void*, alloc0_45219)(Tmemregion28410& allocator, NI size);
N_NIMCALL(void, cellsetrawinsert_46753)(Tcellset46559* t, Tpagedesc46555** data, Tpagedesc46555* desc);
N_NIMCALL(void, markgray_65605)(Tcell46547* s);
N_NIMCALL(void, scan_66004)(Tcell46547* s);
N_NIMCALL(void, scanblack_65804)(Tcell46547* s);
N_NIMCALL(void, collectwhite_66204)(Tcell46547* s);
N_NIMCALL(NIM_BOOL, isallocatedptr_35605)(Tmemregion28410* a, void* p);
N_NIMCALL(void, freecycliccell_64827)(Tgcheap48416& gch, Tcell46547* c);
N_NIMCALL(void, forallslotsaux_54610)(void* dest, TNimNode* n, NU8 op);
N_NIMCALL(TNimNode*, selectbranch_26810)(void* aa, TNimNode* n);
N_NIMCALL(NI, getdiscriminant_26458)(void* aa, TNimNode* n);
N_NIMCALL(void, collectcycles_68844)(Tgcheap48416& gch);
N_NIMCALL(void, markroots_66405)(Tgcheap48416& gch);
N_NIMCALL(void, collectroots_68801)(Tgcheap48416& gch);
N_NIMCALL(void, cellsetreset_54601)(Tcellset46559& s);
N_NIMCALL(void, deinit_46688)(Tcellset46559& s);
N_NIMCALL(void, init_46677)(Tcellset46559& s);
N_NIMCALL(NI, getoccupiedmem_6695)(void);
N_NIMCALL(NI, gettotalmem_6699)(void);
N_NIMCALL(NI, getfreemem_6697)(void);
N_NIMCALL(void, unmarkstackandregisters_73011)(Tgcheap48416& gch);
static N_INLINE(void, addnewobjtozct_55687)(Tcell46547* res, Tgcheap48416& gch);
N_NIMCALL(void, rawwritestacktrace_18001)(NimStringDesc*& s);
static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src);
N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen);
static N_INLINE(NI, resize_76201)(NI old);
N_NIMCALL(void*, growobj_64818)(void* old, NI newsize);
N_NIMCALL(void*, growobj_62006)(void* old, NI newsize, Tgcheap48416& gch);
N_NIMCALL(void, auxwritestacktrace_17405)(TFrame* f, NimStringDesc*& s);
N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(NimStringDesc*, rawNewString)(NI space);
N_NIMCALL(void*, newObj)(TNimType* typ, NI size);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(NimStringDesc*, setLengthStr)(NimStringDesc* s, NI newlen);
N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s, NIM_CHAR c);
N_NIMCALL(void, showerrormessage_17009)(NCSTRING data);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str);
N_NIMCALL(NimStringDesc*, toNimStr)(NCSTRING str, NI len);
N_NIMCALL(void, writetostderr_17001)(NCSTRING msg);
N_NIMCALL(void, write_13469)(FILE* f, NCSTRING c);
static N_INLINE(void, quitordebug_18416)(void);
N_NIMCALL(NIM_BOOL, contains_32211)(Tbigchunk27642* list, Tbigchunk27642* x);
N_NIMCALL(NIM_BOOL, contains_36813)(Tsmallchunk27640* list, Tsmallchunk27640* x);
N_NIMCALL(void, initgc_9801)(void);
N_NIMCALL(void, init_46656)(Tcellseq46563& s, NI cap);
static N_INLINE(void, initallocator_10001)(void);
static N_INLINE(void, initStackBottom)(void);
N_NOINLINE(void, setStackBottom)(void* thestackbottom);
static N_INLINE(void, initStackBottomWith)(void* locals);
N_NIMCALL(NI, cmp_4717)(NimStringDesc* x, NimStringDesc* y);
N_NIMCALL(NIM_BOOL, open_13203)(FILE*& f, NimStringDesc* filename, NU8 mode, NI bufsize);
N_NIMCALL(void*, fopen_81410)(NCSTRING filename, NCSTRING mode);
N_NIMCALL(NI16*, newwidecstring_80944)(NCSTRING s);
N_NIMCALL(NI16*, newwidecstring_80821)(NCSTRING source, NI L);
N_NIMCALL(void, TMP9)(void* p, NI op);
N_NIMCALL(NIM_BOOL, open_13211)(FILE*& f, int filehandle, NU8 mode);
N_NIMCALL(FILE*, open_13217)(NimStringDesc* filename, NU8 mode, NI bufsize);
N_NIMCALL(void, nimGCvisit)(void* d, NI op);
N_NIMCALL(void, TMP16)(void* p, NI op);
N_NIMCALL(void, TMP17)(void* p, NI op);
static N_INLINE(void, asgnRefNoCycle)(void** dest, void* src);
N_NIMCALL(void, raiseException)(Exception* e, NCSTRING ename);
N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src);
N_NIMCALL(void*, newObjRC1)(TNimType* typ, NI size);
static N_INLINE(void, nimGCunrefNoCycle)(void* p);
N_NIMCALL(void, raiseexceptionaux_18604)(Exception* e);
static N_INLINE(NIM_BOOL, isObjWithCache)(TNimType* obj, TNimType* subclass, TNimType** cache);
N_NOINLINE(NIM_BOOL, isobjslowpath_23017)(TNimType* obj, TNimType* subclass, TNimType** cache);
static N_INLINE(void, pushCurrentException)(Exception* e);
static N_INLINE(void, asgnRef)(void** dest, void* src);
static N_INLINE(void, incref_52422)(Tcell46547* c);
N_NIMCALL(NIM_BOOL, reopen_13414)(FILE* f, NimStringDesc* filename, NU8 mode);
N_NIMCALL(FILE*, freopen_81420)(NCSTRING filename, NCSTRING mode, FILE* stream);
N_NIMCALL(NIM_BOOL, endoffile_13422)(FILE* f);
N_NIMCALL(NimStringDesc*, readall_13431)(FILE* file);
N_NIMCALL(NI, rawfilesize_79312)(FILE* file);
N_NIMCALL(NimStringDesc*, readallfile_79320)(FILE* file, NI len);
N_NIMCALL(NI, readbuffer_13515)(FILE* f, void* buffer, NI len);
N_NOINLINE(void, raiseeio_78405)(NimStringDesc* msg);
N_NIMCALL(NimStringDesc*, readallbuffer_79295)(FILE* file);
N_NIMCALL(NimStringDesc*, readfile_13434)(NimStringDesc* filename);
static N_INLINE(void, setFrame)(TFrame* s);
N_NIMCALL(void, writefile_13437)(NimStringDesc* filename, NimStringDesc* content);
N_NIMCALL(void, write_13457)(FILE* f, NimStringDesc* s);
N_NIMCALL(NI, writebuffer_13537)(FILE* f, void* buffer, NI len);
N_NIMCALL(void, write_13441)(FILE* f, NF32 r);
N_NIMCALL(void, write_13445)(FILE* f, NI i);
N_NIMCALL(void, write_13449)(FILE* f, NI64 i);
N_NIMCALL(void, write_13453)(FILE* f, NF r);
N_NIMCALL(void, write_13461)(FILE* f, NIM_BOOL b);
N_NIMCALL(void, write_13465)(FILE* f, NIM_CHAR c);
N_NIMCALL(void, write_13473)(FILE* f, NimStringDesc** a, NI aLen0);
N_NIMCALL(NimStringDesc*, readline_13478)(FILE* f);
N_NIMCALL(NimStringDesc*, rawNewString)(NI cap);
N_NIMCALL(NIM_BOOL, readline_13481)(FILE* f, NimStringDesc*& line);
N_NIMCALL(NI64, getfilesize_13493)(FILE* f);
N_NIMCALL(NI64, getfilepos_13546)(FILE* f);
N_NIMCALL(void, setfilepos_13542)(FILE* f, NI64 pos);
N_NIMCALL(NI, readchars_13507)(FILE* f, NIM_CHAR* a, NI aLen0, NI start, NI len);
N_NIMCALL(NI, writechars_13530)(FILE* f, NIM_CHAR* a, NI aLen0, NI start, NI len);
N_NIMCALL(TY13606*, cstringarraytoseq_13602)(NCSTRING* a, NI len);
N_NIMCALL(void, TMP28)(void* p, NI op);
N_NIMCALL(void*, newSeq)(TNimType* typ, NI len);
static N_INLINE(NI, addInt)(NI a, NI b);
N_NOINLINE(void, raiseOverflow)(void);
N_NIMCALL(void, TMP29)(void* p, NI op);
N_NIMCALL(NI, mulInt)(NI a, NI b);
N_NIMCALL(TY13606*, cstringarraytoseq_13843)(NCSTRING* a);
N_NIMCALL(NCSTRING*, alloccstringarray_14001)(NimStringDesc** a, NI aLen0);
N_NIMCALL(void, dealloccstringarray_14250)(NCSTRING* a);
static N_INLINE(NI, atomicinc_14401)(NI& memloc, NI x);
static N_INLINE(NI, atomicdec_14406)(NI& memloc, NI x);
static N_INLINE(NI, addandfetch_14601)(NI* p, NI val);
static N_INLINE(void, cpurelax_15401)(void);
N_NIMCALL(void, setcontrolchook_16401)(TY16405 hook);
N_NIMCALL(NimStringDesc*, getstacktrace_16601)(void);
N_NIMCALL(NimStringDesc*, getstacktrace_16603)(Exception* e);
static N_INLINE(NI, chckIndx)(NI i, NI a, NI b);
N_NOINLINE(void, raiseIndexError)(void);
N_NIMCALL(void, TMP31)(void* p, NI op);
static N_INLINE(NI, chckRange)(NI i, NI a, NI b);
N_NOINLINE(void, raiseRangeError)(NI64 val);
N_NIMCALL(void, TMP33)(void* p, NI op);
N_NIMCALL(NimStringDesc*, nimInt64ToStr)(NI64 x);
static N_INLINE(NF, chckRangeF)(NF x, NF a, NF b);
N_NIMCALL(NimStringDesc*, nimFloatToStr)(NF f);
N_NOINLINE(void, chckNil)(void* p);
N_NIMCALL(void, TMP38)(void* p, NI op);
static N_INLINE(void, pushSafePoint)(TSafePoint* s);
static N_INLINE(void, popSafePoint)(void);
static N_INLINE(void, popCurrentException)(void);
N_NIMCALL(NIM_BOOL, stacktraceavailable_17932)(void);
N_NIMCALL(void, reraiseException)(void);
N_NIMCALL(void, TMP40)(void* p, NI op);
N_NOCONV(void, signalHandler)(int sig);
static N_INLINE(void, Gcdisable_8801)(void);
static N_INLINE(void, Gcenable_8803)(void);
N_NIMCALL(void, registersignalhandler_21007)(void);
N_NOINLINE(void, raiseFieldError)(NimStringDesc* f);
N_NIMCALL(void, TMP49)(void* p, NI op);
N_NIMCALL(NI64, chckRange64)(NI64 i, NI64 a, NI64 b);
N_NIMCALL(void, chckObj)(TNimType* obj, TNimType* subclass);
N_NIMCALL(void, TMP51)(void* p, NI op);
static N_INLINE(void, chckObjAsgn)(TNimType* a, TNimType* b);
N_NIMCALL(void, TMP53)(void* p, NI op);
N_NIMCALL(NIM_BOOL, isObj)(TNimType* obj, TNimType* subclass);
N_NOINLINE(void, raiseDivByZero)(void);
N_NIMCALL(void, TMP55)(void* p, NI op);
static N_INLINE(NI64, addInt64)(NI64 a, NI64 b);
static N_INLINE(NI64, subInt64)(NI64 a, NI64 b);
static N_INLINE(NI64, negInt64)(NI64 a);
static N_INLINE(NI64, absInt64)(NI64 a);
static N_INLINE(NI64, divInt64)(NI64 a, NI64 b);
static N_INLINE(NI64, modInt64)(NI64 a, NI64 b);
N_NIMCALL(NI64, mulInt64)(NI64 a, NI64 b);
static N_INLINE(NI, absInt)(NI a);
static N_INLINE(NI, subInt)(NI a, NI b);
static N_INLINE(NI, negInt)(NI a);
static N_INLINE(NI, divInt)(NI a, NI b);
static N_INLINE(NI, modInt)(NI a, NI b);
N_NOINLINE(void, raisefloatinvalidop_24823)(void);
N_NIMCALL(void, TMP57)(void* p, NI op);
static N_INLINE(void, nanCheck)(NF x);
N_NOINLINE(void, raisefloatoverflow_25020)(NF x);
N_NIMCALL(void, TMP59)(void* p, NI op);
N_NIMCALL(void, TMP61)(void* p, NI op);
static N_INLINE(void, infCheck)(NF x);
N_NIMCALL(void, rawwrite_25602)(FILE* f, NimStringDesc* s);
N_NOINLINE(void, nimLoadLibraryError)(NimStringDesc* path);
N_NOINLINE(void, procaddrerror_25615)(NCSTRING name);
N_NIMCALL(void, nimUnloadLibrary)(void* lib);
N_NIMCALL(void*, nimLoadLibrary)(NimStringDesc* path);
N_NIMCALL(void*, nimGetProcAddr)(void* lib, NCSTRING name);
N_NIMCALL(NI, countBits32)(NI32 n);
N_NIMCALL(NI, countBits64)(NI64 n);
N_NIMCALL(NI, cardSet)(Tnimset26202 s, NI len);
N_NIMCALL(NI, getmaxmem_28643)(Tmemregion28410& a);
N_NIMCALL(Tavlnode28408*, find_29470)(Tavlnode28408* root, NI key);
N_NIMCALL(void, lldeallocall_29877)(Tmemregion28410& a);
static N_INLINE(NIM_BOOL, iscell_30421)(void* p);
N_NIMCALL(void, writefreelist_31236)(Tmemregion28410* a);
N_NIMCALL(NIM_BOOL, allocinv_35609)(Tmemregion28410* a);
N_NIMCALL(void*, rawalloc0_42214)(Tmemregion28410& a, NI requestedsize);
N_NIMCALL(NI, ptrsize_44816)(void* p);
N_NIMCALL(void*, realloc_46207)(Tmemregion28410& allocator, void* p, NI newsize);
N_NIMCALL(void, deallocospages_46220)(Tmemregion28410& a);
static N_INLINE(NI, getfreemem_46455)(Tmemregion28410* a);
static N_INLINE(NI, gettotalmem_46462)(Tmemregion28410* a);
static N_INLINE(NIM_BOOL, contains_46585)(Tcellseq46563* s, Tcell46547* c);
N_NIMCALL(void, deinit_46668)(Tcellseq46563& s);
N_NIMCALL(NIM_BOOL, contains_47223)(Tcellset46559* s, Tcell46547* cell);
N_NIMCALL(NIM_BOOL, containsorincl_47338)(Tcellset46559& s, Tcell46547* cell);
N_NIMCALL(void, deallocospages_48801)(void);
N_NOCONV(void*, realloc_6033)(void* p, NI newsize);
N_NOCONV(void*, allocshared_6057)(NI size);
N_NOCONV(void*, allocshared0_6073)(NI size);
N_NOCONV(void, deallocshared_6104)(void* p);
N_NOCONV(void*, reallocshared_6089)(void* p, NI newsize);
N_NIMCALL(TNimType*, extGetCellType)(void* c);
N_NIMCALL(NI, getRefcount)(void* p);
N_NIMCALL(void, writecell_50218)(NCSTRING msg, Tcell46547* c);
N_NOINLINE(NIM_BOOL, isonstack_50414)(void* p);
static N_INLINE(void, nimGCref)(void* p);
static N_INLINE(void, nimGCunref)(void* p);
N_NIMCALL(void, unsureAsgnRef)(void** dest, void* src);
N_NIMCALL(void, setupforeignthreadgc_54405)(void);
N_NIMCALL(void, gcinvariant_55895)(void);
N_NIMCALL(void*, newSeqRC1)(TNimType* typ, NI len);
N_NIMCALL(void, Gcsetstrategy_8814)(NU8 strategy);
N_NIMCALL(void, Gcenablemarkandsweep_8817)(void);
N_NIMCALL(void, Gcdisablemarkandsweep_8819)(void);
N_NIMCALL(void, Gcfullcollect_8805)(void);
N_NIMCALL(NimStringDesc*, Gcgetstatistics_8821)(void);
static N_INLINE(NI, cmpStrings)(NimStringDesc* a, NimStringDesc* b);
static N_INLINE(NIM_BOOL, eqStrings)(NimStringDesc* a, NimStringDesc* b);
N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s, NI start_76443, NI last);
N_NIMCALL(NimStringDesc*, copyStr)(NimStringDesc* s, NI start);
N_NIMCALL(NI, hashString)(NimStringDesc* s);
static N_INLINE(void, appendChar)(NimStringDesc* dest, NIM_CHAR c);
N_NIMCALL(TGenericSeq*, incrSeq)(TGenericSeq* seq, NI elemsize);
N_NIMCALL(TGenericSeq*, setLengthSeq)(TGenericSeq* seq, NI elemsize, NI newlen);
N_NIMCALL(NIM_CHAR, getdecimalpoint_77451)(void);
N_NIMCALL(NI, nimParseBiggestFloat)(NimStringDesc* s, NF& number, NI start);
N_NIMCALL(NimStringDesc*, nimBoolToStr)(NIM_BOOL x);
N_NIMCALL(NimStringDesc*, nimCharToStr)(NIM_CHAR x);
N_NIMCALL(NI, binaryStrSearch)(NimStringDesc** x, NI xLen0, NimStringDesc* y);
N_NIMCALL(NimStringDesc*, readallfile_79331)(FILE* file);
static N_INLINE(void, rawEcho)(NimStringDesc* x);
static N_INLINE(void, rawEchoNL)(void);
N_NIMCALL(NI, len_79808)(NI16* w);
N_NIMCALL(NI16*, newwidecstring_81005)(NimStringDesc* s);
N_NIMCALL(NimStringDesc*, HEX24_81012)(NI16* w, NI estimate);
N_NIMCALL(NimStringDesc*, HEX24_81189)(NI16* s);
N_NIMCALL(void, genericresetaux_82201)(void* dest, TNimNode* n);
N_NIMCALL(void, genericReset)(void* dest, TNimType* mt);
N_NIMCALL(void, genericassignaux_82206)(void* dest, void* src, TNimType* mt, NIM_BOOL shallow);
N_NIMCALL(void, genericassignaux_82212)(void* dest, void* src, TNimNode* n, NIM_BOOL shallow);
N_NIMCALL(void, genericAssign)(void* dest, void* src, TNimType* mt);
N_NIMCALL(void, genericShallowAssign)(void* dest, void* src, TNimType* mt);
N_NIMCALL(void, genericSeqAssign)(void* dest, void* src_83204, TNimType* mt);
N_NIMCALL(void, genericAssignOpenArray)(void* dest, void* src, NI len, TNimType* mt);
N_NIMCALL(void, objectInit)(void* dest, TNimType* typ);
N_NIMCALL(void, objectinitaux_83294)(void* dest, TNimNode* n);
N_NIMCALL(TNimNode*, selectbranch_84056)(NI discval, NI L, TNimNode** a);
N_NIMCALL(void, FieldDiscriminantCheck)(NI olddiscval, NI newdiscval, TNimNode** a, NI L);
N_NIMCALL(NimStringDesc*, reprAny)(void* p_84403, TNimType* typ);
N_NIMCALL(void, initreprclosure_84801)(Treprclosure84714& cl);
N_NIMCALL(void, repraux_85640)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl);
N_NIMCALL(void, reprsetaux_84604)(NimStringDesc*& result, void* p, TNimType* typ);
N_NIMCALL(void, addsetelem_84594)(NimStringDesc*& result, NI elem, TNimType* typ);
N_NIMCALL(NimStringDesc*, reprEnum)(NI e_84529, TNimType* typ);
N_NIMCALL(NimStringDesc*, reprBool)(NIM_BOOL x);
N_NIMCALL(NimStringDesc*, reprChar)(NIM_CHAR x);
N_NIMCALL(NimStringDesc*, reprInt)(NI64 x);
N_NIMCALL(void, reprarray_85648)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl);
N_NIMCALL(void, reprrecord_85857)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl);
N_NIMCALL(void, reprrecordaux_85737)(NimStringDesc*& result, void* p, TNimNode* n, Treprclosure84714& cl);
N_NIMCALL(void, reprref_85885)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl);
N_NIMCALL(NimStringDesc*, reprPointer)(void* x);
N_NIMCALL(void, reprsequence_85692)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl);
N_NIMCALL(void, reprstraux_84442)(NimStringDesc*& result, NimStringDesc* s);
N_NIMCALL(void, deinitreprclosure_85205)(Treprclosure84714& cl);
N_NIMCALL(NimStringDesc*, reprFloat)(NF x);
N_NIMCALL(NimStringDesc*, HEX24_6401)(NU64 x);
N_NIMCALL(NimStringDesc*, reprStr)(NimStringDesc* s);
N_NIMCALL(NimStringDesc*, reprSet)(void* p, TNimType* typ);
N_NIMCALL(void, reprbreak_85604)(NimStringDesc*& result, Treprclosure84714* cl);
N_NIMCALL(NimStringDesc*, reprOpenArray)(void* p, NI length, TNimType* elemtyp);
static N_INLINE(Exception*, getCurrentException)(void);
static N_INLINE(NimStringDesc*, getcurrentexceptionmsg_86637)(void);
N_NIMCALL(void, onraise_86656)(TY15609 action);
static N_INLINE(void, setcurrentexception_86674)(Exception* exc);
N_NIMCALL(void, quit_87781)(NimStringDesc* errormsg, NI errorcode);
static N_INLINE(NF, HEX2F_87799)(NI x, NI y);
static N_INLINE(NimStringDesc*, HEX5BHEX5D_87854)(NimStringDesc* s, Slice87861 x);
N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s, NI first, NI last);
N_NIMCALL(void, HEX5BHEX5DHEX3D_87871)(NimStringDesc*& s, Slice87861 x, NimStringDesc* b);
N_NIMCALL(NimStringDesc*, gorge_88404)(NimStringDesc* command, NimStringDesc* input);
N_NIMCALL(NimStringDesc*, staticexec_88415)(NimStringDesc* command, NimStringDesc* input);
static N_INLINE(void, HEX2FHEX3D_88502)(NF& x, NF y);
N_NOINLINE(void, raiseassert_88557)(NimStringDesc* msg);
N_NIMCALL(void, TMP116)(void* p, NI op);
N_NIMCALL(void, failedassertimpl_88617)(NimStringDesc* msg);
static N_INLINE(void, shallow_89224)(NimStringDesc*& s_89227);
N_NIMCALL(void, insert_89601)(NimStringDesc*& x, NimStringDesc* item, NI i);
N_NIMCALL(void, safeadd_90012)(NimStringDesc*& x, NIM_CHAR y);
N_NIMCALL(void, safeadd_90020)(NimStringDesc*& x, NimStringDesc* y);
N_NIMCALL(void, locals_90204)(TNimObject* Result);
N_NIMCALL(void, genericdeepcopyaux_90220)(void* dest, void* src, TNimType* mt);
static N_INLINE(NimStringDesc*, copydeepstring_90427)(NimStringDesc* src);
N_NIMCALL(void, genericdeepcopyaux_90225)(void* dest, void* src, TNimNode* n);
N_NIMCALL(void, genericDeepCopy)(void* dest, void* src, TNimType* mt);
N_NIMCALL(void, genericSeqDeepCopy)(void* dest, void* src_91095, TNimType* mt);
N_NIMCALL(void, genericDeepCopyOpenArray)(void* dest, void* src, NI len, TNimType* mt);
N_NIMCALL(NI, HEX5E_91212)(NI x);
N_NIMCALL(NI, xlen_91239)(NimStringDesc* x);
STRING_LITERAL(TMP2, "", 0);
STRING_LITERAL(TMP3, "out of memory", 13);
STRING_LITERAL(TMP4, "No stack traceback available\015\012", 30);
STRING_LITERAL(TMP5, "Traceback (most recent call last)\015\012", 35);
STRING_LITERAL(TMP6, "(", 1);
STRING_LITERAL(TMP7, " calls omitted) ...", 19);
STRING_LITERAL(TMP8, "\015\012", 2);
STRING_LITERAL(TMP10, "rb", 2);
STRING_LITERAL(TMP11, "wb", 2);
STRING_LITERAL(TMP12, "w+b", 3);
STRING_LITERAL(TMP13, "r+b", 3);
STRING_LITERAL(TMP14, "ab", 2);
NIM_CONST TY81432 Formatopen_81431 = {((NimStringDesc*) &TMP10),
((NimStringDesc*) &TMP11),
((NimStringDesc*) &TMP12),
((NimStringDesc*) &TMP13),
((NimStringDesc*) &TMP14)}
;
STRING_LITERAL(TMP18, "cannot open: ", 13);
STRING_LITERAL(TMP19, "error while reading from file", 29);
STRING_LITERAL(TMP22, "cannot write string to file", 27);
STRING_LITERAL(TMP23, "true", 4);
STRING_LITERAL(TMP24, "false", 5);
STRING_LITERAL(TMP25, "EOF reached", 11);
STRING_LITERAL(TMP26, "cannot retrieve file position", 29);
STRING_LITERAL(TMP27, "cannot set file position", 24);
STRING_LITERAL(TMP30, "over- or underflow", 18);
STRING_LITERAL(TMP32, "index out of bounds", 19);
STRING_LITERAL(TMP34, "value out of range: ", 20);
STRING_LITERAL(TMP35, "nan", 3);
STRING_LITERAL(TMP36, "-inf", 4);
STRING_LITERAL(TMP37, "inf", 3);
STRING_LITERAL(TMP39, "attempt to write to a nil address", 33);
STRING_LITERAL(TMP41, "no exception to reraise", 23);
STRING_LITERAL(TMP42, "SIGINT: Interrupted by Ctrl-C.\015\012", 32);
STRING_LITERAL(TMP43, "SIGSEGV: Illegal storage access. (Attempt to read from nil?)\015\012", 62);
STRING_LITERAL(TMP44, "SIGABRT: Abnormal termination.\015\012", 32);
STRING_LITERAL(TMP45, "SIGFPE: Arithmetic error.\015\012", 27);
STRING_LITERAL(TMP46, "SIGILL: Illegal operation.\015\012", 28);
STRING_LITERAL(TMP47, "SIGBUS: Illegal storage access. (Attempt to read from nil?)\015\012", 61);
STRING_LITERAL(TMP48, "unknown signal\015\012", 16);
STRING_LITERAL(TMP50, " is not accessible", 18);
STRING_LITERAL(TMP52, "invalid object conversion", 25);
STRING_LITERAL(TMP54, "invalid object assignment", 25);
STRING_LITERAL(TMP56, "division by zero", 16);
STRING_LITERAL(TMP58, "FPU operation caused a NaN result", 33);
STRING_LITERAL(TMP60, "FPU operation caused an overflow", 32);
STRING_LITERAL(TMP62, "FPU operations caused an underflow", 34);
STRING_LITERAL(TMP63, "could not load: ", 16);
STRING_LITERAL(TMP64, "could not import: ", 18);
STRING_LITERAL(TMP65, "[SYSASSERT] c.next == c", 23);
STRING_LITERAL(TMP66, "[SYSASSERT] c.size != s * MemAlign", 34);
STRING_LITERAL(TMP67, "[SYSASSERT] it.zeroField != 0", 29);
STRING_LITERAL(TMP68, "[GC] total memory: ", 19);
STRING_LITERAL(TMP69, "\015\012[GC] occupied memory: ", 24);
STRING_LITERAL(TMP70, "\015\012[GC] stack scans: ", 20);
STRING_LITERAL(TMP71, "\015\012[GC] stack cells: ", 20);
STRING_LITERAL(TMP72, "\015\012[GC] cycle collections: ", 26);
STRING_LITERAL(TMP73, "\015\012[GC] max threshold: ", 22);
STRING_LITERAL(TMP74, "\015\012[GC] zct capacity: ", 21);
STRING_LITERAL(TMP75, "\015\012[GC] max cycle table size: ", 29);
STRING_LITERAL(TMP76, "\015\012[GC] max stack size: ", 23);
STRING_LITERAL(TMP77, "\015\012[GC] max pause time [ms]: ", 28);
NIM_CONST TY77459 Identchars_77458 = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,
0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
;
STRING_LITERAL(TMP78, "assignment to discriminant changes object branch", 48);
STRING_LITERAL(TMP79, "...", 3);
STRING_LITERAL(TMP80, "{", 1);
STRING_LITERAL(TMP81, ", ", 2);
STRING_LITERAL(TMP82, " (invalid data!)", 16);
STRING_LITERAL(TMP83, "\'", 1);
STRING_LITERAL(TMP84, "\\\"", 2);
STRING_LITERAL(TMP85, "\\\\", 2);
STRING_LITERAL(TMP86, "\\", 1);
STRING_LITERAL(TMP87, "}", 1);
STRING_LITERAL(TMP88, "[", 1);
STRING_LITERAL(TMP89, "]", 1);
STRING_LITERAL(TMP90, " = ", 3);
STRING_LITERAL(TMP91, ",\015\012", 3);
STRING_LITERAL(TMP92, "nil", 3);
STRING_LITERAL(TMP93, "ref ", 4);
STRING_LITERAL(TMP94, " --> ", 5);
STRING_LITERAL(TMP95, "\"", 1);
STRING_LITERAL(TMP96, "\\10\"\015\012\"", 7);
STRING_LITERAL(TMP97, "(invalid data!)", 15);
NI nim_program_result;
TY9021 globalraisehook_9025;
TY9026 localraisehook_9030;
TY9031 outofmemhook_9033;
TNimType strdesc_10404;
TNimType NTI112; /* int16 */
TNimType NTI79805; /* array[0..1000000, TUtf16Char] */
TNimType NTI79804; /* WideCString */
TNimType NTI3411; /* RootObj */
TNimType NTI3427; /* Exception */
TNimType NTI9022; /* ref Exception */
TNimType NTI151; /* cstring */
TNimType NTI149; /* string */
TNimType NTI3429; /* SystemError */
TNimType NTI3431; /* IOError */
TNimType NTI13401; /* ref IOError */
TNimType NTI3453; /* OutOfMemError */
static TNimType* Nim_OfCheck_CACHE1[2];
TNimType NTI13606; /* seq[string] */
TNimType NTI3439; /* ArithmeticError */
TNimType NTI3443; /* OverflowError */
TNimType NTI23201; /* ref OverflowError */
TY16801 errormessagewriter_16804;
TNimType NTI3455; /* IndexError */
TNimType NTI21801; /* ref IndexError */
TNimType NTI3459; /* RangeError */
TNimType NTI21601; /* ref RangeError */
TNimType NTI3449; /* ValueError */
TNimType NTI22601; /* ref ValueError */
TFrame* frameptr_17042;
TSafePoint* exchandler_17043;
Exception* currexception_17045;
TY17401 tempframes_17404;
TNimType NTI3463; /* ReraiseError */
TNimType NTI19201; /* ref ReraiseError */
TNimType NTI3457; /* FieldError */
TNimType NTI22001; /* ref FieldError */
TNimType NTI3467; /* ObjectConversionError */
TNimType NTI22801; /* ref ObjectConversionError */
TNimType NTI3465; /* ObjectAssignmentError */
TNimType NTI23001; /* ref ObjectAssignmentError */
TNimType NTI3441; /* DivByZeroError */
TNimType NTI23401; /* ref DivByZeroError */
TNimType NTI3469; /* FloatingPointError */
TNimType NTI3471; /* FloatInvalidOpError */
TNimType NTI25001; /* ref FloatInvalidOpError */
TNimType NTI3475; /* FloatOverflowError */
TNimType NTI25201; /* ref FloatOverflowError */
TNimType NTI3477; /* FloatUnderflowError */
TNimType NTI25401; /* ref FloatUnderflowError */
Tavlnode28408 bottomdata_28438;
Tavlnode28408* bottom_28439;
Tgcheap48416 gch_48444;
NIM_BOOL localgcinitialized_54404;
NIM_CHAR decimalpoint_77450;
TNimType NTI3447; /* AssertionError */
TNimType NTI88601; /* ref AssertionError */
TNimType NTI108; /* int */
TNimType NTI138; /* bool */
TNimType NTI147; /* char */

N_NIMCALL(NI, min_7291)(NI x, NI y) {
	NI result;
	result = 0;
	{
		if (!(x <= y)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI8, min_7302)(NI8 x, NI8 y) {
	NI8 result;
	result = 0;
	{
		if (!(x <= y)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI16, min_7313)(NI16 x, NI16 y) {
	NI16 result;
	result = 0;
	{
		if (!(x <= y)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI32, min_7324)(NI32 x, NI32 y) {
	NI32 result;
	result = 0;
	{
		if (!(x <= y)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI64, min_7335)(NI64 x, NI64 y) {
	NI64 result;
	result = 0;
	{
		if (!(x <= y)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI, max_7359)(NI x, NI y) {
	NI result;
	result = 0;
	{
		if (!(y <= x)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI8, max_7370)(NI8 x, NI8 y) {
	NI8 result;
	result = 0;
	{
		if (!(y <= x)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI16, max_7381)(NI16 x, NI16 y) {
	NI16 result;
	result = 0;
	{
		if (!(y <= x)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI32, max_7392)(NI32 x, NI32 y) {
	NI32 result;
	result = 0;
	{
		if (!(y <= x)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI64, max_7403)(NI64 x, NI64 y) {
	NI64 result;
	result = 0;
	{
		if (!(y <= x)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NF, abs_7427)(NF x) {
	NF result;
	result = 0;
	{
		if (!(x < 0.0)) goto LA3;
{		result = -(x);
}	}
	goto LA1;
	LA3: ;
	{
		result = x;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NF, min_7438)(NF x, NF y) {
	NF result;
	result = 0;
	{
		if (!(x <= y)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NF, max_7449)(NF x, NF y) {
	NF result;
	result = 0;
	{
		if (!(y <= x)) goto LA3;
{		result = x;
}	}
	goto LA1;
	LA3: ;
	{
		result = y;
	}
	LA1: ;
	return result;
}

N_NIMCALL(void, add_9054)(NimStringDesc*& x, NCSTRING y) {
	NI i = ((NI) 0);
	{
		while (1) {
			if (!!(((NU8)(y[i]) == (NU8)(0)))) goto LA2;
			x = addChar(x, y[i]);
			i += ((NI) 1);
		} LA2: ;
	}
}

N_NIMCALL(NI, abs_9615)(NI x) {
	NI result;
	result = 0;
	{
		if (!(x < ((NI) 0))) goto LA3;
{		result = ((NI64)-(x));
}	}
	goto LA1;
	LA3: ;
	{
		result = x;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI8, abs_9625)(NI8 x) {
	NI8 result;
	result = 0;
	{
		if (!(x < ((NI8) 0))) goto LA3;
{		result = ((NI8)-(x));
}	}
	goto LA1;
	LA3: ;
	{
		result = x;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI16, abs_9635)(NI16 x) {
	NI16 result;
	result = 0;
	{
		if (!(x < ((NI16) 0))) goto LA3;
{		result = ((NI16)-(x));
}	}
	goto LA1;
	LA3: ;
	{
		result = x;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI32, abs_9645)(NI32 x) {
	NI32 result;
	result = 0;
	{
		if (!(x < ((NI32) 0))) goto LA3;
{		result = ((NI32)-(x));
}	}
	goto LA1;
	LA3: ;
	{
		result = x;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NI64, abs_9655)(NI64 x) {
	NI64 result;
	result = 0;
	{
		if (!(x < IL64(0))) goto LA3;
{		result = -(x);
}	}
	goto LA1;
	LA3: ;
	{
		result = x;
	}
	LA1: ;
	return result;
}

static N_INLINE(void, popFrame)(void) {
	frameptr_17042 = (*frameptr_17042).prev;
}

N_NOINLINE(NI, stacksize_70611)(void) {
	NI result;
	void* volatile stacktop;
	nimfr("stackSize", "gc.nim")
	result = 0;
	stacktop = 0;
	nimln(846, "gc.nim");
	result = ((NI)(((NI) ((&stacktop))) - ((NI) (gch_48444.stackbottom))) > 0? ((NI)(((NI) ((&stacktop))) - ((NI) (gch_48444.stackbottom)))) : -((NI)(((NI) ((&stacktop))) - ((NI) (gch_48444.stackbottom)))));
	popFrame();
	return result;
}

static N_INLINE(NI, getoccupiedmem_46469)(Tmemregion28410* a) {
	NI result;
	nimfr("getOccupiedMem", "alloc.nim")
	result = 0;
	nimln(762, "alloc.nim");
	result = (NI)((*a).currmem - (*a).freemem);
	popFrame();
	return result;
}

N_NIMCALL(NI, lowgauge_29418)(Tavlnode28408* n) {
	NI result;
	nimfr("lowGauge", "avltree.nim")
	result = 0;
	nimln(15, "avltree.nim");
	Tavlnode28408* it = n;
	{
		nimln(16, "avltree.nim");
		while (1) {
			if (!!((it == bottom_28439))) goto LA2;
			nimln(17, "avltree.nim");
			result = (*it).key;
			nimln(18, "avltree.nim");
			it = (*it).link[(((NI) 0))- 0];
		} LA2: ;
	}
	popFrame();
	return result;
}

N_NIMCALL(NI, highgauge_29444)(Tavlnode28408* n) {
	NI result;
	nimfr("highGauge", "avltree.nim")
	result = 0;
	nimln(21, "avltree.nim");
	result = ((NI) -1);
	nimln(22, "avltree.nim");
	Tavlnode28408* it = n;
	{
		nimln(23, "avltree.nim");
		while (1) {
			if (!!((it == bottom_28439))) goto LA2;
			nimln(24, "avltree.nim");
			result = (*it).upperbound;
			nimln(25, "avltree.nim");
			it = (*it).link[(((NI) 1))- 0];
		} LA2: ;
	}
	popFrame();
	return result;
}

static N_INLINE(void, prepareforinteriorpointerchecking_43882)(Tmemregion28410& a) {
	nimfr("prepareForInteriorPointerChecking", "alloc.nim")
	nimln(667, "alloc.nim");
	a.minlargeobj = lowgauge_29418(a.root);
	nimln(668, "alloc.nim");
	a.maxlargeobj = highgauge_29444(a.root);
	popFrame();
}

static N_INLINE(Tcell46547*, usrtocell_50047)(void* usr) {
	Tcell46547* result;
	nimfr("usrToCell", "gc.nim")
	result = 0;
	nimln(118, "gc.nim");
	result = ((Tcell46547*) ((NI)((NU64)(((NI) (usr))) - (NU64)(((NI)sizeof(Tcell46547))))));
	popFrame();
	return result;
}

N_NIMCALL(Ttrunk27613*, intsetget_29905)(Tintset27617* t, NI key) {
	Ttrunk27613* result;
	nimfr("intSetGet", "alloc.nim")
{	result = 0;
	nimln(256, "alloc.nim");
	Ttrunk27613* it = (*t).data[((NI)(key & ((NI) 255)))- 0];
	{
		nimln(257, "alloc.nim");
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			nimln(258, "alloc.nim");
			{
				if (!((*it).key == key)) goto LA5;
{				result = it;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(259, "alloc.nim");
			it = (*it).next;
		} LA2: ;
	}
	nimln(260, "alloc.nim");
	result = NIM_NIL;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, contains_29967)(Tintset27617* s, NI key) {
	NIM_BOOL result;
	nimfr("contains", "alloc.nim")
	result = 0;
	nimln(271, "alloc.nim");
	Ttrunk27613* t = intsetget_29905(s, (NI)((NU64)(key) >> (NU64)(((NI) 9))));
	nimln(272, "alloc.nim");
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		nimln(273, "alloc.nim");
		NI u = (NI)(key & ((NI) 511));
		nimln(274, "alloc.nim");
		result = !(((NI)((*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u)) & ((NI) 63))))))) == ((NI) 0)));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(276, "alloc.nim");
		result = NIM_FALSE;
	}
	LA1: ;
	popFrame();
	return result;
}

static N_INLINE(NI, pageindex_30447)(void* p) {
	NI result;
	nimfr("pageIndex", "alloc.nim")
	result = 0;
	nimln(341, "alloc.nim");
	result = (NI)((NU64)(((NI) (p))) >> (NU64)(((NI) 12)));
	popFrame();
	return result;
}

static N_INLINE(NIM_BOOL, isaccessible_31219)(Tmemregion28410* a, void* p) {
	NIM_BOOL result;
	nimfr("isAccessible", "alloc.nim")
	result = 0;
	nimln(391, "alloc.nim");
	result = contains_29967((&(*a).chunkstarts), pageindex_30447(p));
	popFrame();
	return result;
}

static N_INLINE(Tbasechunk27638*, pageaddr_30455)(void* p) {
	Tbasechunk27638* result;
	nimfr("pageAddr", "alloc.nim")
	result = 0;
	nimln(344, "alloc.nim");
	result = ((Tbasechunk27638*) ((NI)(((NI) (p)) & ((NI) -4096))));
	popFrame();
	return result;
}

static N_INLINE(NIM_BOOL, chunkunused_30319)(Tbasechunk27638* c) {
	NIM_BOOL result;
	nimfr("chunkUnused", "alloc.nim")
	result = 0;
	nimln(312, "alloc.nim");
	result = !((*c).used);
	popFrame();
	return result;
}

static N_INLINE(NIM_BOOL, issmallchunk_30308)(Tbasechunk27638* c) {
	NIM_BOOL result;
	nimfr("isSmallChunk", "alloc.nim")
{	result = 0;
	nimln(309, "alloc.nim");
	result = ((*c).size <= (NI)(((NI) 4096) - (NI)(((NI)sizeof(Tsmallchunk27640)) - ((NI) 8))));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(Tavlnode28408*, inrange_29514)(Tavlnode28408* root, NI key) {
	Tavlnode28408* result;
	nimfr("inRange", "avltree.nim")
{	result = 0;
	nimln(34, "avltree.nim");
	Tavlnode28408* it = root;
	{
		nimln(35, "avltree.nim");
		while (1) {
			if (!!((it == bottom_28439))) goto LA2;
			nimln(36, "avltree.nim");
			{
				NIM_BOOL LOC5;
				LOC5 = 0;
				LOC5 = ((NU64)((*it).key) <= (NU64)(key));
				if (!(LOC5)) goto LA6;
				LOC5 = ((NU64)(key) < (NU64)((*it).upperbound));
				LA6: ;
				if (!LOC5) goto LA7;
{				result = it;
				goto BeforeRet;
}			}
			LA7: ;
			nimln(37, "avltree.nim");
			it = (*it).link[(((NU64)((*it).key) < (NU64)(key)))- 0];
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void*, interiorallocatedptr_43889)(Tmemregion28410* a, void* p) {
	void* result;
	nimfr("interiorAllocatedPtr", "alloc.nim")
	result = 0;
	nimln(671, "alloc.nim");
	{
		if (!isaccessible_31219(a, p)) goto LA3;
{		nimln(672, "alloc.nim");
		Tbasechunk27638* c_43894 = pageaddr_30455(p);
		nimln(673, "alloc.nim");
		{
			NIM_BOOL LOC7;
			LOC7 = 0;
			LOC7 = chunkunused_30319(c_43894);
			if (!!(LOC7)) goto LA8;
{			nimln(674, "alloc.nim");
			{
				if (!issmallchunk_30308(c_43894)) goto LA12;
{				nimln(675, "alloc.nim");
				Tsmallchunk27640* c = ((Tsmallchunk27640*) (c_43894));
				nimln(676, "alloc.nim");
				nimln(677, "alloc.nim");
				NI offset = (NI)((NU64)(((NI) ((NI)(((NI) (p)) & ((NI) 4095))))) - (NU64)((NI)(((NI)sizeof(Tsmallchunk27640)) - ((NI) 8))));
				nimln(678, "alloc.nim");
				{
					if (!((NU64)(offset) < (NU64)((*c).acc))) goto LA16;
{					nimln(681, "alloc.nim");
					nimln(682, "alloc.nim");
					nimln(681, "alloc.nim");
					nimln(682, "alloc.nim");
					Tfreecell27630* d = ((Tfreecell27630*) ((NI)((NU64)((NI)((NU64)(((NI) ((&(*c).data)))) + (NU64)(offset))) - (NU64)((NI)((NU64)(offset) % (NU64)((*c).size))))));
					nimln(683, "alloc.nim");
					{
						if (!((NU64)(((NI) 1)) < (NU64)((*d).zerofield))) goto LA20;
{						nimln(684, "alloc.nim");
						result = ((void*) (d));
}					}
					LA20: ;
}				}
				LA16: ;
}			}
			goto LA10;
			LA12: ;
			{
				nimln(687, "alloc.nim");
				Tbigchunk27642* c = ((Tbigchunk27642*) (c_43894));
				nimln(688, "alloc.nim");
				NF* d = (&(*c).data);
				nimln(689, "alloc.nim");
				{
					NIM_BOOL LOC25;
					LOC25 = 0;
					LOC25 = (((void*) (d)) <= p);
					if (!(LOC25)) goto LA26;
					LOC25 = ((NU64)(((NI) 1)) < (NU64)((*((Tfreecell27630*) (d))).zerofield));
					LA26: ;
					if (!LOC25) goto LA27;
{					nimln(690, "alloc.nim");
					result = ((void*) (d));
}				}
				LA27: ;
			}
			LA10: ;
}		}
		LA8: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(693, "alloc.nim");
		NI q = ((NI) (p));
		nimln(694, "alloc.nim");
		{
			NIM_BOOL LOC32;
			LOC32 = 0;
			LOC32 = ((NU64)((*a).minlargeobj) <= (NU64)(q));
			if (!(LOC32)) goto LA33;
			LOC32 = ((NU64)(q) <= (NU64)((*a).maxlargeobj));
			LA33: ;
			if (!LOC32) goto LA34;
{			nimln(697, "alloc.nim");
			Tavlnode28408* avlnode = inrange_29514((*a).root, q);
			nimln(698, "alloc.nim");
			{
				Tbasechunk27638* LOC40;
				if (!!((avlnode == NIM_NIL))) goto LA38;
{				nimln(699, "alloc.nim");
				void* k = ((void*) ((*avlnode).key));
				nimln(700, "alloc.nim");
				LOC40 = 0;
				LOC40 = pageaddr_30455(k);
				Tbigchunk27642* c = ((Tbigchunk27642*) (LOC40));
				nimln(702, "alloc.nim");
				{
					if (!((NU64)(((NI) 1)) < (NU64)((*((Tfreecell27630*) (k))).zerofield))) goto LA43;
{					nimln(703, "alloc.nim");
					result = k;
}				}
				LA43: ;
}			}
			LA38: ;
}		}
		LA34: ;
	}
	LA1: ;
	popFrame();
	return result;
}

static N_INLINE(NI, roundup_27670)(NI x, NI v) {
	NI result;
	nimfr("roundup", "alloc.nim")
	result = 0;
	nimln(143, "alloc.nim");
	result = (NI)((NI)(x + (NI)(v - ((NI) 1))) & (NI)((NU64) ~((NI)(v - ((NI) 1)))));
	popFrame();
	return result;
}

static N_INLINE(void, updateprevsize_31284)(Tmemregion28410& a, Tbigchunk27642* c, NI prevsize) {
	nimfr("updatePrevSize", "alloc.nim")
	nimln(432, "alloc.nim");
	Tbasechunk27638* ri = ((Tbasechunk27638*) ((NI)((NU64)(((NI) (c))) + (NU64)((*c).size))));
	nimln(434, "alloc.nim");
	{
		if (!isaccessible_31219((&a), ((void*) (ri)))) goto LA3;
{		nimln(435, "alloc.nim");
		(*ri).prevsize = prevsize;
}	}
	LA3: ;
	popFrame();
}

N_NOINLINE(void, raiseoutofmem_27060)(void) {
	nimfr("raiseOutOfMem", "mmdisp.nim")
	nimln(63, "mmdisp.nim");
	{
		if (!!((outofmemhook_9033 == NIM_NIL))) goto LA3;
{		outofmemhook_9033();
}	}
	LA3: ;
	nimln(64, "mmdisp.nim");
	printf("%s\015\012", ((NimStringDesc*) &TMP3)? (((NimStringDesc*) &TMP3))->data:"nil");
	nimln(65, "mmdisp.nim");
	exit(((NI) 1));
	popFrame();
}

static N_INLINE(void*, osallocpages_27423)(NI size) {
	void* result;
	nimfr("osAllocPages", "alloc.nim")
	result = 0;
	nimln(71, "alloc.nim");
	result = VirtualAlloc(NIM_NIL, size, ((NI32) 12288), ((NI32) 4));
	nimln(73, "alloc.nim");
	{
		if (!(result == NIM_NIL)) goto LA3;
{		raiseoutofmem_27060();
}	}
	LA3: ;
	popFrame();
	return result;
}

static N_INLINE(void, inccurrmem_28605)(Tmemregion28410& a, NI bytes) {
	nimfr("incCurrMem", "alloc.nim")
	nimln(195, "alloc.nim");
	a.currmem += bytes;
	popFrame();
}

N_NIMCALL(void*, llalloc_28655)(Tmemregion28410& a, NI size) {
	void* result;
	nimfr("llAlloc", "alloc.nim")
	result = 0;
	nimln(210, "alloc.nim");
	{
		NIM_BOOL LOC3;
		void* LOC7;
		LOC3 = 0;
		LOC3 = (a.llmem == NIM_NIL);
		if (LOC3) goto LA4;
		LOC3 = ((*a.llmem).size < size);
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(215, "alloc.nim");
		Tllchunk28404* old = a.llmem;
		nimln(216, "alloc.nim");
		LOC7 = 0;
		LOC7 = osallocpages_27423(((NI) 4096));
		a.llmem = ((Tllchunk28404*) (LOC7));
		nimln(217, "alloc.nim");
		inccurrmem_28605(a, ((NI) 4096));
		nimln(218, "alloc.nim");
		(*a.llmem).size = (NI)(((NI) 4096) - ((NI)sizeof(Tllchunk28404)));
		nimln(219, "alloc.nim");
		(*a.llmem).acc = ((NI)sizeof(Tllchunk28404));
		nimln(220, "alloc.nim");
		(*a.llmem).next = old;
}	}
	LA5: ;
	nimln(221, "alloc.nim");
	result = ((void*) ((NI)(((NI) (a.llmem)) + (*a.llmem).acc)));
	nimln(222, "alloc.nim");
	(*a.llmem).size -= size;
	nimln(223, "alloc.nim");
	(*a.llmem).acc += size;
	nimln(224, "alloc.nim");
	zeroMem(result, ((NI) (size)));
	popFrame();
	return result;
}

N_NIMCALL(Ttrunk27613*, intsetput_29936)(Tmemregion28410& a, Tintset27617& t, NI key) {
	Ttrunk27613* result;
	nimfr("intSetPut", "alloc.nim")
	result = 0;
	nimln(263, "alloc.nim");
	result = intsetget_29905((&t), key);
	nimln(264, "alloc.nim");
	{
		void* LOC5;
		if (!(result == NIM_NIL)) goto LA3;
{		nimln(265, "alloc.nim");
		LOC5 = 0;
		LOC5 = llalloc_28655(a, ((NI)sizeof(Ttrunk27613)));
		result = ((Ttrunk27613*) (LOC5));
		nimln(266, "alloc.nim");
		(*result).next = t.data[((NI)(key & ((NI) 255)))- 0];
		nimln(267, "alloc.nim");
		t.data[((NI)(key & ((NI) 255)))- 0] = result;
		nimln(268, "alloc.nim");
		(*result).key = key;
}	}
	LA3: ;
	popFrame();
	return result;
}

N_NIMCALL(void, incl_29991)(Tmemregion28410& a, Tintset27617& s, NI key) {
	nimfr("incl", "alloc.nim")
	nimln(279, "alloc.nim");
	Ttrunk27613* t = intsetput_29936(a, s, (NI)((NU64)(key) >> (NU64)(((NI) 9))));
	nimln(280, "alloc.nim");
	NI u = (NI)(key & ((NI) 511));
	nimln(281, "alloc.nim");
	(*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u)) & ((NI) 63)))))));
	popFrame();
}

static N_INLINE(NI, pageindex_30439)(Tbasechunk27638* c) {
	NI result;
	nimfr("pageIndex", "alloc.nim")
	result = 0;
	nimln(338, "alloc.nim");
	result = (NI)((NU64)(((NI) (c))) >> (NU64)(((NI) 12)));
	popFrame();
	return result;
}

static N_INLINE(void, listadd_33425)(Tbigchunk27642*& head, Tbigchunk27642* c) {
	nimfr("listAdd", "alloc.nim")
	nimln(411, "alloc.nim");
	(*c).next = head;
	nimln(412, "alloc.nim");
	{
		if (!!((head == NIM_NIL))) goto LA3;
{		nimln(414, "alloc.nim");
		(*head).prev = c;
}	}
	LA3: ;
	nimln(415, "alloc.nim");
	head = c;
	popFrame();
}

N_NIMCALL(void, splitchunk_34216)(Tmemregion28410& a, Tbigchunk27642* c, NI size) {
	nimfr("splitChunk", "alloc.nim")
	nimln(471, "alloc.nim");
	Tbigchunk27642* rest = ((Tbigchunk27642*) ((NI)((NU64)(((NI) (c))) + (NU64)(size))));
	nimln(473, "alloc.nim");
	(*rest).size = (NI)((*c).size - size);
	nimln(474, "alloc.nim");
	(*rest).used = NIM_FALSE;
	nimln(475, "alloc.nim");
	(*rest).next = NIM_NIL;
	nimln(476, "alloc.nim");
	(*rest).prev = NIM_NIL;
	nimln(477, "alloc.nim");
	(*rest).prevsize = size;
	nimln(478, "alloc.nim");
	updateprevsize_31284(a, c, (*rest).size);
	nimln(479, "alloc.nim");
	(*c).size = size;
	nimln(480, "alloc.nim");
	incl_29991(a, a.chunkstarts, pageindex_30439(rest));
	nimln(481, "alloc.nim");
	listadd_33425(a.freechunkslist, rest);
	popFrame();
}

N_NIMCALL(Tbigchunk27642*, requestoschunks_30465)(Tmemregion28410& a, NI size) {
	Tbigchunk27642* result;
	void* LOC1;
	NI LOC6;
	nimfr("requestOsChunks", "alloc.nim")
	result = 0;
	nimln(348, "alloc.nim");
	inccurrmem_28605(a, size);
	nimln(349, "alloc.nim");
	a.freemem += size;
	nimln(350, "alloc.nim");
	LOC1 = 0;
	LOC1 = osallocpages_27423(size);
	result = ((Tbigchunk27642*) (LOC1));
	nimln(353, "alloc.nim");
	(*result).next = NIM_NIL;
	nimln(354, "alloc.nim");
	(*result).prev = NIM_NIL;
	nimln(355, "alloc.nim");
	(*result).used = NIM_FALSE;
	nimln(356, "alloc.nim");
	(*result).size = size;
	nimln(358, "alloc.nim");
	NI nxt = (NI)((NU64)(((NI) (result))) + (NU64)(size));
	nimln(360, "alloc.nim");
	Tbasechunk27638* next = ((Tbasechunk27638*) (nxt));
	nimln(361, "alloc.nim");
	{
		if (!contains_29967((&a.chunkstarts), pageindex_30439(next))) goto LA4;
{		nimln(363, "alloc.nim");
		(*next).prevsize = size;
}	}
	LA4: ;
	nimln(365, "alloc.nim");
	LOC6 = 0;
	{
		if (!!((a.lastsize == ((NI) 0)))) goto LA9;
{		LOC6 = a.lastsize;
}	}
	goto LA7;
	LA9: ;
	{
		LOC6 = ((NI) 4096);
	}
	LA7: ;
	NI lastsize = LOC6;
	nimln(366, "alloc.nim");
	NI prv = (NI)((NU64)(((NI) (result))) - (NU64)(lastsize));
	nimln(368, "alloc.nim");
	Tbasechunk27638* prev = ((Tbasechunk27638*) (prv));
	nimln(369, "alloc.nim");
	{
		NIM_BOOL LOC14;
		LOC14 = 0;
		LOC14 = contains_29967((&a.chunkstarts), pageindex_30439(prev));
		if (!(LOC14)) goto LA15;
		LOC14 = ((*prev).size == lastsize);
		LA15: ;
		if (!LOC14) goto LA16;
{		nimln(371, "alloc.nim");
		(*result).prevsize = lastsize;
}	}
	goto LA12;
	LA16: ;
	{
		nimln(373, "alloc.nim");
		(*result).prevsize = ((NI) 0);
	}
	LA12: ;
	nimln(374, "alloc.nim");
	a.lastsize = size;
	popFrame();
	return result;
}

N_NIMCALL(Tbigchunk27642*, getbigchunk_34419)(Tmemregion28410& a, NI size) {
	Tbigchunk27642* result;
	nimfr("getBigChunk", "alloc.nim")
	result = 0;
	nimln(487, "alloc.nim");
	result = a.freechunkslist;
	{
		{
			nimln(489, "alloc.nim");
			while (1) {
				if (!!((result == NIM_NIL))) goto LA3;
				nimln(491, "alloc.nim");
				{
					if (!((*result).size == size)) goto LA6;
{					nimln(492, "alloc.nim");
					listremove_32202(a.freechunkslist, result);
					nimln(493, "alloc.nim");
					goto LA1;
}				}
				goto LA4;
				LA6: ;
				{
					nimln(494, "alloc.nim");
					if (!(size < (*result).size)) goto LA9;
{					nimln(495, "alloc.nim");
					listremove_32202(a.freechunkslist, result);
					nimln(496, "alloc.nim");
					splitchunk_34216(a, result, size);
					nimln(497, "alloc.nim");
					goto LA1;
}				}
				goto LA4;
				LA9: ;
				LA4: ;
				nimln(498, "alloc.nim");
				result = (*result).next;
			} LA3: ;
		}
		nimln(500, "alloc.nim");
		{
			if (!(size < ((NI) 524288))) goto LA13;
{			nimln(501, "alloc.nim");
			result = requestoschunks_30465(a, ((NI) 524288));
			nimln(502, "alloc.nim");
			splitchunk_34216(a, result, size);
}		}
		goto LA11;
		LA13: ;
		{
			nimln(504, "alloc.nim");
			result = requestoschunks_30465(a, size);
		}
		LA11: ;
	} LA1: ;
	nimln(505, "alloc.nim");
	(*result).prevsize = ((NI) 0);
	nimln(506, "alloc.nim");
	(*result).used = NIM_TRUE;
	nimln(507, "alloc.nim");
	incl_29991(a, a.chunkstarts, pageindex_30439(result));
	nimln(508, "alloc.nim");
	a.freemem -= size;
	popFrame();
	return result;
}

N_NIMCALL(Tsmallchunk27640*, getsmallchunk_35228)(Tmemregion28410& a) {
	Tsmallchunk27640* result;
	nimfr("getSmallChunk", "alloc.nim")
	result = 0;
	nimln(511, "alloc.nim");
	Tbigchunk27642* res = getbigchunk_34419(a, ((NI) 4096));
	nimln(514, "alloc.nim");
	result = ((Tsmallchunk27640*) (res));
	popFrame();
	return result;
}

static N_INLINE(void, listadd_36804)(Tsmallchunk27640*& head, Tsmallchunk27640* c) {
	nimfr("listAdd", "alloc.nim")
	nimln(411, "alloc.nim");
	(*c).next = head;
	nimln(412, "alloc.nim");
	{
		if (!!((head == NIM_NIL))) goto LA3;
{		nimln(414, "alloc.nim");
		(*head).prev = c;
}	}
	LA3: ;
	nimln(415, "alloc.nim");
	head = c;
	popFrame();
}

static N_INLINE(void, listremove_39602)(Tsmallchunk27640*& head, Tsmallchunk27640* c) {
	nimfr("listRemove", "alloc.nim")
	nimln(419, "alloc.nim");
	{
		if (!(c == head)) goto LA3;
{		nimln(420, "alloc.nim");
		head = (*c).next;
		nimln(422, "alloc.nim");
		{
			if (!!((head == NIM_NIL))) goto LA7;
{			(*head).prev = NIM_NIL;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(425, "alloc.nim");
		(*(*c).prev).next = (*c).next;
		nimln(426, "alloc.nim");
		{
			if (!!(((*c).next == NIM_NIL))) goto LA12;
{			(*(*c).next).prev = (*c).prev;
}		}
		LA12: ;
	}
	LA1: ;
	nimln(427, "alloc.nim");
	(*c).next = NIM_NIL;
	nimln(428, "alloc.nim");
	(*c).prev = NIM_NIL;
	popFrame();
}

N_NIMCALL(Tavlnode28408*, allocavlnode_28831)(Tmemregion28410& a, NI key, NI upperbound) {
	Tavlnode28408* result;
	nimfr("allocAvlNode", "alloc.nim")
	result = 0;
	nimln(227, "alloc.nim");
	{
		if (!!((a.freeavlnodes == NIM_NIL))) goto LA3;
{		nimln(228, "alloc.nim");
		result = a.freeavlnodes;
		nimln(229, "alloc.nim");
		a.freeavlnodes = (*a.freeavlnodes).link[(((NI) 0))- 0];
}	}
	goto LA1;
	LA3: ;
	{
		void* LOC6;
		nimln(231, "alloc.nim");
		LOC6 = 0;
		LOC6 = llalloc_28655(a, ((NI)sizeof(Tavlnode28408)));
		result = ((Tavlnode28408*) (LOC6));
	}
	LA1: ;
	nimln(232, "alloc.nim");
	(*result).key = key;
	nimln(233, "alloc.nim");
	(*result).upperbound = upperbound;
	nimln(234, "alloc.nim");
	(*result).link[(((NI) 0))- 0] = bottom_28439;
	nimln(235, "alloc.nim");
	(*result).link[(((NI) 1))- 0] = bottom_28439;
	nimln(236, "alloc.nim");
	(*result).level = ((NI) 1);
	popFrame();
	return result;
}

N_NIMCALL(void, skew_29576)(Tavlnode28408*& t) {
	nimfr("skew", "avltree.nim")
	nimln(40, "avltree.nim");
	{
		if (!((*(*t).link[(((NI) 0))- 0]).level == (*t).level)) goto LA3;
{		nimln(41, "avltree.nim");
		Tavlnode28408* temp = t;
		nimln(42, "avltree.nim");
		t = (*t).link[(((NI) 0))- 0];
		nimln(43, "avltree.nim");
		(*temp).link[(((NI) 0))- 0] = (*t).link[(((NI) 1))- 0];
		nimln(44, "avltree.nim");
		(*t).link[(((NI) 1))- 0] = temp;
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, split_29584)(Tavlnode28408*& t) {
	nimfr("split", "avltree.nim")
	nimln(47, "avltree.nim");
	{
		if (!((*(*(*t).link[(((NI) 1))- 0]).link[(((NI) 1))- 0]).level == (*t).level)) goto LA3;
{		nimln(48, "avltree.nim");
		Tavlnode28408* temp = t;
		nimln(49, "avltree.nim");
		t = (*t).link[(((NI) 1))- 0];
		nimln(50, "avltree.nim");
		(*temp).link[(((NI) 1))- 0] = (*t).link[(((NI) 0))- 0];
		nimln(51, "avltree.nim");
		(*t).link[(((NI) 0))- 0] = temp;
		nimln(52, "avltree.nim");
		(*t).level += ((NI) 1);
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, add_29601)(Tmemregion28410& a, Tavlnode28408*& t, NI key, NI upperbound) {
	nimfr("add", "avltree.nim")
	nimln(55, "avltree.nim");
	{
		if (!(t == bottom_28439)) goto LA3;
{		nimln(56, "avltree.nim");
		t = allocavlnode_28831(a, key, upperbound);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(58, "avltree.nim");
		{
			if (!((NU64)(key) < (NU64)((*t).key))) goto LA8;
{			nimln(59, "avltree.nim");
			add_29601(a, (*t).link[(((NI) 0))- 0], key, upperbound);
}		}
		goto LA6;
		LA8: ;
		{
			nimln(60, "avltree.nim");
			if (!((NU64)((*t).key) < (NU64)(key))) goto LA11;
{			nimln(61, "avltree.nim");
			add_29601(a, (*t).link[(((NI) 1))- 0], key, upperbound);
}		}
		goto LA6;
		LA11: ;
		{
		}
		LA6: ;
		nimln(64, "avltree.nim");
		skew_29576(t);
		nimln(65, "avltree.nim");
		split_29584(t);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void*, rawalloc_35901)(Tmemregion28410& a, NI requestedsize) {
	void* result;
	nimfr("rawAlloc", "alloc.nim")
	result = 0;
	nimln(544, "alloc.nim");
	NI size = roundup_27670(requestedsize, ((NI) 8));
	nimln(547, "alloc.nim");
	{
		if (!(size <= (NI)(((NI) 4096) - (NI)(((NI)sizeof(Tsmallchunk27640)) - ((NI) 8))))) goto LA3;
{		nimln(549, "alloc.nim");
		NI s = (NI)(size / ((NI) 8));
		nimln(550, "alloc.nim");
		Tsmallchunk27640* c = a.freesmallchunks[(s)- 0];
		nimln(551, "alloc.nim");
		{
			if (!(c == NIM_NIL)) goto LA7;
{			nimln(552, "alloc.nim");
			c = getsmallchunk_35228(a);
			nimln(553, "alloc.nim");
			(*c).freelist = NIM_NIL;
			nimln(555, "alloc.nim");
			(*c).size = size;
			nimln(556, "alloc.nim");
			(*c).acc = size;
			nimln(557, "alloc.nim");
			(*c).free = (NI)((NI)(((NI) 4096) - (NI)(((NI)sizeof(Tsmallchunk27640)) - ((NI) 8))) - size);
			nimln(558, "alloc.nim");
			(*c).next = NIM_NIL;
			nimln(559, "alloc.nim");
			(*c).prev = NIM_NIL;
			nimln(560, "alloc.nim");
			listadd_36804(a.freesmallchunks[(s)- 0], c);
			nimln(561, "alloc.nim");
			result = ((void*) ((&(*c).data)));
}		}
		goto LA5;
		LA7: ;
		{
			nimln(569, "alloc.nim");
			{
				if (!((*c).freelist == NIM_NIL)) goto LA12;
{				nimln(572, "alloc.nim");
				result = ((void*) ((NI)((NU64)(((NI) ((&(*c).data)))) + (NU64)((*c).acc))));
				nimln(573, "alloc.nim");
				(*c).acc += size;
}			}
			goto LA10;
			LA12: ;
			{
				nimln(575, "alloc.nim");
				result = ((void*) ((*c).freelist));
				nimln(577, "alloc.nim");
				(*c).freelist = (*(*c).freelist).next;
			}
			LA10: ;
			nimln(578, "alloc.nim");
			(*c).free -= size;
		}
		LA5: ;
		nimln(582, "alloc.nim");
		{
			if (!((*c).free < size)) goto LA17;
{			nimln(584, "alloc.nim");
			listremove_39602(a.freesmallchunks[(s)- 0], c);
}		}
		LA17: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(590, "alloc.nim");
		size = roundup_27670((NI)(requestedsize + (NI)(((NI)sizeof(Tbigchunk27642)) - ((NI) 8))), ((NI) 4096));
		nimln(592, "alloc.nim");
		Tbigchunk27642* c = getbigchunk_34419(a, size);
		nimln(596, "alloc.nim");
		result = ((void*) ((&(*c).data)));
		nimln(598, "alloc.nim");
		{
			if (!(a.root == NIM_NIL)) goto LA22;
{			a.root = bottom_28439;
}		}
		LA22: ;
		nimln(599, "alloc.nim");
		add_29601(a, a.root, ((NI) (result)), (NI)((NU64)(((NI) (result))) + (NU64)(size)));
	}
	LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(void*, alloc_45031)(Tmemregion28410& allocator, NI size) {
	void* result;
	nimfr("alloc", "alloc.nim")
	result = 0;
	nimln(715, "alloc.nim");
	result = rawalloc_35901(allocator, (NI)(((NI) (size)) + ((NI)sizeof(Tfreecell27630))));
	nimln(716, "alloc.nim");
	(*((Tfreecell27630*) (result))).zerofield = ((NI) 1);
	nimln(718, "alloc.nim");
	result = ((void*) ((NI)((NU64)(((NI) (result))) + (NU64)(((NI)sizeof(Tfreecell27630))))));
	popFrame();
	return result;
}

N_NOCONV(void*, alloc_6001)(NI size) {
	void* result;
	nimfr("alloc", "alloc.nim")
	result = 0;
	nimln(778, "alloc.nim");
	result = alloc_45031(gch_48444.region, size);
	popFrame();
	return result;
}

N_NIMCALL(void, excl_30007)(Tintset27617& s, NI key) {
	nimfr("excl", "alloc.nim")
	nimln(284, "alloc.nim");
	Ttrunk27613* t = intsetget_29905((&s), (NI)((NU64)(key) >> (NU64)(((NI) 9))));
	nimln(285, "alloc.nim");
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		nimln(286, "alloc.nim");
		NI u = (NI)(key & ((NI) 511));
		nimln(287, "alloc.nim");
		nimln(288, "alloc.nim");
		(*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64) ~((NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u)) & ((NI) 63)))))))));
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, osdeallocpages_27431)(void* p, NI size) {
	nimfr("osDeallocPages", "alloc.nim")
	nimln(82, "alloc.nim");
	VirtualFree(p, ((NI) 0), ((NI32) 32768));
	popFrame();
}

static N_INLINE(void, deccurrmem_28622)(Tmemregion28410& a, NI bytes) {
	nimfr("decCurrMem", "alloc.nim")
	nimln(198, "alloc.nim");
	a.maxmem = ((a.maxmem >= a.currmem) ? a.maxmem : a.currmem);
	nimln(199, "alloc.nim");
	a.currmem -= bytes;
	popFrame();
}

N_NIMCALL(void, freeoschunks_31010)(Tmemregion28410& a, void* p, NI size) {
	nimfr("freeOsChunks", "alloc.nim")
	nimln(378, "alloc.nim");
	Tbasechunk27638* c = ((Tbasechunk27638*) (p));
	nimln(379, "alloc.nim");
	NI nxt = (NI)((NU64)(((NI) (p))) + (NU64)((*c).size));
	nimln(381, "alloc.nim");
	Tbasechunk27638* next = ((Tbasechunk27638*) (nxt));
	nimln(382, "alloc.nim");
	{
		if (!contains_29967((&a.chunkstarts), pageindex_30439(next))) goto LA3;
{		nimln(383, "alloc.nim");
		(*next).prevsize = ((NI) 0);
}	}
	LA3: ;
	nimln(384, "alloc.nim");
	excl_30007(a.chunkstarts, pageindex_30447(p));
	nimln(385, "alloc.nim");
	osdeallocpages_27431(p, size);
	nimln(386, "alloc.nim");
	deccurrmem_28622(a, size);
	nimln(387, "alloc.nim");
	a.freemem -= size;
	popFrame();
}

N_NIMCALL(void, freebigchunk_31406)(Tmemregion28410& a, Tbigchunk27642* c_31410) {
	nimfr("freeBigChunk", "alloc.nim")
	nimln(438, "alloc.nim");
	Tbigchunk27642* c = c_31410;
	nimln(440, "alloc.nim");
	a.freemem += (*c).size;
	nimln(442, "alloc.nim");
	Tbasechunk27638* ri = ((Tbasechunk27638*) ((NI)((NU64)(((NI) (c))) + (NU64)((*c).size))));
	nimln(444, "alloc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = isaccessible_31219((&a), ((void*) (ri)));
		if (!(LOC3)) goto LA4;
		LOC3 = chunkunused_30319(ri);
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(446, "alloc.nim");
		{
			NIM_BOOL LOC9;
			LOC9 = 0;
			LOC9 = issmallchunk_30308(ri);
			if (!!(LOC9)) goto LA10;
{			nimln(447, "alloc.nim");
			listremove_32202(a.freechunkslist, ((Tbigchunk27642*) (ri)));
			nimln(448, "alloc.nim");
			(*c).size += (*ri).size;
			nimln(449, "alloc.nim");
			excl_30007(a.chunkstarts, pageindex_30439(ri));
}		}
		LA10: ;
}	}
	LA5: ;
	nimln(451, "alloc.nim");
	{
		if (!!(((*c).prevsize == ((NI) 0)))) goto LA14;
{		nimln(452, "alloc.nim");
		Tbasechunk27638* le = ((Tbasechunk27638*) ((NI)((NU64)(((NI) (c))) - (NU64)((*c).prevsize))));
		nimln(454, "alloc.nim");
		{
			NIM_BOOL LOC18;
			LOC18 = 0;
			LOC18 = isaccessible_31219((&a), ((void*) (le)));
			if (!(LOC18)) goto LA19;
			LOC18 = chunkunused_30319(le);
			LA19: ;
			if (!LOC18) goto LA20;
{			nimln(456, "alloc.nim");
			{
				NIM_BOOL LOC24;
				LOC24 = 0;
				LOC24 = issmallchunk_30308(le);
				if (!!(LOC24)) goto LA25;
{				nimln(457, "alloc.nim");
				listremove_32202(a.freechunkslist, ((Tbigchunk27642*) (le)));
				nimln(458, "alloc.nim");
				(*le).size += (*c).size;
				nimln(459, "alloc.nim");
				excl_30007(a.chunkstarts, pageindex_30439(c));
				nimln(460, "alloc.nim");
				c = ((Tbigchunk27642*) (le));
}			}
			LA25: ;
}		}
		LA20: ;
}	}
	LA14: ;
	nimln(462, "alloc.nim");
	{
		NIM_BOOL LOC29;
		LOC29 = 0;
		LOC29 = ((*c).size < ((NI) 1048576));
		if (LOC29) goto LA30;
		LOC29 = NIM_TRUE;
		LA30: ;
		if (!LOC29) goto LA31;
{		nimln(463, "alloc.nim");
		incl_29991(a, a.chunkstarts, pageindex_30439(c));
		nimln(464, "alloc.nim");
		updateprevsize_31284(a, c, (*c).size);
		nimln(465, "alloc.nim");
		listadd_33425(a.freechunkslist, c);
		nimln(466, "alloc.nim");
		(*c).used = NIM_FALSE;
}	}
	goto LA27;
	LA31: ;
	{
		nimln(468, "alloc.nim");
		freeoschunks_31010(a, ((void*) (c)), (*c).size);
	}
	LA27: ;
	popFrame();
}

static N_INLINE(void, deallocavlnode_29406)(Tmemregion28410& a, Tavlnode28408* n) {
	nimfr("deallocAvlNode", "alloc.nim")
	nimln(242, "alloc.nim");
	(*n).link[(((NI) 0))- 0] = a.freeavlnodes;
	nimln(243, "alloc.nim");
	a.freeavlnodes = n;
	popFrame();
}

N_NIMCALL(void, del_29806)(Tmemregion28410& a, Tavlnode28408*& t, NI x) {
	nimfr("del", "avltree.nim")
{	nimln(68, "avltree.nim");
	{
		if (!(t == bottom_28439)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	nimln(69, "avltree.nim");
	a.last = t;
	nimln(70, "avltree.nim");
	{
		if (!((NU64)(x) < (NU64)((*t).key))) goto LA7;
{		nimln(71, "avltree.nim");
		del_29806(a, (*t).link[(((NI) 0))- 0], x);
}	}
	goto LA5;
	LA7: ;
	{
		nimln(73, "avltree.nim");
		a.deleted = t;
		nimln(74, "avltree.nim");
		del_29806(a, (*t).link[(((NI) 1))- 0], x);
	}
	LA5: ;
	nimln(75, "avltree.nim");
	{
		NIM_BOOL LOC12;
		NIM_BOOL LOC13;
		LOC12 = 0;
		LOC13 = 0;
		LOC13 = (t == a.last);
		if (!(LOC13)) goto LA14;
		LOC13 = !((a.deleted == bottom_28439));
		LA14: ;
		LOC12 = LOC13;
		if (!(LOC12)) goto LA15;
		LOC12 = (x == (*a.deleted).key);
		LA15: ;
		if (!LOC12) goto LA16;
{		nimln(76, "avltree.nim");
		(*a.deleted).key = (*t).key;
		nimln(77, "avltree.nim");
		(*a.deleted).upperbound = (*t).upperbound;
		nimln(78, "avltree.nim");
		a.deleted = bottom_28439;
		nimln(79, "avltree.nim");
		t = (*t).link[(((NI) 1))- 0];
		nimln(80, "avltree.nim");
		deallocavlnode_29406(a, a.last);
}	}
	goto LA10;
	LA16: ;
	{
		NIM_BOOL LOC19;
		nimln(81, "avltree.nim");
		LOC19 = 0;
		LOC19 = ((*(*t).link[(((NI) 0))- 0]).level < (NI)((*t).level - ((NI) 1)));
		if (LOC19) goto LA20;
		nimln(82, "avltree.nim");
		LOC19 = ((*(*t).link[(((NI) 1))- 0]).level < (NI)((*t).level - ((NI) 1)));
		LA20: ;
		if (!LOC19) goto LA21;
{		nimln(83, "avltree.nim");
		(*t).level -= ((NI) 1);
		nimln(84, "avltree.nim");
		{
			if (!((*t).level < (*(*t).link[(((NI) 1))- 0]).level)) goto LA25;
{			nimln(85, "avltree.nim");
			(*(*t).link[(((NI) 1))- 0]).level = (*t).level;
}		}
		LA25: ;
		nimln(86, "avltree.nim");
		skew_29576(t);
		nimln(87, "avltree.nim");
		skew_29576((*t).link[(((NI) 1))- 0]);
		nimln(88, "avltree.nim");
		skew_29576((*(*t).link[(((NI) 1))- 0]).link[(((NI) 1))- 0]);
		nimln(89, "avltree.nim");
		split_29584(t);
		nimln(90, "avltree.nim");
		split_29584((*t).link[(((NI) 1))- 0]);
}	}
	goto LA10;
	LA21: ;
	LA10: ;
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, rawdealloc_42224)(Tmemregion28410& a, void* p) {
	nimfr("rawDealloc", "alloc.nim")
	nimln(611, "alloc.nim");
	Tbasechunk27638* c_42401 = pageaddr_30455(p);
	nimln(612, "alloc.nim");
	{
		if (!issmallchunk_30308(c_42401)) goto LA3;
{		nimln(614, "alloc.nim");
		Tsmallchunk27640* c = ((Tsmallchunk27640*) (c_42401));
		nimln(615, "alloc.nim");
		NI s = (*c).size;
		nimln(618, "alloc.nim");
		Tfreecell27630* f = ((Tfreecell27630*) (p));
		nimln(621, "alloc.nim");
		(*f).zerofield = ((NI) 0);
		nimln(622, "alloc.nim");
		(*f).next = (*c).freelist;
		nimln(623, "alloc.nim");
		(*c).freelist = f;
		nimln(629, "alloc.nim");
		{
			if (!((*c).free < s)) goto LA7;
{			nimln(631, "alloc.nim");
			listadd_36804(a.freesmallchunks[((NI)(s / ((NI) 8)))- 0], c);
			nimln(632, "alloc.nim");
			(*c).free += s;
}		}
		goto LA5;
		LA7: ;
		{
			nimln(634, "alloc.nim");
			(*c).free += s;
			nimln(635, "alloc.nim");
			{
				if (!((*c).free == (NI)(((NI) 4096) - (NI)(((NI)sizeof(Tsmallchunk27640)) - ((NI) 8))))) goto LA12;
{				nimln(636, "alloc.nim");
				listremove_39602(a.freesmallchunks[((NI)(s / ((NI) 8)))- 0], c);
				nimln(637, "alloc.nim");
				(*c).size = ((NI) 4096);
				nimln(638, "alloc.nim");
				freebigchunk_31406(a, ((Tbigchunk27642*) (c)));
}			}
			LA12: ;
		}
		LA5: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(645, "alloc.nim");
		Tbigchunk27642* c = ((Tbigchunk27642*) (c_42401));
		nimln(646, "alloc.nim");
		a.deleted = bottom_28439;
		nimln(647, "alloc.nim");
		del_29806(a, a.root, ((NI) ((&(*c).data))));
		nimln(648, "alloc.nim");
		freebigchunk_31406(a, c);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, dealloc_45229)(Tmemregion28410& allocator, void* p) {
	nimfr("dealloc", "alloc.nim")
	nimln(726, "alloc.nim");
	void* x = ((void*) ((NI)((NU64)(((NI) (p))) - (NU64)(((NI)sizeof(Tfreecell27630))))));
	nimln(730, "alloc.nim");
	rawdealloc_42224(allocator, x);
	popFrame();
}

N_NOCONV(void, dealloc_6048)(void* p) {
	nimfr("dealloc", "alloc.nim")
	nimln(784, "alloc.nim");
	dealloc_45229(gch_48444.region, p);
	popFrame();
}

static N_INLINE(void, add_46632)(Tcellseq46563& s, Tcell46547* c) {
	nimfr("add", "cellsets.nim")
	nimln(52, "cellsets.nim");
	{
		void* LOC5;
		if (!(s.cap <= s.len)) goto LA3;
{		nimln(53, "cellsets.nim");
		s.cap = (NI)((NI)(s.cap * ((NI) 3)) / ((NI) 2));
		nimln(54, "cellsets.nim");
		LOC5 = 0;
		LOC5 = alloc_6001(((NI) ((NI)(s.cap * ((NI) 8)))));
		Tcell46547** d = ((Tcell46547**) (LOC5));
		nimln(55, "cellsets.nim");
		memcpy(((void*) (d)), ((void*) (s.d)), ((NI) ((NI)(s.len * ((NI) 8)))));
		nimln(56, "cellsets.nim");
		dealloc_6048(((void*) (s.d)));
		nimln(57, "cellsets.nim");
		s.d = d;
}	}
	LA3: ;
	nimln(59, "cellsets.nim");
	s.d[(s.len)- 0] = c;
	nimln(60, "cellsets.nim");
	s.len += ((NI) 1);
	popFrame();
}

static N_INLINE(void, gcmark_69246)(Tgcheap48416& gch, void* p) {
	nimfr("gcMark", "gc.nim")
	nimln(784, "gc.nim");
	Tcell46547* cell = usrtocell_50047(p);
	nimln(785, "gc.nim");
	NI c = ((NI) (cell));
	nimln(786, "gc.nim");
	{
		void* LOC5;
		if (!((NU64)(((NI) 4096)) < (NU64)(c))) goto LA3;
{		nimln(788, "gc.nim");
		LOC5 = 0;
		LOC5 = interiorallocatedptr_43889((&gch.region), ((void*) (cell)));
		Tcell46547* objstart = ((Tcell46547*) (LOC5));
		nimln(789, "gc.nim");
		{
			if (!!((objstart == NIM_NIL))) goto LA8;
{			nimln(791, "gc.nim");
			(*objstart).refcount = (NI)((NU64)((*objstart).refcount) + (NU64)(((NI) 8)));
			nimln(792, "gc.nim");
			add_46632(gch.decstack, objstart);
}		}
		LA8: ;
}	}
	LA3: ;
	popFrame();
}

N_CDECL(void, markstackandregisters_70840)(Tgcheap48416& gch) {
	jmp_buf registers;
	nimfr("markStackAndRegisters", "gc.nim")
	nimln(922, "gc.nim");
	{
		int LOC3;
		LOC3 = 0;
		LOC3 = setjmp(registers);
		if (!(LOC3 == ((NI32) 0))) goto LA4;
{		nimln(923, "gc.nim");
		NI max = ((NI) (gch.stackbottom));
		nimln(924, "gc.nim");
		NI sp = ((NI) ((&registers)));
		{
			nimln(926, "gc.nim");
			while (1) {
				if (!((NU64)(sp) < (NU64)((NI)(max - ((NI) 64))))) goto LA7;
				nimln(927, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 0))- 0]);
				nimln(928, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 1))- 0]);
				nimln(929, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 2))- 0]);
				nimln(930, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 3))- 0]);
				nimln(931, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 4))- 0]);
				nimln(932, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 5))- 0]);
				nimln(933, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 6))- 0]);
				nimln(934, "gc.nim");
				gcmark_69246(gch, ((void**) (sp))[(((NI) 7))- 0]);
				nimln(935, "gc.nim");
				sp = (NI)((NU64)(sp) + (NU64)(((NI) 64)));
			} LA7: ;
		}
		{
			nimln(937, "gc.nim");
			while (1) {
				if (!((NU64)(sp) <= (NU64)(max))) goto LA9;
				nimln(938, "gc.nim");
				gcmark_69246(gch, (*((void**) (sp))));
				nimln(939, "gc.nim");
				sp = (NI)((NU64)(sp) + (NU64)(((NI) 8)));
			} LA9: ;
		}
}	}
	LA4: ;
	popFrame();
}

N_NIMCALL(void, markthreadstacks_69806)(Tgcheap48416& gch) {
	nimfr("markThreadStacks", "gc.nim")
	popFrame();
}

static N_INLINE(NIM_BOOL, canbecycleroot_50068)(Tcell46547* c) {
	NIM_BOOL result;
	nimfr("canBeCycleRoot", "gc.nim")
	result = 0;
	nimln(121, "gc.nim");
	result = !((((*(*c).typ).flags &(1<<((((NU8) 1))&7)))!=0));
	popFrame();
	return result;
}

static N_INLINE(NI, nexttry_46716)(NI h, NI maxhash) {
	NI result;
	nimfr("nextTry", "cellsets.nim")
	result = 0;
	nimln(96, "cellsets.nim");
	result = (NI)((NI)((NI)(((NI) 5) * h) + ((NI) 1)) & maxhash);
	popFrame();
	return result;
}

N_NIMCALL(Tpagedesc46555*, cellsetget_46724)(Tcellset46559* t, NI key) {
	Tpagedesc46555* result;
	nimfr("cellSetGet", "cellsets.nim")
{	result = 0;
	nimln(102, "cellsets.nim");
	NI h = (NI)(((NI) (key)) & (*t).max);
	{
		nimln(103, "cellsets.nim");
		while (1) {
			if (!!(((*t).data[(h)- 0] == NIM_NIL))) goto LA2;
			nimln(104, "cellsets.nim");
			{
				if (!((*(*t).data[(h)- 0]).key == key)) goto LA5;
{				result = (*t).data[(h)- 0];
				goto BeforeRet;
}			}
			LA5: ;
			nimln(105, "cellsets.nim");
			h = nexttry_46716(h, (*t).max);
		} LA2: ;
	}
	nimln(106, "cellsets.nim");
	result = NIM_NIL;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, excl_47296)(Tcellset46559& s, Tcell46547* cell) {
	nimfr("excl", "cellsets.nim")
	nimln(165, "cellsets.nim");
	NI u = ((NI) (cell));
	nimln(166, "cellsets.nim");
	Tpagedesc46555* t = cellsetget_46724((&s), (NI)((NU64)(u) >> (NU64)(((NI) 12))));
	nimln(167, "cellsets.nim");
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		nimln(168, "cellsets.nim");
		u = (NI)((NU64)((NI)((NU64)(u) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		nimln(169, "cellsets.nim");
		nimln(170, "cellsets.nim");
		(*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64) ~((NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63)))))))));
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void*, celltousr_50026)(Tcell46547* cell) {
	void* result;
	nimfr("cellToUsr", "gc.nim")
	result = 0;
	nimln(114, "gc.nim");
	result = ((void*) ((NI)((NU64)(((NI) (cell))) + (NU64)(((NI)sizeof(Tcell46547))))));
	popFrame();
	return result;
}

N_NIMCALL(void, preparedealloc_50608)(Tcell46547* cell) {
	nimfr("prepareDealloc", "gc.nim")
	nimln(174, "gc.nim");
	{
		if (!!(((*(*cell).typ).finalizer == NIM_NIL))) goto LA3;
{		nimln(180, "gc.nim");
		gch_48444.recgclock += ((NI) 1);
		nimln(181, "gc.nim");
		((TFinalizer) ((*(*cell).typ).finalizer))(celltousr_50026(cell));
		nimln(182, "gc.nim");
		gch_48444.recgclock -= ((NI) 1);
}	}
	LA3: ;
	popFrame();
}

N_NOINLINE(void, addzct_50017)(Tcellseq46563& s, Tcell46547* c) {
	nimfr("addZCT", "gc.nim")
	nimln(108, "gc.nim");
	{
		if (!((NI)((*c).refcount & ((NI) 4)) == ((NI) 0))) goto LA3;
{		nimln(109, "gc.nim");
		(*c).refcount = (NI)((*c).refcount | ((NI) 4));
		nimln(110, "gc.nim");
		add_46632(s, c);
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, rtladdzct_51604)(Tcell46547* c) {
	nimfr("rtlAddZCT", "gc.nim")
	nimln(199, "gc.nim");
	addzct_50017(gch_48444.zct, c);
	popFrame();
}

N_NIMCALL(void*, alloc0_45219)(Tmemregion28410& allocator, NI size) {
	void* result;
	nimfr("alloc0", "alloc.nim")
	result = 0;
	nimln(721, "alloc.nim");
	result = alloc_45031(allocator, size);
	nimln(722, "alloc.nim");
	zeroMem(result, size);
	popFrame();
	return result;
}

N_NOCONV(void*, alloc0_6017)(NI size) {
	void* result;
	nimfr("alloc0", "alloc.nim")
	result = 0;
	nimln(781, "alloc.nim");
	result = alloc0_45219(gch_48444.region, size);
	popFrame();
	return result;
}

N_NIMCALL(void, cellsetrawinsert_46753)(Tcellset46559* t, Tpagedesc46555** data, Tpagedesc46555* desc) {
	nimfr("cellSetRawInsert", "cellsets.nim")
	nimln(109, "cellsets.nim");
	NI h = (NI)(((NI) ((*desc).key)) & (*t).max);
	{
		nimln(110, "cellsets.nim");
		while (1) {
			if (!!((data[(h)- 0] == NIM_NIL))) goto LA2;
			nimln(112, "cellsets.nim");
			h = nexttry_46716(h, (*t).max);
		} LA2: ;
	}
	nimln(114, "cellsets.nim");
	data[(h)- 0] = desc;
	popFrame();
}

N_NIMCALL(void, cellsetenlarge_47012)(Tcellset46559& t) {
	void* LOC1;
	nimfr("cellSetEnlarge", "cellsets.nim")
	nimln(117, "cellsets.nim");
	NI oldmax = t.max;
	nimln(118, "cellsets.nim");
	t.max = (NI)((NI)((NI)(t.max + ((NI) 1)) * ((NI) 2)) - ((NI) 1));
	nimln(119, "cellsets.nim");
	LOC1 = 0;
	LOC1 = alloc0_6017(((NI) ((NI)((NI)(t.max + ((NI) 1)) * ((NI) 8)))));
	Tpagedesc46555** n = ((Tpagedesc46555**) (LOC1));
	{
		NI i_47029;
		i_47029 = 0;
		nimln(1598, "system.nim");
		NI res_47047 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_47047 <= oldmax)) goto LA4;
				nimln(1600, "system.nim");
				i_47029 = res_47047;
				nimln(121, "cellsets.nim");
				{
					if (!!((t.data[(i_47029)- 0] == NIM_NIL))) goto LA7;
{					nimln(122, "cellsets.nim");
					cellsetrawinsert_46753((&t), n, t.data[(i_47029)- 0]);
}				}
				LA7: ;
				nimln(1619, "system.nim");
				res_47047 += ((NI) 1);
			} LA4: ;
		}
	}
	nimln(123, "cellsets.nim");
	dealloc_6048(((void*) (t.data)));
	nimln(124, "cellsets.nim");
	t.data = n;
	popFrame();
}

N_NIMCALL(Tpagedesc46555*, cellsetput_47063)(Tcellset46559& t, NI key) {
	Tpagedesc46555* result;
	void* LOC19;
	nimfr("cellSetPut", "cellsets.nim")
{	result = 0;
	nimln(127, "cellsets.nim");
	NI h = (NI)(((NI) (key)) & t.max);
	{
		nimln(128, "cellsets.nim");
		while (1) {
			nimln(129, "cellsets.nim");
			Tpagedesc46555* x = t.data[(h)- 0];
			nimln(130, "cellsets.nim");
			{
				if (!(x == NIM_NIL)) goto LA5;
{				goto LA1;
}			}
			LA5: ;
			nimln(131, "cellsets.nim");
			{
				if (!((*x).key == key)) goto LA9;
{				result = x;
				goto BeforeRet;
}			}
			LA9: ;
			nimln(132, "cellsets.nim");
			h = nexttry_46716(h, t.max);
		}
	} LA1: ;
	nimln(134, "cellsets.nim");
	{
		NIM_BOOL LOC13;
		LOC13 = 0;
		LOC13 = ((NI)((NI)(t.max + ((NI) 1)) * ((NI) 2)) < (NI)(t.counter * ((NI) 3)));
		if (LOC13) goto LA14;
		LOC13 = ((NI)((NI)(t.max + ((NI) 1)) - t.counter) < ((NI) 4));
		LA14: ;
		if (!LOC13) goto LA15;
{		nimln(135, "cellsets.nim");
		cellsetenlarge_47012(t);
}	}
	LA15: ;
	nimln(136, "cellsets.nim");
	t.counter += ((NI) 1);
	nimln(137, "cellsets.nim");
	h = (NI)(((NI) (key)) & t.max);
	{
		nimln(138, "cellsets.nim");
		while (1) {
			if (!!((t.data[(h)- 0] == NIM_NIL))) goto LA18;
			h = nexttry_46716(h, t.max);
		} LA18: ;
	}
	nimln(141, "cellsets.nim");
	LOC19 = 0;
	LOC19 = alloc0_6017(((NI) (((NI)sizeof(Tpagedesc46555)))));
	result = ((Tpagedesc46555*) (LOC19));
	nimln(142, "cellsets.nim");
	(*result).next = t.head;
	nimln(143, "cellsets.nim");
	(*result).key = key;
	nimln(144, "cellsets.nim");
	t.head = result;
	nimln(145, "cellsets.nim");
	t.data[(h)- 0] = result;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NOINLINE(void, incl_47265)(Tcellset46559& s, Tcell46547* cell) {
	nimfr("incl", "cellsets.nim")
	nimln(159, "cellsets.nim");
	NI u = ((NI) (cell));
	nimln(160, "cellsets.nim");
	Tpagedesc46555* t = cellsetput_47063(s, (NI)((NU64)(u) >> (NU64)(((NI) 12))));
	nimln(161, "cellsets.nim");
	u = (NI)((NU64)((NI)((NU64)(u) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
	nimln(162, "cellsets.nim");
	(*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63)))))));
	popFrame();
}

static N_INLINE(void, rtladdcycleroot_50823)(Tcell46547* c) {
	nimfr("rtlAddCycleRoot", "gc.nim")
	nimln(189, "gc.nim");
	{
		if (!!((((NI) ((NI)((*c).refcount & ((NI) 3)))) == ((NI) 3)))) goto LA3;
{		nimln(139, "gc.nim");
		(*c).refcount = (NI)((NI)((*c).refcount & ((NI) -4)) | ((NI) 3));
		nimln(191, "gc.nim");
		incl_47265(gch_48444.cycleroots, c);
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, decref_52004)(Tcell46547* c) {
	nimfr("decRef", "gc.nim")
	nimln(206, "gc.nim");
	{
		nimln(167, "gc.nim");
		(*c).refcount -= ((NI) 8);
		nimln(168, "gc.nim");
		if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		nimln(207, "gc.nim");
		rtladdzct_51604(c);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(208, "gc.nim");
		if (!canbecycleroot_50068(c)) goto LA6;
{		nimln(211, "gc.nim");
		rtladdcycleroot_50823(c);
}	}
	goto LA1;
	LA6: ;
	LA1: ;
	popFrame();
}

N_NIMCALL(void, markgray_65605)(Tcell46547* s) {
	nimfr("markGray", "gc.nim")
	nimln(595, "gc.nim");
	{
		if (!!((((NI) ((NI)((*s).refcount & ((NI) 3)))) == ((NI) 1)))) goto LA3;
{		nimln(139, "gc.nim");
		(*s).refcount = (NI)((NI)((*s).refcount & ((NI) -4)) | ((NI) 1));
		nimln(597, "gc.nim");
		forallchildren_50417(s, ((NU8) 5));
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, scanblack_65804)(Tcell46547* s) {
	nimfr("scanBlack", "gc.nim")
	nimln(137, "gc.nim");
	(*s).refcount = (NI)((*s).refcount & ((NI) -4));
	nimln(601, "gc.nim");
	forallchildren_50417(s, ((NU8) 7));
	popFrame();
}

N_NIMCALL(void, scan_66004)(Tcell46547* s) {
	nimfr("scan", "gc.nim")
	nimln(604, "gc.nim");
	{
		if (!(((NI) ((NI)((*s).refcount & ((NI) 3)))) == ((NI) 1))) goto LA3;
{		nimln(605, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*s).refcount))) goto LA7;
{			nimln(606, "gc.nim");
			scanblack_65804(s);
}		}
		goto LA5;
		LA7: ;
		{
			nimln(139, "gc.nim");
			(*s).refcount = (NI)((NI)((*s).refcount & ((NI) -4)) | ((NI) 2));
			nimln(609, "gc.nim");
			forallchildren_50417(s, ((NU8) 6));
		}
		LA5: ;
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(NIM_BOOL, isallocatedptr_35605)(Tmemregion28410* a, void* p) {
	NIM_BOOL result;
	nimfr("isAllocatedPtr", "alloc.nim")
	result = 0;
	nimln(653, "alloc.nim");
	{
		if (!isaccessible_31219(a, p)) goto LA3;
{		nimln(654, "alloc.nim");
		Tbasechunk27638* c_43816 = pageaddr_30455(p);
		nimln(655, "alloc.nim");
		{
			NIM_BOOL LOC7;
			LOC7 = 0;
			LOC7 = chunkunused_30319(c_43816);
			if (!!(LOC7)) goto LA8;
{			nimln(656, "alloc.nim");
			{
				NIM_BOOL LOC14;
				NIM_BOOL LOC15;
				if (!issmallchunk_30308(c_43816)) goto LA12;
{				nimln(657, "alloc.nim");
				Tsmallchunk27640* c = ((Tsmallchunk27640*) (c_43816));
				nimln(658, "alloc.nim");
				nimln(659, "alloc.nim");
				NI offset = (NI)((NU64)(((NI) ((NI)(((NI) (p)) & ((NI) 4095))))) - (NU64)((NI)(((NI)sizeof(Tsmallchunk27640)) - ((NI) 8))));
				nimln(660, "alloc.nim");
				LOC14 = 0;
				LOC15 = 0;
				LOC15 = ((NU64)(offset) < (NU64)((*c).acc));
				if (!(LOC15)) goto LA16;
				LOC15 = ((NI)((NU64)(offset) % (NU64)((*c).size)) == ((NI) 0));
				LA16: ;
				LOC14 = LOC15;
				if (!(LOC14)) goto LA17;
				nimln(661, "alloc.nim");
				LOC14 = ((NU64)(((NI) 1)) < (NU64)((*((Tfreecell27630*) (p))).zerofield));
				LA17: ;
				result = LOC14;
}			}
			goto LA10;
			LA12: ;
			{
				NIM_BOOL LOC19;
				nimln(663, "alloc.nim");
				Tbigchunk27642* c = ((Tbigchunk27642*) (c_43816));
				nimln(664, "alloc.nim");
				LOC19 = 0;
				LOC19 = (p == ((void*) ((&(*c).data))));
				if (!(LOC19)) goto LA20;
				LOC19 = ((NU64)(((NI) 1)) < (NU64)((*((Tfreecell27630*) (p))).zerofield));
				LA20: ;
				result = LOC19;
			}
			LA10: ;
}		}
		LA8: ;
}	}
	LA3: ;
	popFrame();
	return result;
}

N_NIMCALL(void, freecycliccell_64827)(Tgcheap48416& gch, Tcell46547* c) {
	nimfr("freeCyclicCell", "gc.nim")
	nimln(584, "gc.nim");
	preparedealloc_50608(c);
	nimln(589, "gc.nim");
	rawdealloc_42224(gch.region, ((void*) (c)));
	popFrame();
}

N_NIMCALL(void, collectwhite_66204)(Tcell46547* s) {
	nimfr("collectWhite", "gc.nim")
	nimln(618, "gc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = isallocatedptr_35605((&gch_48444.region), ((void*) (s)));
		if (!(LOC3)) goto LA4;
		LOC3 = (((NI) ((NI)((*s).refcount & ((NI) 3)))) == ((NI) 2));
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(137, "gc.nim");
		(*s).refcount = (NI)((*s).refcount & ((NI) -4));
		nimln(620, "gc.nim");
		forallchildren_50417(s, ((NU8) 8));
		nimln(621, "gc.nim");
		freecycliccell_64827(gch_48444, s);
}	}
	LA5: ;
	popFrame();
}

N_NIMCALL(void, dooperation_50421)(void* p, NU8 op) {
	nimfr("doOperation", "gc.nim")
{	nimln(692, "gc.nim");
	{
		if (!(p == NIM_NIL)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	nimln(693, "gc.nim");
	Tcell46547* c = usrtocell_50047(p);
	nimln(697, "gc.nim");
	switch (op) {
	case ((NU8) 2):
	{
		nimln(705, "gc.nim");
		decref_52004(c);
	}
	break;
	case ((NU8) 3):
	{
		nimln(708, "gc.nim");
		add_46632(gch_48444.tempstack, c);
	}
	break;
	case ((NU8) 4):
	{
		nimln(711, "gc.nim");
		(*c).refcount = (NI)((NU64)((*c).refcount) - (NU64)(((NI) 8)));
	}
	break;
	case ((NU8) 5):
	{
		nimln(714, "gc.nim");
		(*c).refcount = (NI)((NU64)((*c).refcount) - (NU64)(((NI) 8)));
		nimln(715, "gc.nim");
		markgray_65605(c);
	}
	break;
	case ((NU8) 6):
	{
		nimln(716, "gc.nim");
		scan_66004(c);
	}
	break;
	case ((NU8) 7):
	{
		nimln(718, "gc.nim");
		(*c).refcount = (NI)((NU64)((*c).refcount) + (NU64)(((NI) 8)));
		nimln(719, "gc.nim");
		{
			if (!!((((NI) ((NI)((*c).refcount & ((NI) 3)))) == ((NI) 0)))) goto LA13;
{			nimln(720, "gc.nim");
			scanblack_65804(c);
}		}
		LA13: ;
	}
	break;
	case ((NU8) 8):
	{
		nimln(721, "gc.nim");
		collectwhite_66204(c);
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	case ((NU8) 1):
	{
	}
	break;
	}
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(NI, getdiscriminant_26458)(void* aa, TNimNode* n) {
	NI result;
	NI d;
	nimfr("getDiscriminant", "system.nim")
{	result = 0;
	d = 0;
	nimln(2656, "system.nim");
	NI a = ((NI) (aa));
	nimln(2657, "system.nim");
	switch ((*(*n).typ).size) {
	case ((NI) 1):
	{
		nimln(2658, "system.nim");
		d = ((NI)(NU)(NU8)((*((NI8*) ((NI)((NU64)(a) + (NU64)((*n).offset)))))));
	}
	break;
	case ((NI) 2):
	{
		nimln(2659, "system.nim");
		d = ((NI)(NU)(NU16)((*((NI16*) ((NI)((NU64)(a) + (NU64)((*n).offset)))))));
	}
	break;
	case ((NI) 4):
	{
		nimln(2660, "system.nim");
		d = ((NI) ((*((NI32*) ((NI)((NU64)(a) + (NU64)((*n).offset)))))));
	}
	break;
	default:
	{
	}
	break;
	}
	nimln(2662, "system.nim");
	result = d;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(TNimNode*, selectbranch_26810)(void* aa, TNimNode* n) {
	TNimNode* result;
	nimfr("selectBranch", "system.nim")
	result = 0;
	nimln(2665, "system.nim");
	NI discr = getdiscriminant_26458(aa, n);
	nimln(2666, "system.nim");
	{
		if (!((NU64)(discr) < (NU64)((*n).len))) goto LA3;
{		nimln(2667, "system.nim");
		result = (*n).sons[(discr)- 0];
		nimln(2668, "system.nim");
		{
			if (!(result == NIM_NIL)) goto LA7;
{			result = (*n).sons[((*n).len)- 0];
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(2671, "system.nim");
		result = (*n).sons[((*n).len)- 0];
	}
	LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(void, forallslotsaux_54610)(void* dest, TNimNode* n, NU8 op) {
	nimfr("forAllSlotsAux", "gc.nim")
	nimln(329, "gc.nim");
	NI d = ((NI) (dest));
	nimln(330, "gc.nim");
	switch ((*n).kind) {
	case ((NU8) 1):
	{
		nimln(331, "gc.nim");
		forallchildrenaux_50425(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), (*n).typ, op);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_54636;
			NI HEX3Atmp_54806;
			i_54636 = 0;
			HEX3Atmp_54806 = 0;
			nimln(333, "gc.nim");
			HEX3Atmp_54806 = (NI)((*n).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_54809 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_54809 <= HEX3Atmp_54806)) goto LA5;
					nimln(1600, "system.nim");
					i_54636 = res_54809;
					nimln(335, "gc.nim");
					{
						if (!((*(*n).sons[(i_54636)- 0]).kind == ((NU8) 1))) goto LA8;
{						nimln(336, "gc.nim");
						{
							if (!((289406976 &(IL64(1)<<(((*(*(*n).sons[(i_54636)- 0]).typ).kind)&IL64(63))))!=0)) goto LA12;
{							nimln(337, "gc.nim");
							dooperation_50421((*((void**) ((NI)((NU64)(d) + (NU64)((*(*n).sons[(i_54636)- 0]).offset))))), op);
}						}
						goto LA10;
						LA12: ;
						{
							nimln(339, "gc.nim");
							forallchildrenaux_50425(((void*) ((NI)((NU64)(d) + (NU64)((*(*n).sons[(i_54636)- 0]).offset)))), (*(*n).sons[(i_54636)- 0]).typ, op);
						}
						LA10: ;
}					}
					goto LA6;
					LA8: ;
					{
						nimln(342, "gc.nim");
						forallslotsaux_54610(dest, (*n).sons[(i_54636)- 0], op);
					}
					LA6: ;
					nimln(1619, "system.nim");
					res_54809 += ((NI) 1);
				} LA5: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		nimln(344, "gc.nim");
		TNimNode* m = selectbranch_26810(dest, n);
		nimln(345, "gc.nim");
		{
			if (!!((m == NIM_NIL))) goto LA19;
{			forallslotsaux_54610(dest, m, op);
}		}
		LA19: ;
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, forallchildrenaux_50425)(void* dest, TNimType* mt, NU8 op) {
	nimfr("forAllChildrenAux", "gc.nim")
{	nimln(349, "gc.nim");
	NI d = ((NI) (dest));
	nimln(350, "gc.nim");
	{
		if (!(dest == NIM_NIL)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	nimln(351, "gc.nim");
	{
		if (!!((((*mt).flags &(1<<((((NU8) 0))&7)))!=0))) goto LA7;
{		nimln(352, "gc.nim");
		switch ((*mt).kind) {
		case ((NU8) 22):
		case ((NU8) 28):
		case ((NU8) 24):
		{
			nimln(354, "gc.nim");
			dooperation_50421((*((void**) (d))), op);
		}
		break;
		case ((NU8) 17):
		case ((NU8) 18):
		{
			nimln(356, "gc.nim");
			forallslotsaux_54610(dest, (*mt).node, op);
		}
		break;
		case ((NU8) 16):
		case ((NU8) 4):
		case ((NU8) 27):
		{
			{
				NI i_54851;
				NI HEX3Atmp_54874;
				i_54851 = 0;
				HEX3Atmp_54874 = 0;
				nimln(358, "gc.nim");
				HEX3Atmp_54874 = (NI)((NI)((*mt).size / (*(*mt).base).size) - ((NI) 1));
				nimln(1598, "system.nim");
				NI res_54877 = ((NI) 0);
				{
					nimln(1599, "system.nim");
					while (1) {
						if (!(res_54877 <= HEX3Atmp_54874)) goto LA14;
						nimln(1600, "system.nim");
						i_54851 = res_54877;
						nimln(359, "gc.nim");
						forallchildrenaux_50425(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_54851) * (NU64)((*(*mt).base).size)))))), (*mt).base, op);
						nimln(1619, "system.nim");
						res_54877 += ((NI) 1);
					} LA14: ;
				}
			}
		}
		break;
		default:
		{
		}
		break;
		}
}	}
	LA7: ;
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, forallchildren_50417)(Tcell46547* cell, NU8 op) {
	nimfr("forAllChildren", "gc.nim")
	nimln(367, "gc.nim");
	TY3289 marker = (*(*cell).typ).marker;
	nimln(368, "gc.nim");
	{
		if (!!((marker == NIM_NIL))) goto LA3;
{		nimln(369, "gc.nim");
		marker(celltousr_50026(cell), ((NI) (op)));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(371, "gc.nim");
		switch ((*(*cell).typ).kind) {
		case ((NU8) 22):
		{
			nimln(373, "gc.nim");
			forallchildrenaux_50425(celltousr_50026(cell), (*(*cell).typ).base, op);
		}
		break;
		case ((NU8) 24):
		{
			void* LOC8;
			nimln(375, "gc.nim");
			LOC8 = 0;
			LOC8 = celltousr_50026(cell);
			NI d = ((NI) (LOC8));
			nimln(376, "gc.nim");
			TGenericSeq* s = ((TGenericSeq*) (d));
			nimln(377, "gc.nim");
			{
				if (!!((s == NIM_NIL))) goto LA11;
{				{
					NI i_55635;
					NI HEX3Atmp_55668;
					i_55635 = 0;
					HEX3Atmp_55668 = 0;
					nimln(378, "gc.nim");
					HEX3Atmp_55668 = (NI)((*s).len - ((NI) 1));
					nimln(1598, "system.nim");
					NI res_55671 = ((NI) 0);
					{
						nimln(1599, "system.nim");
						while (1) {
							if (!(res_55671 <= HEX3Atmp_55668)) goto LA15;
							nimln(1600, "system.nim");
							i_55635 = res_55671;
							nimln(379, "gc.nim");
							forallchildrenaux_50425(((void*) ((NI)((NU64)((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_55635) * (NU64)((*(*(*cell).typ).base).size))))) + (NU64)(((NI) 16))))), (*(*cell).typ).base, op);
							nimln(1619, "system.nim");
							res_55671 += ((NI) 1);
						} LA15: ;
					}
				}
}			}
			LA11: ;
		}
		break;
		default:
		{
		}
		break;
		}
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(NIM_BOOL, collectzct_68612)(Tgcheap48416& gch) {
	NIM_BOOL result;
	nimfr("collectZCT", "gc.nim")
	result = 0;
	nimln(958, "gc.nim");
	NI* L = (&gch.zct.len);
	{
		nimln(964, "gc.nim");
		while (1) {
			if (!(((NI) 0) < (*L))) goto LA2;
			nimln(965, "gc.nim");
			Tcell46547* c = gch.zct.d[(((NI) 0))- 0];
			nimln(970, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(971, "gc.nim");
			gch.zct.d[(((NI) 0))- 0] = gch.zct.d[((NI)((*L) - ((NI) 1)))- 0];
			nimln(972, "gc.nim");
			(*L) -= ((NI) 1);
			nimln(974, "gc.nim");
			{
				if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA5;
{				nimln(982, "gc.nim");
				{
					if (!canbecycleroot_50068(c)) goto LA9;
{					excl_47296(gch.cycleroots, c);
}				}
				LA9: ;
				nimln(988, "gc.nim");
				preparedealloc_50608(c);
				nimln(989, "gc.nim");
				forallchildren_50417(c, ((NU8) 2));
				nimln(992, "gc.nim");
				rawdealloc_42224(gch.region, ((void*) (c)));
}			}
			LA5: ;
		} LA2: ;
	}
	nimln(1006, "gc.nim");
	result = NIM_TRUE;
	popFrame();
	return result;
}

N_NIMCALL(void, markroots_66405)(Tgcheap48416& gch) {
	nimfr("markRoots", "gc.nim")
	nimln(624, "gc.nim");
	NI tabsize = ((NI) 0);
	{
		Tcell46547* s_66410;
		Tcellset46559 HEX3Atmp_66438;
		s_66410 = 0;
		memset((void*)(&HEX3Atmp_66438), 0, sizeof(HEX3Atmp_66438));
		nimln(625, "gc.nim");
		HEX3Atmp_66438 = gch.cycleroots;
		nimln(187, "cellsets.nim");
		Tpagedesc46555* r_66443 = HEX3Atmp_66438.head;
		{
			nimln(188, "cellsets.nim");
			while (1) {
				if (!!((r_66443 == NIM_NIL))) goto LA3;
				nimln(189, "cellsets.nim");
				NI i_66445 = ((NI) 0);
				{
					nimln(190, "cellsets.nim");
					while (1) {
						if (!(i_66445 <= ((NI) 7))) goto LA5;
						nimln(191, "cellsets.nim");
						NI w_66447 = (*r_66443).bits[(i_66445)- 0];
						nimln(193, "cellsets.nim");
						NI j_66449 = ((NI) 0);
						{
							nimln(194, "cellsets.nim");
							while (1) {
								if (!!((w_66447 == ((NI) 0)))) goto LA7;
								nimln(195, "cellsets.nim");
								{
									if (!!((((NI) ((NI)(w_66447 & ((NI) 1)))) == ((NI) 0)))) goto LA10;
{									nimln(196, "cellsets.nim");
									nimln(197, "cellsets.nim");
									s_66410 = ((Tcell46547*) ((NI)((NI)((NU64)((*r_66443).key) << (NU64)(((NI) 12))) | (NI)((NU64)((NI)((NU64)((NI)((NU64)(i_66445) << (NU64)(((NI) 6)))) + (NU64)(j_66449))) * (NU64)(((NI) 8))))));
									nimln(627, "gc.nim");
									tabsize += ((NI) 1);
									nimln(628, "gc.nim");
									{
										NIM_BOOL LOC14;
										LOC14 = 0;
										LOC14 = (((NI) ((NI)((*s_66410).refcount & ((NI) 3)))) == ((NI) 3));
										if (!(LOC14)) goto LA15;
										LOC14 = ((NU64)(((NI) 8)) <= (NU64)((*s_66410).refcount));
										LA15: ;
										if (!LOC14) goto LA16;
{										nimln(629, "gc.nim");
										markgray_65605(s_66410);
}									}
									goto LA12;
									LA16: ;
									{
										nimln(631, "gc.nim");
										excl_47296(gch.cycleroots, s_66410);
										nimln(633, "gc.nim");
										{
											if (!((*s_66410).refcount == ((NI) 0))) goto LA21;
{											nimln(634, "gc.nim");
											freecycliccell_64827(gch, s_66410);
}										}
										LA21: ;
									}
									LA12: ;
}								}
								LA10: ;
								nimln(198, "cellsets.nim");
								j_66449 += ((NI) 1);
								nimln(199, "cellsets.nim");
								w_66447 = (NI)((NU64)(w_66447) >> (NU64)(((NI) 1)));
							} LA7: ;
						}
						nimln(200, "cellsets.nim");
						i_66445 += ((NI) 1);
					} LA5: ;
				}
				nimln(201, "cellsets.nim");
				r_66443 = (*r_66443).next;
			} LA3: ;
		}
	}
	nimln(635, "gc.nim");
	gch.stat.cycletablesize = ((gch.stat.cycletablesize >= tabsize) ? gch.stat.cycletablesize : tabsize);
	popFrame();
}

N_NIMCALL(void, collectroots_68801)(Tgcheap48416& gch) {
	nimfr("collectRoots", "gc.nim")
	{
		Tcell46547* s_68805;
		Tcellset46559 HEX3Atmp_68807;
		s_68805 = 0;
		memset((void*)(&HEX3Atmp_68807), 0, sizeof(HEX3Atmp_68807));
		nimln(745, "gc.nim");
		HEX3Atmp_68807 = gch.cycleroots;
		nimln(187, "cellsets.nim");
		Tpagedesc46555* r_68812 = HEX3Atmp_68807.head;
		{
			nimln(188, "cellsets.nim");
			while (1) {
				if (!!((r_68812 == NIM_NIL))) goto LA3;
				nimln(189, "cellsets.nim");
				NI i_68814 = ((NI) 0);
				{
					nimln(190, "cellsets.nim");
					while (1) {
						if (!(i_68814 <= ((NI) 7))) goto LA5;
						nimln(191, "cellsets.nim");
						NI w_68816 = (*r_68812).bits[(i_68814)- 0];
						nimln(193, "cellsets.nim");
						NI j_68818 = ((NI) 0);
						{
							nimln(194, "cellsets.nim");
							while (1) {
								if (!!((w_68816 == ((NI) 0)))) goto LA7;
								nimln(195, "cellsets.nim");
								{
									if (!!((((NI) ((NI)(w_68816 & ((NI) 1)))) == ((NI) 0)))) goto LA10;
{									nimln(196, "cellsets.nim");
									nimln(197, "cellsets.nim");
									s_68805 = ((Tcell46547*) ((NI)((NI)((NU64)((*r_68812).key) << (NU64)(((NI) 12))) | (NI)((NU64)((NI)((NU64)((NI)((NU64)(i_68814) << (NU64)(((NI) 6)))) + (NU64)(j_68818))) * (NU64)(((NI) 8))))));
									nimln(746, "gc.nim");
									collectwhite_66204(s_68805);
}								}
								LA10: ;
								nimln(198, "cellsets.nim");
								j_68818 += ((NI) 1);
								nimln(199, "cellsets.nim");
								w_68816 = (NI)((NU64)(w_68816) >> (NU64)(((NI) 1)));
							} LA7: ;
						}
						nimln(200, "cellsets.nim");
						i_68814 += ((NI) 1);
					} LA5: ;
				}
				nimln(201, "cellsets.nim");
				r_68812 = (*r_68812).next;
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(void, deinit_46688)(Tcellset46559& s) {
	nimfr("deinit", "cellsets.nim")
	nimln(85, "cellsets.nim");
	Tpagedesc46555* it = s.head;
	{
		nimln(86, "cellsets.nim");
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			nimln(87, "cellsets.nim");
			Tpagedesc46555* n = (*it).next;
			nimln(88, "cellsets.nim");
			dealloc_6048(((void*) (it)));
			nimln(89, "cellsets.nim");
			it = n;
		} LA2: ;
	}
	nimln(90, "cellsets.nim");
	s.head = NIM_NIL;
	nimln(91, "cellsets.nim");
	dealloc_6048(((void*) (s.data)));
	nimln(92, "cellsets.nim");
	s.data = NIM_NIL;
	nimln(93, "cellsets.nim");
	s.counter = ((NI) 0);
	popFrame();
}

N_NIMCALL(void, init_46677)(Tcellset46559& s) {
	void* LOC1;
	nimfr("init", "cellsets.nim")
	nimln(79, "cellsets.nim");
	LOC1 = 0;
	LOC1 = alloc0_6017(((NI) 8192));
	s.data = ((Tpagedesc46555**) (LOC1));
	nimln(80, "cellsets.nim");
	s.max = ((NI) 1023);
	nimln(81, "cellsets.nim");
	s.counter = ((NI) 0);
	nimln(82, "cellsets.nim");
	s.head = NIM_NIL;
	popFrame();
}

N_NIMCALL(void, cellsetreset_54601)(Tcellset46559& s) {
	nimfr("cellsetReset", "gc.nim")
	nimln(325, "gc.nim");
	deinit_46688(s);
	nimln(326, "gc.nim");
	init_46677(s);
	popFrame();
}

N_NIMCALL(void, collectcycles_68844)(Tgcheap48416& gch) {
	nimfr("collectCycles", "gc.nim")
	{
		nimln(750, "gc.nim");
		while (1) {
			NIM_BOOL LOC3;
			if (!(((NI) 0) < gch.zct.len)) goto LA2;
			LOC3 = 0;
			LOC3 = collectzct_68612(gch);
		} LA2: ;
	}
	nimln(757, "gc.nim");
	markroots_66405(gch);
	{
		Tcell46547* s_69002;
		Tcellset46559 HEX3Atmp_69203;
		s_69002 = 0;
		memset((void*)(&HEX3Atmp_69203), 0, sizeof(HEX3Atmp_69203));
		nimln(759, "gc.nim");
		HEX3Atmp_69203 = gch.cycleroots;
		nimln(187, "cellsets.nim");
		Tpagedesc46555* r_69208 = HEX3Atmp_69203.head;
		{
			nimln(188, "cellsets.nim");
			while (1) {
				if (!!((r_69208 == NIM_NIL))) goto LA6;
				nimln(189, "cellsets.nim");
				NI i_69210 = ((NI) 0);
				{
					nimln(190, "cellsets.nim");
					while (1) {
						if (!(i_69210 <= ((NI) 7))) goto LA8;
						nimln(191, "cellsets.nim");
						NI w_69212 = (*r_69208).bits[(i_69210)- 0];
						nimln(193, "cellsets.nim");
						NI j_69214 = ((NI) 0);
						{
							nimln(194, "cellsets.nim");
							while (1) {
								if (!!((w_69212 == ((NI) 0)))) goto LA10;
								nimln(195, "cellsets.nim");
								{
									if (!!((((NI) ((NI)(w_69212 & ((NI) 1)))) == ((NI) 0)))) goto LA13;
{									nimln(196, "cellsets.nim");
									nimln(197, "cellsets.nim");
									s_69002 = ((Tcell46547*) ((NI)((NI)((NU64)((*r_69208).key) << (NU64)(((NI) 12))) | (NI)((NU64)((NI)((NU64)((NI)((NU64)(i_69210) << (NU64)(((NI) 6)))) + (NU64)(j_69214))) * (NU64)(((NI) 8))))));
									nimln(759, "gc.nim");
									scan_66004(s_69002);
}								}
								LA13: ;
								nimln(198, "cellsets.nim");
								j_69214 += ((NI) 1);
								nimln(199, "cellsets.nim");
								w_69212 = (NI)((NU64)(w_69212) >> (NU64)(((NI) 1)));
							} LA10: ;
						}
						nimln(200, "cellsets.nim");
						i_69210 += ((NI) 1);
					} LA8: ;
				}
				nimln(201, "cellsets.nim");
				r_69208 = (*r_69208).next;
			} LA6: ;
		}
	}
	nimln(760, "gc.nim");
	collectroots_68801(gch);
	nimln(762, "gc.nim");
	cellsetreset_54601(gch.cycleroots);
	popFrame();
}

N_NIMCALL(NI, gettotalmem_6699)(void) {
	NI result;
	nimfr("getTotalMem", "alloc.nim")
{	result = 0;
	nimln(801, "alloc.nim");
	result = gch_48444.region.currmem;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NI, getfreemem_6697)(void) {
	NI result;
	nimfr("getFreeMem", "alloc.nim")
	result = 0;
	nimln(798, "alloc.nim");
	result = gch_48444.region.freemem;
	popFrame();
	return result;
}

N_NIMCALL(NI, getoccupiedmem_6695)(void) {
	NI result;
	NI LOC1;
	NI LOC2;
	nimfr("getOccupiedMem", "alloc.nim")
{	result = 0;
	nimln(802, "alloc.nim");
	LOC1 = 0;
	LOC1 = gettotalmem_6699();
	LOC2 = 0;
	LOC2 = getfreemem_6697();
	result = (NI)(LOC1 - LOC2);
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, unmarkstackandregisters_73011)(Tgcheap48416& gch) {
	nimfr("unmarkStackAndRegisters", "gc.nim")
	nimln(1009, "gc.nim");
	Tcell46547** d = gch.decstack.d;
	{
		NI i_73026;
		NI HEX3Atmp_73202;
		i_73026 = 0;
		HEX3Atmp_73202 = 0;
		nimln(1010, "gc.nim");
		HEX3Atmp_73202 = (NI)(gch.decstack.len - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_73205 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_73205 <= HEX3Atmp_73202)) goto LA3;
				nimln(1600, "system.nim");
				i_73026 = res_73205;
				nimln(1012, "gc.nim");
				decref_52004(d[(i_73026)- 0]);
				nimln(1619, "system.nim");
				res_73205 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(1018, "gc.nim");
	gch.decstack.len = ((NI) 0);
	popFrame();
}

N_NIMCALL(void, collectctbody_73221)(Tgcheap48416& gch) {
	NI LOC1;
	nimfr("collectCTBody", "gc.nim")
	nimln(1025, "gc.nim");
	LOC1 = 0;
	LOC1 = stacksize_70611();
	gch.stat.maxstacksize = ((gch.stat.maxstacksize >= LOC1) ? gch.stat.maxstacksize : LOC1);
	nimln(1027, "gc.nim");
	prepareforinteriorpointerchecking_43882(gch.region);
	nimln(1028, "gc.nim");
	markstackandregisters_70840(gch);
	nimln(1029, "gc.nim");
	markthreadstacks_69806(gch);
	nimln(1030, "gc.nim");
	gch.stat.maxstackcells = ((gch.stat.maxstackcells >= gch.decstack.len) ? gch.stat.maxstackcells : gch.decstack.len);
	nimln(1031, "gc.nim");
	gch.stat.stackscans += ((NI) 1);
	nimln(1032, "gc.nim");
	{
		if (!collectzct_68612(gch)) goto LA4;
{		nimln(1034, "gc.nim");
		{
			NIM_BOOL LOC8;
			NI LOC9;
			NI LOC13;
			LOC8 = 0;
			LOC9 = 0;
			LOC9 = getoccupiedmem_46469((&gch.region));
			LOC8 = (gch.cyclethreshold <= LOC9);
			if (LOC8) goto LA10;
			LOC8 = NIM_FALSE;
			LA10: ;
			if (!LOC8) goto LA11;
{			nimln(1035, "gc.nim");
			collectcycles_68844(gch);
			nimln(1037, "gc.nim");
			gch.stat.cyclecollections += ((NI) 1);
			nimln(1038, "gc.nim");
			LOC13 = 0;
			LOC13 = getoccupiedmem_6695();
			gch.cyclethreshold = ((((NI) 4194304) >= (NI)(LOC13 * ((NI) 2))) ? ((NI) 4194304) : (NI)(LOC13 * ((NI) 2)));
			nimln(1040, "gc.nim");
			gch.stat.maxthreshold = ((gch.stat.maxthreshold >= gch.cyclethreshold) ? gch.stat.maxthreshold : gch.cyclethreshold);
}		}
		LA11: ;
}	}
	LA4: ;
	nimln(1041, "gc.nim");
	unmarkstackandregisters_73011(gch);
	popFrame();
}

N_NIMCALL(void, collectct_50410)(Tgcheap48416& gch) {
	NI LOC1;
	nimfr("collectCT", "gc.nim")
	nimln(1060, "gc.nim");
	LOC1 = 0;
	LOC1 = stacksize_70611();
	NI stackmarkcosts = (((NI)(LOC1 / ((NI) 128)) >= ((NI) 500)) ? (NI)(LOC1 / ((NI) 128)) : ((NI) 500));
	nimln(1061, "gc.nim");
	{
		NIM_BOOL LOC4;
		NIM_BOOL LOC5;
		NIM_BOOL LOC6;
		NIM_BOOL LOC8;
		NI LOC10;
		nimln(1062, "gc.nim");
		LOC4 = 0;
		LOC5 = 0;
		nimln(1061, "gc.nim");
		LOC6 = 0;
		LOC6 = (stackmarkcosts <= gch.zct.len);
		if (LOC6) goto LA7;
		LOC8 = 0;
		LOC8 = NIM_TRUE;
		if (!(LOC8)) goto LA9;
		nimln(1062, "gc.nim");
		LOC10 = 0;
		LOC10 = getoccupiedmem_46469((&gch.region));
		LOC8 = (gch.cyclethreshold <= LOC10);
		LA9: ;
		LOC6 = LOC8;
		LA7: ;
		LOC5 = LOC6;
		if (LOC5) goto LA11;
		LOC5 = NIM_FALSE;
		LA11: ;
		LOC4 = LOC5;
		if (!(LOC4)) goto LA12;
		nimln(1063, "gc.nim");
		LOC4 = (gch.recgclock == ((NI) 0));
		LA12: ;
		if (!LOC4) goto LA13;
{		nimln(1068, "gc.nim");
		collectctbody_73221(gch);
}	}
	LA13: ;
	popFrame();
}

static N_INLINE(void, addnewobjtozct_55687)(Tcell46547* res, Tgcheap48416& gch) {
	nimfr("addNewObjToZCT", "gc.nim")
{	nimln(394, "gc.nim");
	NI L = gch.zct.len;
	nimln(395, "gc.nim");
	Tcell46547** d = gch.zct.d;
	nimln(404, "gc.nim");
	{
		Tcell46547* c;
		if (!(((NI) 8) < L)) goto LA3;
{		c = 0;
		nimln(399, "gc.nim");
		nimln(406, "gc.nim");
		c = d[((NI)(L - ((NI) 1)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA7;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(406, "gc.nim");
			d[((NI)(L - ((NI) 1)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA7: ;
		nimln(399, "gc.nim");
		nimln(407, "gc.nim");
		c = d[((NI)(L - ((NI) 2)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA11;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(407, "gc.nim");
			d[((NI)(L - ((NI) 2)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA11: ;
		nimln(399, "gc.nim");
		nimln(408, "gc.nim");
		c = d[((NI)(L - ((NI) 3)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA15;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(408, "gc.nim");
			d[((NI)(L - ((NI) 3)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA15: ;
		nimln(399, "gc.nim");
		nimln(409, "gc.nim");
		c = d[((NI)(L - ((NI) 4)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA19;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(409, "gc.nim");
			d[((NI)(L - ((NI) 4)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA19: ;
		nimln(399, "gc.nim");
		nimln(410, "gc.nim");
		c = d[((NI)(L - ((NI) 5)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA23;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(410, "gc.nim");
			d[((NI)(L - ((NI) 5)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA23: ;
		nimln(399, "gc.nim");
		nimln(411, "gc.nim");
		c = d[((NI)(L - ((NI) 6)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA27;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(411, "gc.nim");
			d[((NI)(L - ((NI) 6)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA27: ;
		nimln(399, "gc.nim");
		nimln(412, "gc.nim");
		c = d[((NI)(L - ((NI) 7)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA31;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(412, "gc.nim");
			d[((NI)(L - ((NI) 7)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA31: ;
		nimln(399, "gc.nim");
		nimln(413, "gc.nim");
		c = d[((NI)(L - ((NI) 8)))- 0];
		nimln(400, "gc.nim");
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA35;
{			nimln(401, "gc.nim");
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			nimln(402, "gc.nim");
			nimln(413, "gc.nim");
			d[((NI)(L - ((NI) 8)))- 0] = res;
			nimln(403, "gc.nim");
			goto BeforeRet;
}		}
		LA35: ;
		nimln(414, "gc.nim");
		add_46632(gch.zct, res);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(416, "gc.nim");
		d[(L)- 0] = res;
		nimln(417, "gc.nim");
		gch.zct.len += ((NI) 1);
	}
	LA1: ;
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void*, rawnewobj_56204)(TNimType* typ, NI size, Tgcheap48416& gch) {
	void* result;
	void* LOC1;
	nimfr("rawNewObj", "gc.nim")
	result = 0;
	nimln(439, "gc.nim");
	collectct_50410(gch);
	nimln(440, "gc.nim");
	LOC1 = 0;
	LOC1 = rawalloc_35901(gch.region, (NI)(size + ((NI)sizeof(Tcell46547))));
	Tcell46547* res = ((Tcell46547*) (LOC1));
	nimln(443, "gc.nim");
	(*res).typ = typ;
	nimln(449, "gc.nim");
	(*res).refcount = ((NI) 4);
	nimln(452, "gc.nim");
	addnewobjtozct_55687(res, gch);
	nimln(459, "gc.nim");
	result = celltousr_50026(res);
	popFrame();
	return result;
}

N_NIMCALL(void*, newObjNoInit)(TNimType* typ, NI size) {
	void* result;
	nimfr("newObjNoInit", "gc.nim")
	result = 0;
	nimln(465, "gc.nim");
	result = rawnewobj_56204(typ, size, gch_48444);
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, rawNewStringNoInit)(NI space) {
	NimStringDesc* result;
	void* LOC5;
	result = 0;
	NI s = space;
	{
		if (!(s < ((NI) 7))) goto LA3;
{		s = ((NI) 7);
}	}
	LA3: ;
	LOC5 = 0;
	LOC5 = newObjNoInit((&strdesc_10404), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s) + ((NI) 1)));
	result = ((NimStringDesc*) (LOC5));
	(*result).reserved = s;
	return result;
}

N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src) {
	NimStringDesc* result;
	result = 0;
	{
		if (!!((src == NIM_NIL))) goto LA3;
{		{
			if (!!(((NI)((*src).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)))) goto LA7;
{			result = src;
}		}
		goto LA5;
		LA7: ;
		{
			result = rawNewStringNoInit((*src).len);
			(*result).len = (*src).len;
			memcpy(((NCSTRING) ((*result).data)), ((NCSTRING) ((*src).data)), (NI)((*src).len + ((NI) 1)));
		}
		LA5: ;
}	}
	LA3: ;
	return result;
}

static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src) {
	memcpy(((NCSTRING) ((&(*dest).data[((*dest).len)- 0]))), ((NCSTRING) ((*src).data)), (NI)((*src).len + ((NI) 1)));
	(*dest).len += (*src).len;
}

static N_INLINE(NI, resize_76201)(NI old) {
	NI result;
	result = 0;
	{
		if (!(old <= ((NI) 0))) goto LA3;
{		result = ((NI) 4);
}	}
	goto LA1;
	LA3: ;
	{
		if (!(old < ((NI) 65536))) goto LA6;
{		result = (NI)(old * ((NI) 2));
}	}
	goto LA1;
	LA6: ;
	{
		result = (NI)((NI)(old * ((NI) 3)) / ((NI) 2));
	}
	LA1: ;
	return result;
}

N_NIMCALL(void*, growobj_62006)(void* old, NI newsize, Tgcheap48416& gch) {
	void* result;
	void* LOC1;
	nimfr("growObj", "gc.nim")
	result = 0;
	nimln(520, "gc.nim");
	collectct_50410(gch);
	nimln(521, "gc.nim");
	Tcell46547* ol = usrtocell_50047(old);
	nimln(526, "gc.nim");
	LOC1 = 0;
	LOC1 = rawalloc_35901(gch.region, (NI)(newsize + ((NI)sizeof(Tcell46547))));
	Tcell46547* res = ((Tcell46547*) (LOC1));
	nimln(527, "gc.nim");
	NI elemsize = ((NI) 1);
	nimln(528, "gc.nim");
	{
		if (!!(((*(*ol).typ).kind == ((NU8) 28)))) goto LA4;
{		elemsize = (*(*(*ol).typ).base).size;
}	}
	LA4: ;
	nimln(530, "gc.nim");
	NI oldsize = (NI)((NI)((*((TGenericSeq*) (old))).len * elemsize) + ((NI) 16));
	nimln(531, "gc.nim");
	memcpy(((void*) (res)), ((void*) (ol)), ((NI) ((NI)(oldsize + ((NI)sizeof(Tcell46547))))));
	nimln(532, "gc.nim");
	nimln(533, "gc.nim");
	zeroMem(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (res))) + (NU64)(oldsize))) + (NU64)(((NI)sizeof(Tcell46547)))))), ((NI) ((NI)(newsize - oldsize))));
	nimln(545, "gc.nim");
	{
		if (!((NU64)((NI)((NU64)((*ol).refcount) >> (NU64)(((NI) 3)))) <= (NU64)(((NI) 1)))) goto LA8;
{		nimln(547, "gc.nim");
		{
			if (!!(((NI)((*ol).refcount & ((NI) 4)) == ((NI) 0)))) goto LA12;
{			nimln(548, "gc.nim");
			NI j = (NI)(gch.zct.len - ((NI) 1));
			nimln(549, "gc.nim");
			Tcell46547** d = gch.zct.d;
			{
				nimln(550, "gc.nim");
				while (1) {
					if (!(((NI) 0) <= j)) goto LA15;
					nimln(551, "gc.nim");
					{
						if (!(d[(j)- 0] == ol)) goto LA18;
{						nimln(552, "gc.nim");
						d[(j)- 0] = res;
						nimln(553, "gc.nim");
						goto LA14;
}					}
					LA18: ;
					nimln(554, "gc.nim");
					j -= ((NI) 1);
				} LA15: ;
			} LA14: ;
}		}
		LA12: ;
		nimln(555, "gc.nim");
		{
			if (!canbecycleroot_50068(ol)) goto LA22;
{			excl_47296(gch.cycleroots, ol);
}		}
		LA22: ;
		nimln(556, "gc.nim");
		rawdealloc_42224(gch.region, ((void*) (ol)));
}	}
	goto LA6;
	LA8: ;
	{
		nimln(563, "gc.nim");
		(*res).refcount = ((NI) 8);
		nimln(564, "gc.nim");
		decref_52004(ol);
	}
	LA6: ;
	nimln(572, "gc.nim");
	result = celltousr_50026(res);
	popFrame();
	return result;
}

N_NIMCALL(void*, growobj_64818)(void* old, NI newsize) {
	void* result;
	nimfr("growObj", "gc.nim")
	result = 0;
	nimln(577, "gc.nim");
	result = growobj_62006(old, newsize, gch_48444);
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen) {
	NimStringDesc* result;
	result = 0;
	{
		if (!((NI)((*dest).len + addlen) <= (NI)((*dest).reserved & ((NI) IL64(9223372036854775807))))) goto LA3;
{		result = dest;
}	}
	goto LA1;
	LA3: ;
	{
		NI LOC6;
		void* LOC7;
		LOC6 = 0;
		LOC6 = resize_76201((NI)((*dest).reserved & ((NI) IL64(9223372036854775807))));
		NI sp = ((LOC6 >= (NI)((*dest).len + addlen)) ? LOC6 : (NI)((*dest).len + addlen));
		LOC7 = 0;
		LOC7 = growobj_64818(((void*) (dest)), (NI)((NI)(((NI)sizeof(TGenericSeq)) + sp) + ((NI) 1)));
		result = ((NimStringDesc*) (LOC7));
		(*result).reserved = sp;
	}
	LA1: ;
	return result;
}

N_NIMCALL(void*, newObj)(TNimType* typ, NI size) {
	void* result;
	nimfr("newObj", "gc.nim")
	result = 0;
	nimln(469, "gc.nim");
	result = rawnewobj_56204(typ, size, gch_48444);
	nimln(470, "gc.nim");
	zeroMem(result, ((NI) (size)));
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, rawNewString)(NI space) {
	NimStringDesc* result;
	void* LOC5;
	result = 0;
	NI s = space;
	{
		if (!(s < ((NI) 7))) goto LA3;
{		s = ((NI) 7);
}	}
	LA3: ;
	LOC5 = 0;
	LOC5 = newObj((&strdesc_10404), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s) + ((NI) 1)));
	result = ((NimStringDesc*) (LOC5));
	(*result).reserved = s;
	return result;
}

N_NIMCALL(NimStringDesc*, mnewString)(NI len) {
	NimStringDesc* result;
	result = 0;
	result = rawNewString(len);
	(*result).len = len;
	return result;
}

N_NIMCALL(NimStringDesc*, setLengthStr)(NimStringDesc* s, NI newlen) {
	NimStringDesc* result;
	result = 0;
	NI n = ((newlen >= ((NI) 0)) ? newlen : ((NI) 0));
	{
		if (!(n <= (NI)((*s).reserved & ((NI) IL64(9223372036854775807))))) goto LA3;
{		result = s;
}	}
	goto LA1;
	LA3: ;
	{
		result = resizeString(s, n);
	}
	LA1: ;
	(*result).len = n;
	(*result).data[(n)- 0] = 0;
	return result;
}

N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x) {
	NimStringDesc* result;
	result = 0;
	result = mnewString(((NI) 32));
	NI i = ((NI) 0);
	NI y = x;
	{
		while (1) {
			NI d = (NI)(y / ((NI) 10));
			result->data[i] = ((NIM_CHAR) (((NI) ((NI)(((NI)(y - (NI)(d * ((NI) 10))) > 0? ((NI)(y - (NI)(d * ((NI) 10)))) : -((NI)(y - (NI)(d * ((NI) 10))))) + ((NI) 48))))));
			i += ((NI) 1);
			y = d;
			{
				if (!(y == ((NI) 0))) goto LA5;
{				goto LA1;
}			}
			LA5: ;
		}
	} LA1: ;
	{
		if (!(x < ((NI) 0))) goto LA9;
{		result->data[i] = 45;
		i += ((NI) 1);
}	}
	LA9: ;
	result = setLengthStr(result, ((NI) (i)));
	{
		NI j_77353;
		NI HEX3Atmp_77367;
		j_77353 = 0;
		HEX3Atmp_77367 = 0;
		HEX3Atmp_77367 = (NI)((NI)(i / ((NI) 2)) - ((NI) 1));
		NI res_77370 = ((NI) 0);
		{
			while (1) {
				NIM_CHAR LOC14;
				if (!(res_77370 <= HEX3Atmp_77367)) goto LA13;
				j_77353 = res_77370;
				LOC14 = 0;
				LOC14 = result->data[j_77353];
				result->data[j_77353] = result->data[(NI)((NI)(i - j_77353) - ((NI) 1))];
				result->data[(NI)((NI)(i - j_77353) - ((NI) 1))] = LOC14;
				res_77370 += ((NI) 1);
			} LA13: ;
		}
	}
	return result;
}

N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s, NIM_CHAR c) {
	NimStringDesc* result;
	result = 0;
	result = s;
	{
		void* LOC5;
		if (!((NI)((*result).reserved & ((NI) IL64(9223372036854775807))) <= (*result).len)) goto LA3;
{		(*result).reserved = resize_76201((NI)((*result).reserved & ((NI) IL64(9223372036854775807))));
		LOC5 = 0;
		LOC5 = growobj_64818(((void*) (result)), (NI)((NI)(((NI)sizeof(TGenericSeq)) + (*result).reserved) + ((NI) 1)));
		result = ((NimStringDesc*) (LOC5));
}	}
	LA3: ;
	(*result).data[((*result).len)- 0] = c;
	(*result).data[((NI)((*result).len + ((NI) 1)))- 0] = 0;
	(*result).len += ((NI) 1);
	return result;
}

N_NIMCALL(void, auxwritestacktrace_17405)(TFrame* f, NimStringDesc*& s) {
	TFrame* it = f;
	NI i = ((NI) 0);
	NI total = ((NI) 0);
	{
		while (1) {
			NIM_BOOL LOC3;
			LOC3 = 0;
			LOC3 = !((it == NIM_NIL));
			if (!(LOC3)) goto LA4;
			LOC3 = (i <= ((NI) 95));
			LA4: ;
			if (!LOC3) goto LA2;
			tempframes_17404[(i)- 0] = it;
			i += ((NI) 1);
			total += ((NI) 1);
			it = (*it).prev;
		} LA2: ;
	}
	TFrame* b = it;
	{
		while (1) {
			if (!!((it == NIM_NIL))) goto LA6;
			total += ((NI) 1);
			it = (*it).prev;
		} LA6: ;
	}
	NI skipped = ((NI) 0);
	{
		if (!(((NI) 128) < total)) goto LA9;
{		skipped = (NI)((NI)((NI)(total - i) - ((NI) 32)) + ((NI) 1));
		{
			NI j_17681;
			j_17681 = 0;
			NI res_17862 = ((NI) 1);
			{
				while (1) {
					if (!(res_17862 <= skipped)) goto LA13;
					j_17681 = res_17862;
					{
						if (!!((b == NIM_NIL))) goto LA16;
{						b = (*b).prev;
}					}
					LA16: ;
					res_17862 += ((NI) 1);
				} LA13: ;
			}
		}
		tempframes_17404[(i)- 0] = NIM_NIL;
		i += ((NI) 1);
}	}
	LA9: ;
	{
		while (1) {
			NIM_BOOL LOC20;
			LOC20 = 0;
			LOC20 = !((b == NIM_NIL));
			if (!(LOC20)) goto LA21;
			LOC20 = (i <= ((NI) 127));
			LA21: ;
			if (!LOC20) goto LA19;
			tempframes_17404[(i)- 0] = b;
			i += ((NI) 1);
			b = (*b).prev;
		} LA19: ;
	}
	{
		NI j_17824;
		NI HEX3Atmp_17877;
		j_17824 = 0;
		HEX3Atmp_17877 = 0;
		HEX3Atmp_17877 = (NI)(i - ((NI) 1));
		NI res_17880 = HEX3Atmp_17877;
		{
			while (1) {
				if (!(((NI) 0) <= res_17880)) goto LA24;
				j_17824 = res_17880;
				{
					NimStringDesc* LOC29;
					if (!(tempframes_17404[(j_17824)- 0] == NIM_NIL)) goto LA27;
{					s = resizeString(s, 1);
appendString(s, ((NimStringDesc*) &TMP6));
					LOC29 = 0;
					LOC29 = nimIntToStr(skipped);
					s = resizeString(s, LOC29->len + 0);
appendString(s, LOC29);
					s = resizeString(s, 19);
appendString(s, ((NimStringDesc*) &TMP7));
}				}
				goto LA25;
				LA27: ;
				{
					NI oldlen = (s ? s->len : 0);
					add_9054(s, (*tempframes_17404[(j_17824)- 0]).filename);
					{
						NimStringDesc* LOC35;
						if (!(((NI) 0) < (*tempframes_17404[(j_17824)- 0]).line)) goto LA33;
{						s = addChar(s, 40);
						LOC35 = 0;
						LOC35 = nimIntToStr((*tempframes_17404[(j_17824)- 0]).line);
						s = resizeString(s, LOC35->len + 0);
appendString(s, LOC35);
						s = addChar(s, 41);
}					}
					LA33: ;
					{
						NI k_17854;
						NI HEX3Atmp_17870;
						k_17854 = 0;
						HEX3Atmp_17870 = 0;
						HEX3Atmp_17870 = ((((NI) 1) >= (NI)(((NI) 25) - (NI)((s ? s->len : 0) - oldlen))) ? ((NI) 1) : (NI)(((NI) 25) - (NI)((s ? s->len : 0) - oldlen)));
						NI res_17873 = ((NI) 1);
						{
							while (1) {
								if (!(res_17873 <= HEX3Atmp_17870)) goto LA38;
								k_17854 = res_17873;
								s = addChar(s, 32);
								res_17873 += ((NI) 1);
							} LA38: ;
						}
					}
					add_9054(s, (*tempframes_17404[(j_17824)- 0]).procname);
				}
				LA25: ;
				s = resizeString(s, 2);
appendString(s, ((NimStringDesc*) &TMP8));
				res_17880 -= ((NI) 1);
			} LA24: ;
		}
	}
}

N_NIMCALL(void, rawwritestacktrace_18001)(NimStringDesc*& s) {
	{
		if (!(frameptr_17042 == NIM_NIL)) goto LA3;
{		s = resizeString(s, 30);
appendString(s, ((NimStringDesc*) &TMP4));
}	}
	goto LA1;
	LA3: ;
	{
		s = resizeString(s, 35);
appendString(s, ((NimStringDesc*) &TMP5));
		auxwritestacktrace_17405(frameptr_17042, s);
	}
	LA1: ;
}

N_NIMCALL(NimStringDesc*, toNimStr)(NCSTRING str, NI len) {
	NimStringDesc* result;
	result = 0;
	result = rawNewStringNoInit(len);
	(*result).len = len;
	memcpy(((NCSTRING) ((*result).data)), str, (NI)(len + ((NI) 1)));
	return result;
}

N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str) {
	NimStringDesc* result;
	result = 0;
	result = toNimStr(str, strlen(str));
	return result;
}

N_NIMCALL(void, write_13469)(FILE* f, NCSTRING c) {
	fputs(c, f);
}

N_NIMCALL(void, writetostderr_17001)(NCSTRING msg) {
	write_13469(stderr, msg);
}

N_NIMCALL(void, showerrormessage_17009)(NCSTRING data) {
	{
		NimStringDesc* LOC5;
		if (!!((errormessagewriter_16804 == NIM_NIL))) goto LA3;
{		LOC5 = 0;
		LOC5 = cstrToNimstr(data);
		errormessagewriter_16804(LOC5);
}	}
	goto LA1;
	LA3: ;
	{
		writetostderr_17001(data);
	}
	LA1: ;
}

N_NIMCALL(void, writestacktrace_16407)(void) {
	NimStringDesc* s;
	s = copyString(((NimStringDesc*) &TMP2));
	rawwritestacktrace_18001(s);
	showerrormessage_17009(s->data);
}

static N_INLINE(void, quitordebug_18416)(void) {
	exit(((NI) 1));
}

N_NOINLINE(void, stackoverflow_19801)(void) {
	writestacktrace_16407();
	showerrormessage_17009("Stack overflow\015\012");
	quitordebug_18416();
}

static N_INLINE(void, nimFrame)(TFrame* s) {
	NI LOC1;
	LOC1 = 0;
	{
		if (!(frameptr_17042 == NIM_NIL)) goto LA4;
{		LOC1 = ((NI) 0);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) ((NI16)((*frameptr_17042).calldepth + ((NI16) 1))));
	}
	LA2: ;
	(*s).calldepth = ((NI16) (LOC1));
	(*s).prev = frameptr_17042;
	frameptr_17042 = s;
	{
		if (!((*s).calldepth == ((NI16) 2000))) goto LA9;
{		stackoverflow_19801();
}	}
	LA9: ;
}

static N_INLINE(void, listremove_32202)(Tbigchunk27642*& head, Tbigchunk27642* c) {
	nimfr("listRemove", "alloc.nim")
	nimln(419, "alloc.nim");
	{
		if (!(c == head)) goto LA3;
{		nimln(420, "alloc.nim");
		head = (*c).next;
		nimln(422, "alloc.nim");
		{
			if (!!((head == NIM_NIL))) goto LA7;
{			(*head).prev = NIM_NIL;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(425, "alloc.nim");
		(*(*c).prev).next = (*c).next;
		nimln(426, "alloc.nim");
		{
			if (!!(((*c).next == NIM_NIL))) goto LA12;
{			(*(*c).next).prev = (*c).prev;
}		}
		LA12: ;
	}
	LA1: ;
	nimln(427, "alloc.nim");
	(*c).next = NIM_NIL;
	nimln(428, "alloc.nim");
	(*c).prev = NIM_NIL;
	popFrame();
}

N_NIMCALL(NIM_BOOL, contains_32211)(Tbigchunk27642* list, Tbigchunk27642* x) {
	NIM_BOOL result;
	nimfr("contains", "alloc.nim")
{	result = 0;
	nimln(394, "alloc.nim");
	Tbigchunk27642* it = list;
	{
		nimln(395, "alloc.nim");
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			nimln(396, "alloc.nim");
			{
				if (!(it == x)) goto LA5;
{				result = NIM_TRUE;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(397, "alloc.nim");
			it = (*it).next;
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, contains_36813)(Tsmallchunk27640* list, Tsmallchunk27640* x) {
	NIM_BOOL result;
	nimfr("contains", "alloc.nim")
{	result = 0;
	nimln(394, "alloc.nim");
	Tsmallchunk27640* it = list;
	{
		nimln(395, "alloc.nim");
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			nimln(396, "alloc.nim");
			{
				if (!(it == x)) goto LA5;
{				result = NIM_TRUE;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(397, "alloc.nim");
			it = (*it).next;
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, init_46656)(Tcellseq46563& s, NI cap) {
	void* LOC1;
	nimfr("init", "cellsets.nim")
	nimln(63, "cellsets.nim");
	s.len = ((NI) 0);
	nimln(64, "cellsets.nim");
	s.cap = cap;
	nimln(65, "cellsets.nim");
	LOC1 = 0;
	LOC1 = alloc0_6017(((NI) ((NI)(cap * ((NI) 8)))));
	s.d = ((Tcell46547**) (LOC1));
	popFrame();
}

N_NIMCALL(void, initgc_9801)(void) {
	nimfr("initGC", "gc.nim")
	nimln(280, "gc.nim");
	gch_48444.cyclethreshold = ((NI) 4194304);
	nimln(281, "gc.nim");
	gch_48444.stat.stackscans = ((NI) 0);
	nimln(282, "gc.nim");
	gch_48444.stat.cyclecollections = ((NI) 0);
	nimln(283, "gc.nim");
	gch_48444.stat.maxthreshold = ((NI) 0);
	nimln(284, "gc.nim");
	gch_48444.stat.maxstacksize = ((NI) 0);
	nimln(285, "gc.nim");
	gch_48444.stat.maxstackcells = ((NI) 0);
	nimln(286, "gc.nim");
	gch_48444.stat.cycletablesize = ((NI) 0);
	nimln(288, "gc.nim");
	init_46656(gch_48444.zct, ((NI) 1024));
	nimln(289, "gc.nim");
	init_46656(gch_48444.tempstack, ((NI) 1024));
	nimln(290, "gc.nim");
	init_46677(gch_48444.cycleroots);
	nimln(291, "gc.nim");
	init_46656(gch_48444.decstack, ((NI) 1024));
	popFrame();
}

static N_INLINE(void, initallocator_10001)(void) {
	bottom_28439 = (&bottomdata_28438);
	(*bottom_28439).link[(((NI) 0))- 0] = bottom_28439;
	(*bottom_28439).link[(((NI) 1))- 0] = bottom_28439;
}

N_NOINLINE(void, setStackBottom)(void* thestackbottom) {
	{
		if (!(gch_48444.stackbottom == NIM_NIL)) goto LA3;
{		gch_48444.stackbottom = thestackbottom;
}	}
	goto LA1;
	LA3: ;
	{
		NI a = ((NI) (thestackbottom));
		NI b = ((NI) (gch_48444.stackbottom));
		gch_48444.stackbottom = ((void*) (((a >= b) ? a : b)));
	}
	LA1: ;
}

static N_INLINE(void, initStackBottom)(void) {
	void* volatile locals;
	locals = 0;
	locals = ((void*) ((&locals)));
	setStackBottom(locals);
}

static N_INLINE(void, initStackBottomWith)(void* locals) {
	setStackBottom(locals);
}

N_NIMCALL(NI, cmp_4717)(NimStringDesc* x, NimStringDesc* y) {
	NI result;
	int LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = strcmp(x->data, y->data);
	result = ((NI) (LOC1));
	return result;
}
N_NIMCALL(void, TMP9)(void* p, NI op) {
	NI16* a;
	NI LOC1;
	a = (NI16*)p;
	LOC1 = 0;
	for (LOC1 = 0; LOC1 < 1000001; LOC1++) {
	}
}

N_NIMCALL(NI16*, newwidecstring_80821)(NCSTRING source, NI L) {
	NI16* result;
	nimfr("newWideCString", "widestrs.nim")
	result = 0;
	nimln(84, "widestrs.nim");
	result = (NI16*) newObj((&NTI79804), ((NI) ((NI)((NI)(L * ((NI) 4)) + ((NI) 2)))));
	nimln(86, "widestrs.nim");
	NI d = ((NI) 0);
	{
		NI ch_80837;
		NI result_80930;
		ch_80837 = 0;
		nimln(77, "widestrs.nim");
		NI i_80928 = ((NI) 0);
		result_80930 = 0;
		{
			nimln(79, "widestrs.nim");
			while (1) {
				if (!!(((NU8)(source[i_80928]) == (NU8)(0)))) goto LA3;
				nimln(48, "widestrs.nim");
				{
					if (!((NU64)(((NI) (((NU8)(source[i_80928]))))) <= (NU64)(((NI) 127)))) goto LA6;
{					nimln(49, "widestrs.nim");
					result_80930 = ((NI) (((NU8)(source[i_80928]))));
					nimln(50, "widestrs.nim");
					i_80928 += ((NI) 1);
}				}
				goto LA4;
				LA6: ;
				{
					nimln(51, "widestrs.nim");
					if (!((NI)((NU64)(((NI) (((NU8)(source[i_80928]))))) >> (NU64)(((NI) 5))) == ((NI) 6))) goto LA9;
{					nimln(53, "widestrs.nim");
					result_80930 = (NI)((NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source[i_80928])))) & ((NI) 31))))) << (NU64)(((NI) 6))) | ((NI) ((NI)(((NI) (((NU8)(source[(NI)(i_80928 + ((NI) 1))])))) & ((NI) 63)))));
					nimln(54, "widestrs.nim");
					i_80928 += ((NI) 2);
}				}
				goto LA4;
				LA9: ;
				{
					nimln(55, "widestrs.nim");
					if (!((NI)((NU64)(((NI) (((NU8)(source[i_80928]))))) >> (NU64)(((NI) 4))) == ((NI) 14))) goto LA12;
{					nimln(58, "widestrs.nim");
					nimln(59, "widestrs.nim");
					nimln(58, "widestrs.nim");
					nimln(59, "widestrs.nim");
					nimln(60, "widestrs.nim");
					result_80930 = (NI)((NI)((NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source[i_80928])))) & ((NI) 15))))) << (NU64)(((NI) 12))) | (NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source[(NI)(i_80928 + ((NI) 1))])))) & ((NI) 63))))) << (NU64)(((NI) 6)))) | ((NI) ((NI)(((NI) (((NU8)(source[(NI)(i_80928 + ((NI) 2))])))) & ((NI) 63)))));
					nimln(61, "widestrs.nim");
					i_80928 += ((NI) 3);
}				}
				goto LA4;
				LA12: ;
				{
					nimln(62, "widestrs.nim");
					if (!((NI)((NU64)(((NI) (((NU8)(source[i_80928]))))) >> (NU64)(((NI) 3))) == ((NI) 30))) goto LA15;
{					nimln(66, "widestrs.nim");
					nimln(68, "widestrs.nim");
					nimln(67, "widestrs.nim");
					nimln(66, "widestrs.nim");
					nimln(67, "widestrs.nim");
					nimln(68, "widestrs.nim");
					nimln(69, "widestrs.nim");
					result_80930 = (NI)((NI)((NI)((NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source[i_80928])))) & ((NI) 7))))) << (NU64)(((NI) 18))) | (NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source[(NI)(i_80928 + ((NI) 1))])))) & ((NI) 63))))) << (NU64)(((NI) 12)))) | (NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source[(NI)(i_80928 + ((NI) 2))])))) & ((NI) 63))))) << (NU64)(((NI) 6)))) | ((NI) ((NI)(((NI) (((NU8)(source[(NI)(i_80928 + ((NI) 3))])))) & ((NI) 63)))));
					nimln(70, "widestrs.nim");
					i_80928 += ((NI) 4);
}				}
				goto LA4;
				LA15: ;
				{
					nimln(72, "widestrs.nim");
					result_80930 = ((NI) 65533);
					nimln(73, "widestrs.nim");
					i_80928 += ((NI) 1);
				}
				LA4: ;
				nimln(78, "widestrs.nim");
				ch_80837 = result_80930;
				nimln(88, "widestrs.nim");
				{
					if (!((NU64)(ch_80837) <= (NU64)(((NI) 65535)))) goto LA20;
{					nimln(89, "widestrs.nim");
					{
						NIM_BOOL LOC24;
						LOC24 = 0;
						LOC24 = ((NU64)(((NI) 55296)) <= (NU64)(ch_80837));
						if (!(LOC24)) goto LA25;
						LOC24 = ((NU64)(ch_80837) <= (NU64)(((NI) 57343)));
						LA25: ;
						if (!LOC24) goto LA26;
{						nimln(90, "widestrs.nim");
						result[(d)- 0] = ((NI16) -3);
}					}
					goto LA22;
					LA26: ;
					{
						nimln(92, "widestrs.nim");
						result[(d)- 0] = ((NI16)(NU16)(NU)(ch_80837));
					}
					LA22: ;
}				}
				goto LA18;
				LA20: ;
				{
					nimln(93, "widestrs.nim");
					if (!((NU64)(((NI) 1114111)) < (NU64)(ch_80837))) goto LA30;
{					nimln(94, "widestrs.nim");
					result[(d)- 0] = ((NI16) -3);
}				}
				goto LA18;
				LA30: ;
				{
					nimln(96, "widestrs.nim");
					NI ch = (NI)((NU64)(ch_80837) - (NU64)(((NI) 65536)));
					nimln(97, "widestrs.nim");
					result[(d)- 0] = ((NI16)(NU16)(NU)((NI)((NU64)((NI)((NU64)(ch) >> (NU64)(((NI) 10)))) + (NU64)(((NI) 55296)))));
					nimln(98, "widestrs.nim");
					d += ((NI) 1);
					nimln(99, "widestrs.nim");
					result[(d)- 0] = ((NI16)(NU16)(NU)(((NI) ((NI)((NU64)(((NI) ((NI)(ch & ((NI) 1023))))) + (NU64)(((NI) 56320)))))));
				}
				LA18: ;
				nimln(100, "widestrs.nim");
				d += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(101, "widestrs.nim");
	result[(d)- 0] = ((NI16) 0);
	popFrame();
	return result;
}

N_NIMCALL(NI16*, newwidecstring_80944)(NCSTRING s) {
	NI16* result;
	nimfr("newWideCString", "widestrs.nim")
{	result = 0;
	nimln(104, "widestrs.nim");
	{
		if (!s == 0) goto LA3;
{		result = NIM_NIL;
		goto BeforeRet;
}	}
	LA3: ;
	nimln(110, "widestrs.nim");
	NI L = strlen(s);
	nimln(111, "widestrs.nim");
	result = newwidecstring_80821(s, L);
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void*, fopen_81410)(NCSTRING filename, NCSTRING mode) {
	void* result;
	nimfr("fopen", "sysio.nim")
	result = 0;
	nimln(236, "sysio.nim");
	NI16* f = newwidecstring_80944(filename);
	nimln(237, "sysio.nim");
	NI16* m = newwidecstring_80944(mode);
	nimln(238, "sysio.nim");
	result = _wfopen((const wchar_t*)f, (const wchar_t*)m);
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, open_13203)(FILE*& f, NimStringDesc* filename, NU8 mode, NI bufsize) {
	NIM_BOOL result;
	nimfr("open", "sysio.nim")
	result = 0;
	nimln(260, "sysio.nim");
	void* p = fopen_81410(filename->data, Formatopen_81431[(mode)- 0]->data);
	nimln(261, "sysio.nim");
	{
		if (!!((p == NIM_NIL))) goto LA3;
{		nimln(262, "sysio.nim");
		result = NIM_TRUE;
		nimln(263, "sysio.nim");
		f = ((FILE*) (p));
		nimln(264, "sysio.nim");
		{
			NIM_BOOL LOC7;
			int LOC11;
			LOC7 = 0;
			LOC7 = (((NI) 0) < bufsize);
			if (!(LOC7)) goto LA8;
			LOC7 = (bufsize <= ((NI) 2147483647));
			LA8: ;
			if (!LOC7) goto LA9;
{			nimln(265, "sysio.nim");
			LOC11 = 0;
			LOC11 = setvbuf(f, NIM_NIL, _IOFBF, ((int) (bufsize)));
}		}
		goto LA5;
		LA9: ;
		{
			int LOC15;
			nimln(266, "sysio.nim");
			if (!(bufsize == ((NI) 0))) goto LA13;
{			nimln(267, "sysio.nim");
			LOC15 = 0;
			LOC15 = setvbuf(f, NIM_NIL, _IONBF, ((int) 0));
}		}
		goto LA5;
		LA13: ;
		LA5: ;
}	}
	LA3: ;
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, open_13211)(FILE*& f, int filehandle, NU8 mode) {
	NIM_BOOL result;
	nimfr("open", "sysio.nim")
	result = 0;
	nimln(277, "sysio.nim");
	f = fdopen(filehandle, Formatopen_81431[(mode)- 0]->data);
	nimln(278, "sysio.nim");
	result = !((f == NIM_NIL));
	popFrame();
	return result;
}

N_NIMCALL(void, nimGCvisit)(void* d, NI op) {
	nimfr("nimGCvisit", "gc.nim")
	nimln(736, "gc.nim");
	dooperation_50421(d, ((NU8) (op)));
	popFrame();
}
N_NIMCALL(void, TMP16)(void* p, NI op) {
	Exception* a;
	a = (Exception*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}
N_NIMCALL(void, TMP17)(void* p, NI op) {
	Ioerror3431* a;
	a = (Ioerror3431*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, asgnRefNoCycle)(void** dest, void* src) {
	nimfr("asgnRefNoCycle", "gc.nim")
	nimln(251, "gc.nim");
	{
		if (!!((src == NIM_NIL))) goto LA3;
{		nimln(252, "gc.nim");
		Tcell46547* c = usrtocell_50047(src);
		nimln(169, "gc.nim");
		(*c).refcount += ((NI) 8);
}	}
	LA3: ;
	nimln(254, "gc.nim");
	{
		if (!!(((*dest) == NIM_NIL))) goto LA7;
{		nimln(255, "gc.nim");
		Tcell46547* c = usrtocell_50047((*dest));
		nimln(256, "gc.nim");
		{
			nimln(167, "gc.nim");
			(*c).refcount -= ((NI) 8);
			nimln(168, "gc.nim");
			if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA11;
{			nimln(257, "gc.nim");
			rtladdzct_51604(c);
}		}
		LA11: ;
}	}
	LA7: ;
	nimln(258, "gc.nim");
	(*dest) = src;
	popFrame();
}

N_NIMCALL(void*, newObjRC1)(TNimType* typ, NI size) {
	void* result;
	void* LOC1;
	nimfr("newObjRC1", "gc.nim")
	result = 0;
	nimln(486, "gc.nim");
	collectct_50410(gch_48444);
	nimln(489, "gc.nim");
	LOC1 = 0;
	LOC1 = rawalloc_35901(gch_48444.region, (NI)(size + ((NI)sizeof(Tcell46547))));
	Tcell46547* res = ((Tcell46547*) (LOC1));
	nimln(493, "gc.nim");
	(*res).typ = typ;
	nimln(498, "gc.nim");
	(*res).refcount = ((NI) 8);
	nimln(506, "gc.nim");
	result = celltousr_50026(res);
	nimln(507, "gc.nim");
	zeroMem(result, ((NI) (size)));
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src) {
	NimStringDesc* result;
	result = 0;
	{
		void* LOC9;
		if (!!((src == NIM_NIL))) goto LA3;
{		NI s = (*src).len;
		{
			if (!(s < ((NI) 7))) goto LA7;
{			s = ((NI) 7);
}		}
		LA7: ;
		LOC9 = 0;
		LOC9 = newObjRC1((&strdesc_10404), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s) + ((NI) 1)));
		result = ((NimStringDesc*) (LOC9));
		(*result).reserved = s;
		(*result).len = (*src).len;
		memcpy(((NCSTRING) ((*result).data)), ((NCSTRING) ((*src).data)), (NI)((*src).len + ((NI) 1)));
}	}
	LA3: ;
	return result;
}

static N_INLINE(void, nimGCunrefNoCycle)(void* p) {
	nimfr("nimGCunrefNoCycle", "gc.nim")
	nimln(233, "gc.nim");
	Tcell46547* c = usrtocell_50047(p);
	nimln(235, "gc.nim");
	{
		nimln(167, "gc.nim");
		(*c).refcount -= ((NI) 8);
		nimln(168, "gc.nim");
		if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		nimln(236, "gc.nim");
		rtladdzct_51604(c);
}	}
	LA3: ;
	popFrame();
}

N_NOINLINE(NIM_BOOL, isobjslowpath_23017)(TNimType* obj, TNimType* subclass, TNimType** cache) {
	NIM_BOOL result;
{	result = 0;
	TNimType* x = (*obj).base;
	{
		while (1) {
			if (!!((x == subclass))) goto LA2;
			{
				if (!(x == NIM_NIL)) goto LA5;
{				cache[(((NI) 0))- 0] = obj;
				result = NIM_FALSE;
				goto BeforeRet;
}			}
			LA5: ;
			x = (*x).base;
		} LA2: ;
	}
	cache[(((NI) 1))- 0] = obj;
	result = NIM_TRUE;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(NIM_BOOL, isObjWithCache)(TNimType* obj, TNimType* subclass, TNimType** cache) {
	NIM_BOOL result;
{	result = 0;
	{
		if (!(obj == subclass)) goto LA3;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!((*obj).base == subclass)) goto LA7;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA7: ;
	{
		if (!(cache[(((NI) 0))- 0] == obj)) goto LA11;
{		result = NIM_FALSE;
		goto BeforeRet;
}	}
	LA11: ;
	{
		if (!(cache[(((NI) 1))- 0] == obj)) goto LA15;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA15: ;
	result = isobjslowpath_23017(obj, subclass, cache);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(void, incref_52422)(Tcell46547* c) {
	nimfr("incRef", "gc.nim")
	nimln(216, "gc.nim");
	(*c).refcount = (NI)((NU64)((*c).refcount) + (NU64)(((NI) 8)));
	nimln(219, "gc.nim");
	{
		if (!canbecycleroot_50068(c)) goto LA3;
{		nimln(220, "gc.nim");
		rtladdcycleroot_50823(c);
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, asgnRef)(void** dest, void* src) {
	nimfr("asgnRef", "gc.nim")
	nimln(244, "gc.nim");
	{
		if (!!((src == NIM_NIL))) goto LA3;
{		incref_52422(usrtocell_50047(src));
}	}
	LA3: ;
	nimln(245, "gc.nim");
	{
		if (!!(((*dest) == NIM_NIL))) goto LA7;
{		decref_52004(usrtocell_50047((*dest)));
}	}
	LA7: ;
	nimln(246, "gc.nim");
	(*dest) = src;
	popFrame();
}

static N_INLINE(void, pushCurrentException)(Exception* e) {
	asgnRef((void**) (&(*e).parent), currexception_17045);
	asgnRef((void**) (&currexception_17045), e);
}

N_NIMCALL(void, raiseexceptionaux_18604)(Exception* e) {
{	{
		if (!!((localraisehook_9030 == NIM_NIL))) goto LA3;
{		{
			NIM_BOOL LOC7;
			LOC7 = 0;
			LOC7 = localraisehook_9030(e);
			if (!!(LOC7)) goto LA8;
{			goto BeforeRet;
}		}
		LA8: ;
}	}
	LA3: ;
	{
		if (!!((globalraisehook_9025 == NIM_NIL))) goto LA12;
{		{
			NIM_BOOL LOC16;
			LOC16 = 0;
			LOC16 = globalraisehook_9025(e);
			if (!!(LOC16)) goto LA17;
{			goto BeforeRet;
}		}
		LA17: ;
}	}
	LA12: ;
	{
		if (!(isObjWithCache((*e).m_type, (&NTI3453), Nim_OfCheck_CACHE1))) goto LA21;
{		showerrormessage_17009((*e).name);
		quitordebug_18416();
}	}
	goto LA19;
	LA21: ;
	{
		pushCurrentException(e);
		throw NimException(e, e->name);
	}
	LA19: ;
	}BeforeRet: ;
}

N_NIMCALL(void, raiseException)(Exception* e, NCSTRING ename) {
	NimStringDesc* LOC1;
	(*e).name = ename;
	LOC1 = 0;
	LOC1 = (*e).trace; (*e).trace = copyStringRC1(((NimStringDesc*) &TMP2));
	if (LOC1) nimGCunrefNoCycle(LOC1);
	rawwritestacktrace_18001((*e).trace);
	raiseexceptionaux_18604(e);
}

N_NIMCALL(FILE*, open_13217)(NimStringDesc* filename, NU8 mode, NI bufsize) {
	FILE* result;
	result = 0;
	{
		NIM_BOOL LOC3;
		Ioerror3431* e_13226;
		NimStringDesc* LOC6;
		LOC3 = 0;
		LOC3 = open_13203(result, filename, mode, bufsize);
		if (!!(LOC3)) goto LA4;
{		e_13226 = 0;
		e_13226 = (Ioerror3431*) newObj((&NTI13401), sizeof(Ioerror3431));
		(*e_13226).m_type = (&NTI3431);
		LOC6 = 0;
		LOC6 = rawNewString(filename->len + 13);
appendString(LOC6, ((NimStringDesc*) &TMP18));
appendString(LOC6, filename);
		asgnRefNoCycle((void**) (&(*e_13226).message), LOC6);
		raiseException((Exception*)e_13226, "IOError");
}	}
	LA4: ;
	return result;
}

N_NIMCALL(FILE*, freopen_81420)(NCSTRING filename, NCSTRING mode, FILE* stream) {
	FILE* result;
	nimfr("freopen", "sysio.nim")
	result = 0;
	nimln(241, "sysio.nim");
	NI16* f = newwidecstring_80944(filename);
	nimln(242, "sysio.nim");
	NI16* m = newwidecstring_80944(mode);
	nimln(243, "sysio.nim");
	result = _wfreopen((const wchar_t*)f, (const wchar_t*)m, stream);
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, reopen_13414)(FILE* f, NimStringDesc* filename, NU8 mode) {
	NIM_BOOL result;
	FILE* LOC1;
	nimfr("reopen", "sysio.nim")
	result = 0;
	nimln(270, "sysio.nim");
	LOC1 = 0;
	LOC1 = freopen_81420(filename->data, Formatopen_81431[(mode)- 0]->data, f);
	void* p = ((void*) (LOC1));
	nimln(271, "sysio.nim");
	result = !((p == NIM_NIL));
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, endoffile_13422)(FILE* f) {
	NIM_BOOL result;
	nimfr("endOfFile", "sysio.nim")
{	result = 0;
	nimln(207, "sysio.nim");
	int c = fgetc(f);
	nimln(208, "sysio.nim");
	ungetc(c, f);
	nimln(209, "sysio.nim");
	result = (c < ((NI32) 0));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NI, rawfilesize_79312)(FILE* file) {
	NI result;
	NI LOC1;
	NI LOC2;
	nimfr("rawFileSize", "sysio.nim")
	result = 0;
	nimln(166, "sysio.nim");
	NI oldpos = ftell(file);
	nimln(167, "sysio.nim");
	LOC1 = 0;
	LOC1 = fseek(file, ((long) 0), ((NI) 2));
	nimln(168, "sysio.nim");
	result = ftell(file);
	nimln(169, "sysio.nim");
	LOC2 = 0;
	LOC2 = fseek(file, ((long) (oldpos)), ((NI) 0));
	popFrame();
	return result;
}

N_NIMCALL(NI, readbuffer_13515)(FILE* f, void* buffer, NI len) {
	NI result;
	nimfr("readBuffer", "sysio.nim")
	result = 0;
	nimln(284, "sysio.nim");
	result = fread(buffer, ((NI) 1), ((NI) (len)), f);
	popFrame();
	return result;
}

N_NOINLINE(void, raiseeio_78405)(NimStringDesc* msg) {
	Ioerror3431* e_78410;
	NimStringDesc* LOC1;
	nimfr("raiseEIO", "sysio.nim")
	e_78410 = 0;
	nimln(2278, "system.nim");
	e_78410 = (Ioerror3431*) newObj((&NTI13401), sizeof(Ioerror3431));
	(*e_78410).m_type = (&NTI3431);
	nimln(2279, "system.nim");
	LOC1 = 0;
	LOC1 = (*e_78410).message; (*e_78410).message = copyStringRC1(msg);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2280, "system.nim");
	raiseException((Exception*)e_78410, "IOError");
	popFrame();
}

N_NIMCALL(NimStringDesc*, readallfile_79320)(FILE* file, NI len) {
	NimStringDesc* result;
	nimfr("readAllFile", "sysio.nim")
	result = 0;
	nimln(174, "sysio.nim");
	result = mnewString(((NI) (len)));
	nimln(175, "sysio.nim");
	{
		NI LOC3;
		LOC3 = 0;
		LOC3 = readbuffer_13515(file, ((void*) ((&result->data[((NI) 0)]))), ((NI) (len)));
		if (!!((LOC3 == len))) goto LA4;
{		nimln(176, "sysio.nim");
		raiseeio_78405(((NimStringDesc*) &TMP19));
}	}
	LA4: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, readallbuffer_79295)(FILE* file) {
	NimStringDesc* result;
	NimStringDesc* buffer;
	nimfr("readAllBuffer", "sysio.nim")
	result = 0;
	nimln(153, "sysio.nim");
	result = copyString(((NimStringDesc*) &TMP2));
	nimln(154, "sysio.nim");
	buffer = mnewString(((NI) 4000));
	{
		nimln(155, "sysio.nim");
		while (1) {
			nimln(156, "sysio.nim");
			NI bytesread = readbuffer_13515(file, ((void*) ((&buffer->data[((NI) 0)]))), ((NI) 4000));
			nimln(157, "sysio.nim");
			{
				if (!(bytesread == ((NI) 4000))) goto LA5;
{				nimln(158, "sysio.nim");
				result = resizeString(result, buffer->len + 0);
appendString(result, buffer);
}			}
			goto LA3;
			LA5: ;
			{
				nimln(160, "sysio.nim");
				buffer = setLengthStr(buffer, ((NI) (bytesread)));
				nimln(161, "sysio.nim");
				result = resizeString(result, buffer->len + 0);
appendString(result, buffer);
				nimln(162, "sysio.nim");
				goto LA1;
			}
			LA3: ;
		}
	} LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, readall_13431)(FILE* file) {
	NimStringDesc* result;
	NI LOC1;
	nimfr("readAll", "sysio.nim")
	result = 0;
	nimln(185, "sysio.nim");
	LOC1 = 0;
	{
		if (!!((file == stdin))) goto LA4;
{		LOC1 = rawfilesize_79312(file);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) -1);
	}
	LA2: ;
	NI len = LOC1;
	nimln(186, "sysio.nim");
	{
		if (!(((NI) 0) < len)) goto LA9;
{		nimln(187, "sysio.nim");
		result = readallfile_79320(file, len);
}	}
	goto LA7;
	LA9: ;
	{
		nimln(189, "sysio.nim");
		result = readallbuffer_79295(file);
	}
	LA7: ;
	popFrame();
	return result;
}

static N_INLINE(void, setFrame)(TFrame* s) {
	frameptr_17042 = s;
}

N_NIMCALL(NimStringDesc*, readfile_13434)(NimStringDesc* filename) {
	NimStringDesc* result;
	nimfr("readFile", "sysio.nim")
	result = 0;
	nimln(192, "sysio.nim");
	FILE* f = open_13217(filename, ((NU8) 0), ((NI) -1));
	nimln(193, "sysio.nim");
	try {
		nimln(194, "sysio.nim");
		result = readall_13431(f);
	} catch (NimException& TMP20) {
	setFrame((TFrame*)&FR);
	{
		nimln(196, "sysio.nim");
		fclose(f);
		throw;
	}
	}
	{
		fclose(f);
	}
	popFrame();
	return result;
}

N_NIMCALL(NI, writebuffer_13537)(FILE* f, void* buffer, NI len) {
	NI result;
	result = 0;
	result = fwrite(buffer, ((NI) 1), ((NI) (len)), f);
	return result;
}

N_NIMCALL(void, write_13457)(FILE* f, NimStringDesc* s) {
	{
		NI LOC3;
		LOC3 = 0;
		LOC3 = writebuffer_13537(f, ((void*) (s->data)), ((NI) ((s ? s->len : 0))));
		if (!!((LOC3 == (s ? s->len : 0)))) goto LA4;
{		raiseeio_78405(((NimStringDesc*) &TMP22));
}	}
	LA4: ;
}

N_NIMCALL(void, writefile_13437)(NimStringDesc* filename, NimStringDesc* content) {
	nimfr("writeFile", "sysio.nim")
	nimln(199, "sysio.nim");
	FILE* f = open_13217(filename, ((NU8) 1), ((NI) -1));
	nimln(200, "sysio.nim");
	try {
		nimln(201, "sysio.nim");
		write_13457(f, content);
	} catch (NimException& TMP21) {
	setFrame((TFrame*)&FR);
	{
		nimln(203, "sysio.nim");
		fclose(f);
		throw;
	}
	}
	{
		fclose(f);
	}
	popFrame();
}

N_NIMCALL(void, write_13441)(FILE* f, NF32 r) {
	nimfr("write", "sysio.nim")
	nimln(143, "sysio.nim");
	fprintf(f, "%g", r);
	popFrame();
}

N_NIMCALL(void, write_13445)(FILE* f, NI i) {
	nimfr("write", "sysio.nim")
	nimln(130, "sysio.nim");
	fprintf(f, "%lld", i);
	popFrame();
}

N_NIMCALL(void, write_13449)(FILE* f, NI64 i) {
	nimfr("write", "sysio.nim")
	nimln(136, "sysio.nim");
	fprintf(f, "%lld", i);
	popFrame();
}

N_NIMCALL(void, write_13453)(FILE* f, NF r) {
	nimfr("write", "sysio.nim")
	nimln(144, "sysio.nim");
	fprintf(f, "%g", r);
	popFrame();
}

N_NIMCALL(void, write_13461)(FILE* f, NIM_BOOL b) {
	nimfr("write", "sysio.nim")
	nimln(141, "sysio.nim");
	{
		if (!b) goto LA3;
{		write_13457(f, ((NimStringDesc*) &TMP23));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(142, "sysio.nim");
		write_13457(f, ((NimStringDesc*) &TMP24));
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, write_13465)(FILE* f, NIM_CHAR c) {
	nimfr("write", "sysio.nim")
	nimln(146, "sysio.nim");
	putc(c, f);
	popFrame();
}

N_NIMCALL(void, write_13473)(FILE* f, NimStringDesc** a, NI aLen0) {
	nimfr("write", "sysio.nim")
	{
		NimStringDesc* x_79276;
		x_79276 = 0;
		nimln(1689, "system.nim");
		NI i_79282 = ((NI) 0);
		{
			nimln(1690, "system.nim");
			while (1) {
				if (!(i_79282 < aLen0)) goto LA3;
				nimln(1691, "system.nim");
				x_79276 = a[i_79282];
				nimln(148, "sysio.nim");
				write_13457(f, x_79276);
				nimln(1692, "system.nim");
				i_79282 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(NIM_BOOL, readline_13481)(FILE* f, NimStringDesc*& line) {
	NIM_BOOL result;
	nimfr("readLine", "sysio.nim")
{	result = 0;
	nimln(110, "sysio.nim");
	line = setLengthStr(line, ((NI) 0));
	{
		nimln(111, "sysio.nim");
		while (1) {
			nimln(112, "sysio.nim");
			int c = fgetc(f);
			nimln(113, "sysio.nim");
			{
				if (!(c < ((NI32) 0))) goto LA5;
{				nimln(114, "sysio.nim");
				{
					if (!(((NI) 0) < (line ? line->len : 0))) goto LA9;
{					goto LA1;
}				}
				goto LA7;
				LA9: ;
				{
					nimln(115, "sysio.nim");
					result = NIM_FALSE;
					goto BeforeRet;
				}
				LA7: ;
}			}
			LA5: ;
			nimln(116, "sysio.nim");
			{
				if (!(c == ((NI32) 10))) goto LA14;
{				goto LA1;
}			}
			LA14: ;
			nimln(117, "sysio.nim");
			{
				if (!(c == ((NI32) 13))) goto LA18;
{				nimln(118, "sysio.nim");
				c = fgetc(f);
				nimln(119, "sysio.nim");
				{
					if (!!((c == ((NI32) 10)))) goto LA22;
{					ungetc(c, f);
}				}
				LA22: ;
				nimln(120, "sysio.nim");
				goto LA1;
}			}
			LA18: ;
			nimln(121, "sysio.nim");
			line = addChar(line, ((NIM_CHAR) (((NI) (((NI) (c)))))));
		}
	} LA1: ;
	nimln(122, "sysio.nim");
	result = NIM_TRUE;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, readline_13478)(FILE* f) {
	NimStringDesc* result;
	nimfr("readLine", "sysio.nim")
	result = 0;
	nimln(125, "sysio.nim");
	result = rawNewString(((NI) 80));
	nimln(126, "sysio.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = readline_13481(f, result);
		if (!!(LOC3)) goto LA4;
{		raiseeio_78405(((NimStringDesc*) &TMP25));
}	}
	LA4: ;
	popFrame();
	return result;
}

N_NIMCALL(NI64, getfilepos_13546)(FILE* f) {
	NI64 result;
	NI LOC1;
	nimfr("getFilePos", "sysio.nim")
	result = 0;
	nimln(312, "sysio.nim");
	LOC1 = 0;
	LOC1 = ftell(f);
	result = ((NI64) (LOC1));
	nimln(313, "sysio.nim");
	{
		if (!(result < IL64(0))) goto LA4;
{		raiseeio_78405(((NimStringDesc*) &TMP26));
}	}
	LA4: ;
	popFrame();
	return result;
}

N_NIMCALL(void, setfilepos_13542)(FILE* f, NI64 pos) {
	nimfr("setFilePos", "sysio.nim")
	nimln(308, "sysio.nim");
	{
		NI LOC3;
		LOC3 = 0;
		LOC3 = fseek(f, ((long) (pos)), ((NI) 0));
		if (!!((LOC3 == ((NI) 0)))) goto LA4;
{		nimln(309, "sysio.nim");
		raiseeio_78405(((NimStringDesc*) &TMP27));
}	}
	LA4: ;
	popFrame();
}

N_NIMCALL(NI64, getfilesize_13493)(FILE* f) {
	NI64 result;
	NI LOC1;
	nimfr("getFileSize", "sysio.nim")
	result = 0;
	nimln(316, "sysio.nim");
	NI64 oldpos = getfilepos_13546(f);
	nimln(317, "sysio.nim");
	LOC1 = 0;
	LOC1 = fseek(f, ((long) 0), ((NI) 2));
	nimln(318, "sysio.nim");
	result = getfilepos_13546(f);
	nimln(319, "sysio.nim");
	setfilepos_13542(f, oldpos);
	popFrame();
	return result;
}

N_NIMCALL(NI, readchars_13507)(FILE* f, NIM_CHAR* a, NI aLen0, NI start, NI len) {
	NI result;
	nimfr("readChars", "sysio.nim")
	result = 0;
	nimln(290, "sysio.nim");
	result = readbuffer_13515(f, ((void*) ((&a[start]))), len);
	popFrame();
	return result;
}

N_NIMCALL(NI, writechars_13530)(FILE* f, NIM_CHAR* a, NI aLen0, NI start, NI len) {
	NI result;
	result = 0;
	NI8* x = ((NI8*) (a));
	result = writebuffer_13537(f, ((void*) ((&x[(start)- 0]))), len);
	return result;
}
N_NIMCALL(void, TMP28)(void* p, NI op) {
	TY13606* a;
	NI LOC1;
	a = (TY13606*)p;
	LOC1 = 0;
	for (LOC1 = 0; LOC1 < a->len; LOC1++) {
	nimGCvisit((void*)a->data[LOC1], op);
	}
}
N_NIMCALL(void, TMP29)(void* p, NI op) {
	Overflowerror3443* a;
	a = (Overflowerror3443*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raiseOverflow)(void) {
	Overflowerror3443* e_23167;
	NimStringDesc* LOC1;
	e_23167 = 0;
	e_23167 = (Overflowerror3443*) newObj((&NTI23201), sizeof(Overflowerror3443));
	(*e_23167).m_type = (&NTI3443);
	LOC1 = 0;
	LOC1 = (*e_23167).message; (*e_23167).message = copyStringRC1(((NimStringDesc*) &TMP30));
	if (LOC1) nimGCunrefNoCycle(LOC1);
	raiseException((Exception*)e_23167, "OverflowError");
}

static N_INLINE(NI, addInt)(NI a, NI b) {
	NI result;
{	result = 0;
	result = (NI)((NU64)(a) + (NU64)(b));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (((NI) 0) <= (NI)(result ^ a));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result ^ b));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI, mulInt)(NI a, NI b) {
	NI result;
	NF resasfloat;
	NF floatprod;
{	result = 0;
	resasfloat = 0;
	floatprod = 0;
	result = (NI)((NU64)(a) * (NU64)(b));
	floatprod = ((NF)(((double) (a))) * (NF)(((double) (b))));
	resasfloat = ((double) (result));
	{
		if (!(resasfloat == floatprod)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(((NF)(3.2000000000000000e+001) * (NF)((((NF)(resasfloat) - (NF)(floatprod)) > 0? (((NF)(resasfloat) - (NF)(floatprod))) : -(((NF)(resasfloat) - (NF)(floatprod)))))) <= (floatprod > 0? (floatprod) : -(floatprod)))) goto LA7;
{		goto BeforeRet;
}	}
	LA7: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void*, newSeq)(TNimType* typ, NI len) {
	void* result;
	nimfr("newSeq", "gc.nim")
	result = 0;
	nimln(475, "gc.nim");
	NI size = addInt(mulInt(len, (*(*typ).base).size), ((NI) 16));
	nimln(476, "gc.nim");
	result = newObj(typ, size);
	nimln(477, "gc.nim");
	(*((TGenericSeq*) (result))).len = len;
	nimln(478, "gc.nim");
	(*((TGenericSeq*) (result))).reserved = len;
	popFrame();
	return result;
}

N_NIMCALL(TY13606*, cstringarraytoseq_13602)(NCSTRING* a, NI len) {
	TY13606* result;
	result = 0;
	result = (TY13606*) newSeq((&NTI13606), len);
	{
		NI i_13823;
		NI HEX3Atmp_13825;
		i_13823 = 0;
		HEX3Atmp_13825 = 0;
		HEX3Atmp_13825 = (NI)(((NI) (len)) - ((NI) 1));
		NI res_13828 = ((NI) 0);
		{
			while (1) {
				if (!(res_13828 <= ((NI) (HEX3Atmp_13825)))) goto LA3;
				i_13823 = ((NI) (res_13828));
				asgnRefNoCycle((void**) (&result->data[i_13823]), cstrToNimstr(a[(i_13823)- 0]));
				res_13828 += ((NI) 1);
			} LA3: ;
		}
	}
	return result;
}

N_NIMCALL(TY13606*, cstringarraytoseq_13843)(NCSTRING* a) {
	TY13606* result;
	result = 0;
	NI L = ((NI) 0);
	{
		while (1) {
			if (!!((a[(L)- 0] == NIM_NIL))) goto LA2;
			L += ((NI) 1);
		} LA2: ;
	}
	result = cstringarraytoseq_13602(a, ((NI) (L)));
	return result;
}

N_NIMCALL(NCSTRING*, alloccstringarray_14001)(NimStringDesc** a, NI aLen0) {
	NCSTRING* result;
	void* LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = alloc0_6017(((NI) ((NI)((NI)(aLen0 + ((NI) 1)) * ((NI) 8)))));
	result = ((NCSTRING*) (LOC1));
	NimStringDesc** x = ((NimStringDesc**) (a));
	{
		NI i_14224;
		NI HEX3Atmp_14231;
		i_14224 = 0;
		HEX3Atmp_14231 = 0;
		HEX3Atmp_14231 = (aLen0-1);
		NI res_14234 = ((NI) 0);
		{
			while (1) {
				void* LOC5;
				if (!(res_14234 <= HEX3Atmp_14231)) goto LA4;
				i_14224 = res_14234;
				LOC5 = 0;
				LOC5 = alloc0_6017(((NI) ((NI)((x[(i_14224)- 0] ? x[(i_14224)- 0]->len : 0) + ((NI) 1)))));
				result[(i_14224)- 0] = ((NCSTRING) (LOC5));
				memcpy(((void*) (result[(i_14224)- 0])), ((void*) ((&x[(i_14224)- 0]->data[((NI) 0)]))), ((NI) ((x[(i_14224)- 0] ? x[(i_14224)- 0]->len : 0))));
				res_14234 += ((NI) 1);
			} LA4: ;
		}
	}
	return result;
}

N_NIMCALL(void, dealloccstringarray_14250)(NCSTRING* a) {
	NI i = ((NI) 0);
	{
		while (1) {
			if (!!((a[(i)- 0] == NIM_NIL))) goto LA2;
			dealloc_6048(((void*) (a[(i)- 0])));
			i += ((NI) 1);
		} LA2: ;
	}
	dealloc_6048(((void*) (a)));
}

static N_INLINE(NI, atomicinc_14401)(NI& memloc, NI x) {
	NI result;
	result = 0;
	memloc += x;
	result = memloc;
	return result;
}

static N_INLINE(NI, atomicdec_14406)(NI& memloc, NI x) {
	NI result;
	result = 0;
	memloc -= x;
	result = memloc;
	return result;
}

static N_INLINE(NI, addandfetch_14601)(NI* p, NI val) {
	NI result;
	result = 0;
	(*p) += val;
	result = (*p);
	return result;
}

static N_INLINE(void, cpurelax_15401)(void) {
	asm volatile("pause" ::: "memory");
}

N_NIMCALL(void, setcontrolchook_16401)(TY16405 hook) {
	signal(SIGINT, ((Tsignalhandler21211) (hook)));
}

N_NIMCALL(NimStringDesc*, getstacktrace_16601)(void) {
	NimStringDesc* result;
	result = 0;
	result = copyString(((NimStringDesc*) &TMP2));
	rawwritestacktrace_18001(result);
	return result;
}

N_NIMCALL(NimStringDesc*, getstacktrace_16603)(Exception* e) {
	NimStringDesc* result;
	result = 0;
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = !(e == 0);
		if (!(LOC3)) goto LA4;
		LOC3 = !((*e).trace == 0);
		LA4: ;
		if (!LOC3) goto LA5;
{		result = copyString((*e).trace);
}	}
	goto LA1;
	LA5: ;
	{
		result = copyString(((NimStringDesc*) &TMP2));
	}
	LA1: ;
	return result;
}
N_NIMCALL(void, TMP31)(void* p, NI op) {
	Indexerror3455* a;
	a = (Indexerror3455*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raiseIndexError)(void) {
	Indexerror3455* e_21618;
	NimStringDesc* LOC1;
	e_21618 = 0;
	e_21618 = (Indexerror3455*) newObj((&NTI21801), sizeof(Indexerror3455));
	(*e_21618).m_type = (&NTI3455);
	LOC1 = 0;
	LOC1 = (*e_21618).message; (*e_21618).message = copyStringRC1(((NimStringDesc*) &TMP32));
	if (LOC1) nimGCunrefNoCycle(LOC1);
	raiseException((Exception*)e_21618, "IndexError");
}

static N_INLINE(NI, chckIndx)(NI i, NI a, NI b) {
	NI result;
{	result = 0;
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (a <= i);
		if (!(LOC3)) goto LA4;
		LOC3 = (i <= b);
		LA4: ;
		if (!LOC3) goto LA5;
{		result = i;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		raiseIndexError();
	}
	LA1: ;
	}BeforeRet: ;
	return result;
}
N_NIMCALL(void, TMP33)(void* p, NI op) {
	Rangeerror3459* a;
	a = (Rangeerror3459*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NIMCALL(NimStringDesc*, nimInt64ToStr)(NI64 x) {
	NimStringDesc* result;
	result = 0;
	result = mnewString(((NI) 32));
	NI i = ((NI) 0);
	NI64 y = x;
	{
		while (1) {
			NI64 d = (NI64)(y / IL64(10));
			result->data[i] = ((NIM_CHAR) (((NI) ((NI)((((NI) ((NI64)(y - (NI64)(d * IL64(10))))) > 0? (((NI) ((NI64)(y - (NI64)(d * IL64(10)))))) : -(((NI) ((NI64)(y - (NI64)(d * IL64(10))))))) + ((NI) 48))))));
			i += ((NI) 1);
			y = d;
			{
				if (!(y == IL64(0))) goto LA5;
{				goto LA1;
}			}
			LA5: ;
		}
	} LA1: ;
	{
		if (!(x < IL64(0))) goto LA9;
{		result->data[i] = 45;
		i += ((NI) 1);
}	}
	LA9: ;
	result = setLengthStr(result, ((NI) (i)));
	{
		NI j_77827;
		NI HEX3Atmp_77841;
		j_77827 = 0;
		HEX3Atmp_77841 = 0;
		HEX3Atmp_77841 = (NI)((NI)(i / ((NI) 2)) - ((NI) 1));
		NI res_77844 = ((NI) 0);
		{
			while (1) {
				NIM_CHAR LOC14;
				if (!(res_77844 <= HEX3Atmp_77841)) goto LA13;
				j_77827 = res_77844;
				LOC14 = 0;
				LOC14 = result->data[j_77827];
				result->data[j_77827] = result->data[(NI)((NI)(i - j_77827) - ((NI) 1))];
				result->data[(NI)((NI)(i - j_77827) - ((NI) 1))] = LOC14;
				res_77844 += ((NI) 1);
			} LA13: ;
		}
	}
	return result;
}

N_NOINLINE(void, raiseRangeError)(NI64 val) {
	Rangeerror3459* e_21403;
	NimStringDesc* LOC1;
	NimStringDesc* LOC2;
	e_21403 = 0;
	e_21403 = (Rangeerror3459*) newObj((&NTI21601), sizeof(Rangeerror3459));
	(*e_21403).m_type = (&NTI3459);
	LOC1 = 0;
	LOC2 = 0;
	LOC2 = nimInt64ToStr(val);
	LOC1 = rawNewString(LOC2->len + 20);
appendString(LOC1, ((NimStringDesc*) &TMP34));
appendString(LOC1, LOC2);
	asgnRefNoCycle((void**) (&(*e_21403).message), LOC1);
	raiseException((Exception*)e_21403, "RangeError");
}

static N_INLINE(NI, chckRange)(NI i, NI a, NI b) {
	NI result;
{	result = 0;
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (a <= i);
		if (!(LOC3)) goto LA4;
		LOC3 = (i <= b);
		LA4: ;
		if (!LOC3) goto LA5;
{		result = i;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		raiseRangeError(((NI64) (i)));
	}
	LA1: ;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NimStringDesc*, nimFloatToStr)(NF f) {
	NimStringDesc* result;
	TY77396 buf;
	int LOC1;
	result = 0;
	memset((void*)buf, 0, sizeof(buf));
	LOC1 = 0;
	LOC1 = sprintf(((NCSTRING) (buf)), "%.16g", f);
	NI n = ((NI) (LOC1));
	NIM_BOOL hasdot = NIM_FALSE;
	{
		NI i_77411;
		NI HEX3Atmp_77426;
		i_77411 = 0;
		HEX3Atmp_77426 = 0;
		HEX3Atmp_77426 = (NI)(n - ((NI) 1));
		NI res_77429 = ((NI) 0);
		{
			while (1) {
				if (!(res_77429 <= HEX3Atmp_77426)) goto LA4;
				i_77411 = res_77429;
				{
					if (!((NU8)(buf[(i_77411)- 0]) == (NU8)(44))) goto LA7;
{					buf[(i_77411)- 0] = 46;
					hasdot = NIM_TRUE;
}				}
				goto LA5;
				LA7: ;
				{
					if (!(((NU8)(buf[(i_77411)- 0])) >= ((NU8)(97)) && ((NU8)(buf[(i_77411)- 0])) <= ((NU8)(122)) || ((NU8)(buf[(i_77411)- 0])) >= ((NU8)(65)) && ((NU8)(buf[(i_77411)- 0])) <= ((NU8)(90)) || ((NU8)(buf[(i_77411)- 0])) == ((NU8)(46)))) goto LA10;
{					hasdot = NIM_TRUE;
}				}
				goto LA5;
				LA10: ;
				LA5: ;
				res_77429 += ((NI) 1);
			} LA4: ;
		}
	}
	{
		if (!!(hasdot)) goto LA14;
{		buf[(n)- 0] = 46;
		buf[((NI)(n + ((NI) 1)))- 0] = 48;
		buf[((NI)(n + ((NI) 2)))- 0] = 0;
}	}
	LA14: ;
	{
		if (!((NU8)(buf[((NI)(n - ((NI) 1)))- 0]) == (NU8)(78))) goto LA18;
{		result = copyString(((NimStringDesc*) &TMP35));
}	}
	goto LA16;
	LA18: ;
	{
		if (!((NU8)(buf[((NI)(n - ((NI) 1)))- 0]) == (NU8)(70))) goto LA21;
{		{
			if (!((NU8)(buf[(((NI) 0))- 0]) == (NU8)(45))) goto LA25;
{			result = copyString(((NimStringDesc*) &TMP36));
}		}
		goto LA23;
		LA25: ;
		{
			result = copyString(((NimStringDesc*) &TMP37));
		}
		LA23: ;
}	}
	goto LA16;
	LA21: ;
	{
		result = cstrToNimstr(((NCSTRING) (buf)));
	}
	LA16: ;
	return result;
}

static N_INLINE(NF, chckRangeF)(NF x, NF a, NF b) {
	NF result;
{	result = 0;
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (a <= x);
		if (!(LOC3)) goto LA4;
		LOC3 = (x <= b);
		LA4: ;
		if (!LOC3) goto LA5;
{		result = x;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		Rangeerror3459* e_22203;
		NimStringDesc* LOC8;
		NimStringDesc* LOC9;
		e_22203 = 0;
		e_22203 = (Rangeerror3459*) newObj((&NTI21601), sizeof(Rangeerror3459));
		(*e_22203).m_type = (&NTI3459);
		LOC8 = 0;
		LOC9 = 0;
		LOC9 = nimFloatToStr(x);
		LOC8 = rawNewString(LOC9->len + 20);
appendString(LOC8, ((NimStringDesc*) &TMP34));
appendString(LOC8, LOC9);
		asgnRefNoCycle((void**) (&(*e_22203).message), LOC8);
		raiseException((Exception*)e_22203, "RangeError");
	}
	LA1: ;
	}BeforeRet: ;
	return result;
}
N_NIMCALL(void, TMP38)(void* p, NI op) {
	Valueerror3449* a;
	a = (Valueerror3449*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, chckNil)(void* p) {
	{
		Valueerror3449* e_22419;
		NimStringDesc* LOC5;
		if (!(p == NIM_NIL)) goto LA3;
{		e_22419 = 0;
		e_22419 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
		(*e_22419).m_type = (&NTI3449);
		LOC5 = 0;
		LOC5 = (*e_22419).message; (*e_22419).message = copyStringRC1(((NimStringDesc*) &TMP39));
		if (LOC5) nimGCunrefNoCycle(LOC5);
		raiseException((Exception*)e_22419, "ValueError");
}	}
	LA3: ;
}

static N_INLINE(void, pushSafePoint)(TSafePoint* s) {
	(*s).hasRaiseAction = NIM_FALSE;
	(*s).prev = exchandler_17043;
	exchandler_17043 = s;
}

static N_INLINE(void, popSafePoint)(void) {
	exchandler_17043 = (*exchandler_17043).prev;
}

static N_INLINE(void, popCurrentException)(void) {
	asgnRef((void**) (&currexception_17045), (*currexception_17045).parent);
}

N_NIMCALL(NIM_BOOL, stacktraceavailable_17932)(void) {
	NIM_BOOL result;
	result = 0;
	{
		if (!(frameptr_17042 == NIM_NIL)) goto LA3;
{		result = NIM_FALSE;
}	}
	goto LA1;
	LA3: ;
	{
		result = NIM_TRUE;
	}
	LA1: ;
	return result;
}
N_NIMCALL(void, TMP40)(void* p, NI op) {
	Reraiseerror3463* a;
	a = (Reraiseerror3463*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NIMCALL(void, reraiseException)(void) {
	{
		Reraiseerror3463* e_19021;
		NimStringDesc* LOC5;
		if (!(currexception_17045 == NIM_NIL)) goto LA3;
{		e_19021 = 0;
		e_19021 = (Reraiseerror3463*) newObj((&NTI19201), sizeof(Reraiseerror3463));
		(*e_19021).m_type = (&NTI3463);
		LOC5 = 0;
		LOC5 = (*e_19021).message; (*e_19021).message = copyStringRC1(((NimStringDesc*) &TMP41));
		if (LOC5) nimGCunrefNoCycle(LOC5);
		raiseException((Exception*)e_19021, "ReraiseError");
}	}
	goto LA1;
	LA3: ;
	{
		raiseexceptionaux_18604(currexception_17045);
	}
	LA1: ;
}

static N_INLINE(void, Gcdisable_8801)(void) {
	nimfr("GC_disable", "gc.nim")
	nimln(1093, "gc.nim");
	gch_48444.recgclock += ((NI) 1);
	popFrame();
}

static N_INLINE(void, Gcenable_8803)(void) {
	nimfr("GC_enable", "gc.nim")
	nimln(1095, "gc.nim");
	{
		if (!(((NI) 0) < gch_48444.recgclock)) goto LA3;
{		nimln(1099, "gc.nim");
		gch_48444.recgclock -= ((NI) 1);
}	}
	LA3: ;
	popFrame();
}

N_NOCONV(void, signalHandler)(int sig) {
	NimStringDesc* buf;
	Gcdisable_8801();
	buf = rawNewString(((NI) 2000));
	rawwritestacktrace_18001(buf);
	{
		if (!(sig == SIGINT)) goto LA3;
{		buf = resizeString(buf, 32);
appendString(buf, ((NimStringDesc*) &TMP42));
}	}
	goto LA1;
	LA3: ;
	{
		if (!(sig == SIGSEGV)) goto LA6;
{		buf = resizeString(buf, 62);
appendString(buf, ((NimStringDesc*) &TMP43));
}	}
	goto LA1;
	LA6: ;
	{
		if (!(sig == SIGABRT)) goto LA9;
{		buf = resizeString(buf, 32);
appendString(buf, ((NimStringDesc*) &TMP44));
}	}
	goto LA1;
	LA9: ;
	{
		if (!(sig == SIGFPE)) goto LA12;
{		buf = resizeString(buf, 27);
appendString(buf, ((NimStringDesc*) &TMP45));
}	}
	goto LA1;
	LA12: ;
	{
		if (!(sig == SIGILL)) goto LA15;
{		buf = resizeString(buf, 28);
appendString(buf, ((NimStringDesc*) &TMP46));
}	}
	goto LA1;
	LA15: ;
	{
		if (!(sig == SIGSEGV)) goto LA18;
{		buf = resizeString(buf, 61);
appendString(buf, ((NimStringDesc*) &TMP47));
}	}
	goto LA1;
	LA18: ;
	{
		{
			buf = resizeString(buf, 16);
appendString(buf, ((NimStringDesc*) &TMP48));
		}
	}
	LA1: ;
	showerrormessage_17009(buf->data);
	Gcenable_8803();
	exit(((NI) 1));
}

N_NIMCALL(void, registersignalhandler_21007)(void) {
	signal(SIGINT, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGABRT, signalHandler);
	signal(SIGFPE, signalHandler);
	signal(SIGILL, signalHandler);
	signal(SIGSEGV, signalHandler);
}
N_NIMCALL(void, TMP49)(void* p, NI op) {
	Fielderror3457* a;
	a = (Fielderror3457*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raiseFieldError)(NimStringDesc* f) {
	Fielderror3457* e_21819;
	NimStringDesc* LOC1;
	e_21819 = 0;
	e_21819 = (Fielderror3457*) newObj((&NTI22001), sizeof(Fielderror3457));
	(*e_21819).m_type = (&NTI3457);
	LOC1 = 0;
	LOC1 = rawNewString(f->len + 18);
appendString(LOC1, f);
appendString(LOC1, ((NimStringDesc*) &TMP50));
	asgnRefNoCycle((void**) (&(*e_21819).message), LOC1);
	raiseException((Exception*)e_21819, "FieldError");
}

N_NIMCALL(NI64, chckRange64)(NI64 i, NI64 a, NI64 b) {
	NI64 result;
{	result = 0;
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (a <= i);
		if (!(LOC3)) goto LA4;
		LOC3 = (i <= b);
		LA4: ;
		if (!LOC3) goto LA5;
{		result = i;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		raiseRangeError(i);
	}
	LA1: ;
	}BeforeRet: ;
	return result;
}
N_NIMCALL(void, TMP51)(void* p, NI op) {
	Objectconversionerror3467* a;
	a = (Objectconversionerror3467*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NIMCALL(void, chckObj)(TNimType* obj, TNimType* subclass) {
{	TNimType* x = obj;
	{
		if (!(x == subclass)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		while (1) {
			if (!!((x == subclass))) goto LA6;
			{
				Objectconversionerror3467* e_22655;
				NimStringDesc* LOC11;
				if (!(x == NIM_NIL)) goto LA9;
{				e_22655 = 0;
				e_22655 = (Objectconversionerror3467*) newObj((&NTI22801), sizeof(Objectconversionerror3467));
				(*e_22655).m_type = (&NTI3467);
				LOC11 = 0;
				LOC11 = (*e_22655).message; (*e_22655).message = copyStringRC1(((NimStringDesc*) &TMP52));
				if (LOC11) nimGCunrefNoCycle(LOC11);
				raiseException((Exception*)e_22655, "ObjectConversionError");
				goto LA5;
}			}
			LA9: ;
			x = (*x).base;
		} LA6: ;
	} LA5: ;
	}BeforeRet: ;
}
N_NIMCALL(void, TMP53)(void* p, NI op) {
	Objectassignmenterror3465* a;
	a = (Objectassignmenterror3465*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, chckObjAsgn)(TNimType* a, TNimType* b) {
	{
		Objectassignmenterror3465* e_22838;
		NimStringDesc* LOC5;
		if (!!((a == b))) goto LA3;
{		e_22838 = 0;
		e_22838 = (Objectassignmenterror3465*) newObj((&NTI23001), sizeof(Objectassignmenterror3465));
		(*e_22838).m_type = (&NTI3465);
		LOC5 = 0;
		LOC5 = (*e_22838).message; (*e_22838).message = copyStringRC1(((NimStringDesc*) &TMP54));
		if (LOC5) nimGCunrefNoCycle(LOC5);
		raiseException((Exception*)e_22838, "ObjectAssignmentError");
}	}
	LA3: ;
}

N_NIMCALL(NIM_BOOL, isObj)(TNimType* obj, TNimType* subclass) {
	NIM_BOOL result;
{	result = 0;
	TNimType* x = obj;
	{
		if (!(x == subclass)) goto LA3;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		while (1) {
			if (!!((x == subclass))) goto LA6;
			{
				if (!(x == NIM_NIL)) goto LA9;
{				result = NIM_FALSE;
				goto BeforeRet;
}			}
			LA9: ;
			x = (*x).base;
		} LA6: ;
	}
	result = NIM_TRUE;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}
N_NIMCALL(void, TMP55)(void* p, NI op) {
	Divbyzeroerror3441* a;
	a = (Divbyzeroerror3441*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raiseDivByZero)(void) {
	Divbyzeroerror3441* e_23218;
	NimStringDesc* LOC1;
	e_23218 = 0;
	e_23218 = (Divbyzeroerror3441*) newObj((&NTI23401), sizeof(Divbyzeroerror3441));
	(*e_23218).m_type = (&NTI3441);
	LOC1 = 0;
	LOC1 = (*e_23218).message; (*e_23218).message = copyStringRC1(((NimStringDesc*) &TMP56));
	if (LOC1) nimGCunrefNoCycle(LOC1);
	raiseException((Exception*)e_23218, "DivByZeroError");
}

static N_INLINE(NI64, addInt64)(NI64 a, NI64 b) {
	NI64 result;
{	result = 0;
	result = (NI64)((NU64)(a) + (NU64)(b));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (IL64(0) <= (NI64)(result ^ a));
		if (LOC3) goto LA4;
		LOC3 = (IL64(0) <= (NI64)(result ^ b));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI64, subInt64)(NI64 a, NI64 b) {
	NI64 result;
{	result = 0;
	result = (NI64)((NU64)(a) - (NU64)(b));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (IL64(0) <= (NI64)(result ^ a));
		if (LOC3) goto LA4;
		LOC3 = (IL64(0) <= (NI64)(result ^ (NI64)((NU64) ~(b))));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI64, negInt64)(NI64 a) {
	NI64 result;
{	result = 0;
	{
		if (!!((a == (IL64(-9223372036854775807) - IL64(1))))) goto LA3;
{		result = -(a);
		goto BeforeRet;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI64, absInt64)(NI64 a) {
	NI64 result;
{	result = 0;
	{
		if (!!((a == (IL64(-9223372036854775807) - IL64(1))))) goto LA3;
{		{
			if (!(IL64(0) <= a)) goto LA7;
{			result = a;
			goto BeforeRet;
}		}
		goto LA5;
		LA7: ;
		{
			result = -(a);
			goto BeforeRet;
		}
		LA5: ;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI64, divInt64)(NI64 a, NI64 b) {
	NI64 result;
{	result = 0;
	{
		if (!(b == IL64(0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = 0;
		LOC7 = (a == (IL64(-9223372036854775807) - IL64(1)));
		if (!(LOC7)) goto LA8;
		LOC7 = (b == IL64(-1));
		LA8: ;
		if (!LOC7) goto LA9;
{		raiseOverflow();
}	}
	LA9: ;
	result = (NI64)(a / b);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI64, modInt64)(NI64 a, NI64 b) {
	NI64 result;
{	result = 0;
	{
		if (!(b == IL64(0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	result = (NI64)(a % b);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI64, mulInt64)(NI64 a, NI64 b) {
	NI64 result;
	NF resasfloat;
	NF floatprod;
{	result = 0;
	resasfloat = 0;
	floatprod = 0;
	result = (NI64)((NU64)(a) * (NU64)(b));
	floatprod = ((double) (a));
	floatprod = ((NF)(floatprod) * (NF)(((double) (b))));
	resasfloat = ((double) (result));
	{
		if (!(resasfloat == floatprod)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(((NF)(3.2000000000000000e+001) * (NF)((((NF)(resasfloat) - (NF)(floatprod)) > 0? (((NF)(resasfloat) - (NF)(floatprod))) : -(((NF)(resasfloat) - (NF)(floatprod)))))) <= (floatprod > 0? (floatprod) : -(floatprod)))) goto LA7;
{		goto BeforeRet;
}	}
	LA7: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI, absInt)(NI a) {
	NI result;
{	result = 0;
	{
		if (!!((a == ((NI) (IL64(-9223372036854775807) - IL64(1)))))) goto LA3;
{		{
			if (!(((NI) 0) <= a)) goto LA7;
{			result = a;
			goto BeforeRet;
}		}
		goto LA5;
		LA7: ;
		{
			result = ((NI64)-(a));
			goto BeforeRet;
		}
		LA5: ;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI, subInt)(NI a, NI b) {
	NI result;
{	result = 0;
	result = (NI)((NU64)(a) - (NU64)(b));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (((NI) 0) <= (NI)(result ^ a));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result ^ (NI)((NU64) ~(b))));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI, negInt)(NI a) {
	NI result;
{	result = 0;
	{
		if (!!((a == ((NI) (IL64(-9223372036854775807) - IL64(1)))))) goto LA3;
{		result = ((NI64)-(a));
		goto BeforeRet;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI, divInt)(NI a, NI b) {
	NI result;
{	result = 0;
	{
		if (!(b == ((NI) 0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = 0;
		LOC7 = (a == ((NI) (IL64(-9223372036854775807) - IL64(1))));
		if (!(LOC7)) goto LA8;
		LOC7 = (b == ((NI) -1));
		LA8: ;
		if (!LOC7) goto LA9;
{		raiseOverflow();
}	}
	LA9: ;
	result = (NI)(a / b);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(NI, modInt)(NI a, NI b) {
	NI result;
{	result = 0;
	{
		if (!(b == ((NI) 0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	result = (NI)(a % b);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}
N_NIMCALL(void, TMP57)(void* p, NI op) {
	Floatinvalidoperror3471* a;
	a = (Floatinvalidoperror3471*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raisefloatinvalidop_24823)(void) {
	Floatinvalidoperror3471* e_24827;
	NimStringDesc* LOC1;
	e_24827 = 0;
	e_24827 = (Floatinvalidoperror3471*) newObj((&NTI25001), sizeof(Floatinvalidoperror3471));
	(*e_24827).m_type = (&NTI3471);
	LOC1 = 0;
	LOC1 = (*e_24827).message; (*e_24827).message = copyStringRC1(((NimStringDesc*) &TMP58));
	if (LOC1) nimGCunrefNoCycle(LOC1);
	raiseException((Exception*)e_24827, "FloatInvalidOpError");
}

static N_INLINE(void, nanCheck)(NF x) {
	{
		if (!!((x == x))) goto LA3;
{		raisefloatinvalidop_24823();
}	}
	LA3: ;
}
N_NIMCALL(void, TMP59)(void* p, NI op) {
	Floatoverflowerror3475* a;
	a = (Floatoverflowerror3475*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}
N_NIMCALL(void, TMP61)(void* p, NI op) {
	Floatunderflowerror3477* a;
	a = (Floatunderflowerror3477*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raisefloatoverflow_25020)(NF x) {
	{
		Floatoverflowerror3475* e_25026;
		NimStringDesc* LOC5;
		if (!(0.0 < x)) goto LA3;
{		e_25026 = 0;
		e_25026 = (Floatoverflowerror3475*) newObj((&NTI25201), sizeof(Floatoverflowerror3475));
		(*e_25026).m_type = (&NTI3475);
		LOC5 = 0;
		LOC5 = (*e_25026).message; (*e_25026).message = copyStringRC1(((NimStringDesc*) &TMP60));
		if (LOC5) nimGCunrefNoCycle(LOC5);
		raiseException((Exception*)e_25026, "FloatOverflowError");
}	}
	goto LA1;
	LA3: ;
	{
		Floatunderflowerror3477* e_25212;
		NimStringDesc* LOC7;
		e_25212 = 0;
		e_25212 = (Floatunderflowerror3477*) newObj((&NTI25401), sizeof(Floatunderflowerror3477));
		(*e_25212).m_type = (&NTI3477);
		LOC7 = 0;
		LOC7 = (*e_25212).message; (*e_25212).message = copyStringRC1(((NimStringDesc*) &TMP62));
		if (LOC7) nimGCunrefNoCycle(LOC7);
		raiseException((Exception*)e_25212, "FloatUnderflowError");
	}
	LA1: ;
}

static N_INLINE(void, infCheck)(NF x) {
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = !((x == 0.0));
		if (!(LOC3)) goto LA4;
		LOC3 = (((NF)(x) * (NF)(5.0000000000000000e-001)) == x);
		LA4: ;
		if (!LOC3) goto LA5;
{		raisefloatoverflow_25020(x);
}	}
	LA5: ;
}

N_NIMCALL(void, rawwrite_25602)(FILE* f, NimStringDesc* s) {
	NI LOC1;
	LOC1 = 0;
	LOC1 = writebuffer_13537(f, ((void*) (s->data)), ((NI) ((s ? s->len : 0))));
}

N_NOINLINE(void, nimLoadLibraryError)(NimStringDesc* path) {
	rawwrite_25602(stdout, ((NimStringDesc*) &TMP63));
	rawwrite_25602(stdout, path);
	rawwrite_25602(stdout, ((NimStringDesc*) &TMP8));
	exit(((NI) 1));
}

N_NOINLINE(void, procaddrerror_25615)(NCSTRING name) {
	rawwrite_25602(stdout, ((NimStringDesc*) &TMP64));
	write_13469(stdout, name);
	rawwrite_25602(stdout, ((NimStringDesc*) &TMP8));
	exit(((NI) 1));
}

N_NIMCALL(void, nimUnloadLibrary)(void* lib) {
	FreeLibrary((*(HINSTANCE*) ((&lib))));
}

N_NIMCALL(void*, nimLoadLibrary)(NimStringDesc* path) {
	void* result;
	HINSTANCE LOC1;
	result = 0;
	LOC1 = LoadLibraryA(path->data);
	result = ((void*) (LOC1));
	return result;
}

N_NIMCALL(void*, nimGetProcAddr)(void* lib, NCSTRING name) {
	void* result;
	result = 0;
	result = (void*)GetProcAddress((*(HINSTANCE*) ((&lib))), name);
	{
		if (!(result == NIM_NIL)) goto LA3;
{		procaddrerror_25615(name);
}	}
	LA3: ;
	return result;
}

N_NIMCALL(NI, countBits32)(NI32 n) {
	NI result;
	nimfr("countBits32", "sets.nim")
	result = 0;
	nimln(16, "sets.nim");
	NI32 v = n;
	nimln(17, "sets.nim");
	v = (NI32)((NU32)(v) - (NU32)((NI32)((NI32)((NU32)(v) >> (NU32)(((NI32) 1))) & ((NI32) 1431655765))));
	nimln(18, "sets.nim");
	v = (NI32)((NU32)((NI32)(v & ((NI32) 858993459))) + (NU32)((NI32)((NI32)((NU32)(v) >> (NU32)(((NI32) 2))) & ((NI32) 858993459))));
	nimln(19, "sets.nim");
	result = ((NI) ((NI32)((NU32)((NI32)((NU32)((NI32)((NI32)((NU32)(v) + (NU32)((NI32)((NU32)(v) >> (NU32)(((NI32) 4))))) & ((NI32) 252645135))) * (NU32)(((NI32) 16843009)))) >> (NU32)(((NI32) 24)))));
	popFrame();
	return result;
}

N_NIMCALL(NI, countBits64)(NI64 n) {
	NI result;
	NI LOC1;
	NI LOC2;
	nimfr("countBits64", "sets.nim")
	result = 0;
	nimln(22, "sets.nim");
	LOC1 = 0;
	LOC1 = countBits32(((NI32)(NU32)(NU64)(((NI64) ((NI64)(n & IL64(65535)))))));
	nimln(23, "sets.nim");
	LOC2 = 0;
	LOC2 = countBits32(((NI32)(NU32)(NU64)((NI64)((NU64)(n) >> (NU64)(IL64(16))))));
	result = (NI)(LOC1 + LOC2);
	popFrame();
	return result;
}

N_NIMCALL(NI, cardSet)(Tnimset26202 s, NI len) {
	NI result;
	nimfr("cardSet", "sets.nim")
	result = 0;
	nimln(26, "sets.nim");
	result = ((NI) 0);
	{
		NI i_26424;
		NI HEX3Atmp_26436;
		i_26424 = 0;
		HEX3Atmp_26436 = 0;
		nimln(27, "sets.nim");
		HEX3Atmp_26436 = (NI)(len - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_26439 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				NI LOC4;
				if (!(res_26439 <= HEX3Atmp_26436)) goto LA3;
				nimln(1600, "system.nim");
				i_26424 = res_26439;
				nimln(28, "sets.nim");
				LOC4 = 0;
				LOC4 = countBits32(((NI32) (s[(i_26424)- 0])));
				result += LOC4;
				nimln(1614, "system.nim");
				res_26439 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
	return result;
}

N_NIMCALL(NI, getmaxmem_28643)(Tmemregion28410& a) {
	NI result;
	nimfr("getMaxMem", "alloc.nim")
	result = 0;
	nimln(205, "alloc.nim");
	result = ((a.currmem >= a.maxmem) ? a.currmem : a.maxmem);
	popFrame();
	return result;
}

N_NIMCALL(Tavlnode28408*, find_29470)(Tavlnode28408* root, NI key) {
	Tavlnode28408* result;
	nimfr("find", "avltree.nim")
{	result = 0;
	nimln(28, "avltree.nim");
	Tavlnode28408* it = root;
	{
		nimln(29, "avltree.nim");
		while (1) {
			if (!!((it == bottom_28439))) goto LA2;
			nimln(30, "avltree.nim");
			{
				if (!((*it).key == key)) goto LA5;
{				result = it;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(31, "avltree.nim");
			it = (*it).link[(((NU64)((*it).key) < (NU64)(key)))- 0];
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, lldeallocall_29877)(Tmemregion28410& a) {
	nimfr("llDeallocAll", "alloc.nim")
	nimln(248, "alloc.nim");
	Tllchunk28404* it = a.llmem;
	{
		nimln(249, "alloc.nim");
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			nimln(251, "alloc.nim");
			Tllchunk28404* next = (*it).next;
			nimln(252, "alloc.nim");
			osdeallocpages_27431(((void*) (it)), ((NI) 4096));
			nimln(253, "alloc.nim");
			it = next;
		} LA2: ;
	}
	popFrame();
}

static N_INLINE(NIM_BOOL, iscell_30421)(void* p) {
	NIM_BOOL result;
	nimfr("isCell", "alloc.nim")
	result = 0;
	nimln(334, "alloc.nim");
	result = ((NU64)(((NI) 1)) < (NU64)((*((Tfreecell27630*) (p))).zerofield));
	popFrame();
	return result;
}

N_NIMCALL(void, writefreelist_31236)(Tmemregion28410* a) {
	nimfr("writeFreeList", "alloc.nim")
	nimln(400, "alloc.nim");
	Tbigchunk27642* it = (*a).freechunkslist;
	nimln(401, "alloc.nim");
	fprintf(stdout, "freeChunksList: %p\015\012", it);
	{
		nimln(402, "alloc.nim");
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			nimln(403, "alloc.nim");
			fprintf(stdout, "it: %p, next: %p, prev: %p\015\012", it, (*it).next, (*it).prev);
			nimln(405, "alloc.nim");
			it = (*it).next;
		} LA2: ;
	}
	popFrame();
}

N_NIMCALL(NIM_BOOL, allocinv_35609)(Tmemregion28410* a) {
	NIM_BOOL result;
	nimfr("allocInv", "alloc.nim")
{	result = 0;
	{
		NI s_35823;
		s_35823 = 0;
		nimln(1598, "system.nim");
		NI res_35874 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_35874 <= ((NI) 511))) goto LA3;
				nimln(1600, "system.nim");
				s_35823 = ((NI) (res_35874));
				nimln(522, "alloc.nim");
				Tsmallchunk27640* c = (*a).freesmallchunks[(s_35823)- 0];
				{
					nimln(523, "alloc.nim");
					while (1) {
						if (!!((c == NIM_NIL))) goto LA5;
						nimln(524, "alloc.nim");
						{
							if (!((*c).next == c)) goto LA8;
{							nimln(525, "alloc.nim");
							printf("%s\015\012", ((NimStringDesc*) &TMP65)? (((NimStringDesc*) &TMP65))->data:"nil");
							nimln(526, "alloc.nim");
							result = NIM_FALSE;
							goto BeforeRet;
}						}
						LA8: ;
						nimln(527, "alloc.nim");
						{
							if (!!(((*c).size == ((NI) ((NI)(((NI) (s_35823)) * ((NI) 8))))))) goto LA12;
{							nimln(528, "alloc.nim");
							printf("%s\015\012", ((NimStringDesc*) &TMP66)? (((NimStringDesc*) &TMP66))->data:"nil");
							nimln(529, "alloc.nim");
							result = NIM_FALSE;
							goto BeforeRet;
}						}
						LA12: ;
						nimln(530, "alloc.nim");
						Tfreecell27630* it = (*c).freelist;
						{
							nimln(531, "alloc.nim");
							while (1) {
								if (!!((it == NIM_NIL))) goto LA15;
								nimln(532, "alloc.nim");
								{
									if (!!(((*it).zerofield == ((NI) 0)))) goto LA18;
{									nimln(533, "alloc.nim");
									printf("%s\015\012", ((NimStringDesc*) &TMP67)? (((NimStringDesc*) &TMP67))->data:"nil");
									nimln(534, "alloc.nim");
									printf("%ld %p\015\012", (*it).zerofield, it);
									nimln(535, "alloc.nim");
									result = NIM_FALSE;
									goto BeforeRet;
}								}
								LA18: ;
								nimln(536, "alloc.nim");
								it = (*it).next;
							} LA15: ;
						}
						nimln(537, "alloc.nim");
						c = (*c).next;
					} LA5: ;
				}
				nimln(1619, "system.nim");
				res_35874 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(538, "alloc.nim");
	result = NIM_TRUE;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void*, rawalloc0_42214)(Tmemregion28410& a, NI requestedsize) {
	void* result;
	nimfr("rawAlloc0", "alloc.nim")
	result = 0;
	nimln(605, "alloc.nim");
	result = rawalloc_35901(a, requestedsize);
	nimln(606, "alloc.nim");
	zeroMem(result, ((NI) (requestedsize)));
	popFrame();
	return result;
}

N_NIMCALL(NI, ptrsize_44816)(void* p) {
	NI result;
	nimfr("ptrSize", "alloc.nim")
	result = 0;
	nimln(707, "alloc.nim");
	void* x = ((void*) ((NI)((NU64)(((NI) (p))) - (NU64)(((NI)sizeof(Tfreecell27630))))));
	nimln(708, "alloc.nim");
	Tbasechunk27638* c = pageaddr_30455(p);
	nimln(710, "alloc.nim");
	result = (NI)((NU64)((*c).size) - (NU64)(((NI)sizeof(Tfreecell27630))));
	nimln(711, "alloc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = issmallchunk_30308(c);
		if (!!(LOC3)) goto LA4;
{		nimln(712, "alloc.nim");
		result -= (NI)(((NI)sizeof(Tbigchunk27642)) - ((NI) 8));
}	}
	LA4: ;
	popFrame();
	return result;
}

N_NIMCALL(void*, realloc_46207)(Tmemregion28410& allocator, void* p, NI newsize) {
	void* result;
	nimfr("realloc", "alloc.nim")
	result = 0;
	nimln(734, "alloc.nim");
	{
		if (!(((NI) 0) < ((NI) (newsize)))) goto LA3;
{		nimln(735, "alloc.nim");
		result = alloc0_45219(allocator, newsize);
		nimln(736, "alloc.nim");
		{
			NI LOC9;
			if (!!((p == NIM_NIL))) goto LA7;
{			nimln(737, "alloc.nim");
			LOC9 = 0;
			LOC9 = ptrsize_44816(p);
			memcpy(result, p, ((NI) (LOC9)));
			nimln(738, "alloc.nim");
			dealloc_45229(allocator, p);
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(739, "alloc.nim");
		if (!!((p == NIM_NIL))) goto LA11;
{		nimln(740, "alloc.nim");
		dealloc_45229(allocator, p);
}	}
	goto LA1;
	LA11: ;
	LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(void, deallocospages_46220)(Tmemregion28410& a) {
	nimfr("deallocOsPages", "alloc.nim")
	{
		NI p_46224;
		Tintset27617 HEX3Atmp_46404;
		p_46224 = 0;
		memset((void*)(&HEX3Atmp_46404), 0, sizeof(HEX3Atmp_46404));
		nimln(744, "alloc.nim");
		HEX3Atmp_46404 = a.chunkstarts;
		{
			NI h_46411;
			h_46411 = 0;
			nimln(1598, "system.nim");
			NI res_46413 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_46413 <= ((NI) 255))) goto LA4;
					nimln(1600, "system.nim");
					h_46411 = ((NI) (res_46413));
					nimln(293, "alloc.nim");
					Ttrunk27613* r_46415 = HEX3Atmp_46404.data[(h_46411)- 0];
					{
						nimln(294, "alloc.nim");
						while (1) {
							if (!!((r_46415 == NIM_NIL))) goto LA6;
							nimln(295, "alloc.nim");
							NI i_46417 = ((NI) 0);
							{
								nimln(296, "alloc.nim");
								while (1) {
									if (!(i_46417 <= ((NI) 7))) goto LA8;
									nimln(297, "alloc.nim");
									NI w_46419 = (*r_46415).bits[(i_46417)- 0];
									nimln(299, "alloc.nim");
									NI j_46421 = ((NI) 0);
									{
										nimln(300, "alloc.nim");
										while (1) {
											if (!!((w_46419 == ((NI) 0)))) goto LA10;
											nimln(301, "alloc.nim");
											{
												if (!!((((NI) ((NI)(w_46419 & ((NI) 1)))) == ((NI) 0)))) goto LA13;
{												nimln(302, "alloc.nim");
												p_46224 = (NI)((NI)((NU64)((*r_46415).key) << (NU64)(((NI) 9))) | (NI)((NU64)((NI)((NU64)(i_46417) << (NU64)(((NI) 6)))) + (NU64)(j_46421)));
												nimln(745, "alloc.nim");
												Tbasechunk27638* page = ((Tbasechunk27638*) ((NI)((NU64)(p_46224) << (NU64)(((NI) 12)))));
												nimln(755, "alloc.nim");
												osdeallocpages_27431(((void*) (page)), ((NI) 4096));
}											}
											LA13: ;
											nimln(303, "alloc.nim");
											j_46421 += ((NI) 1);
											nimln(304, "alloc.nim");
											w_46419 = (NI)((NU64)(w_46419) >> (NU64)(((NI) 1)));
										} LA10: ;
									}
									nimln(305, "alloc.nim");
									i_46417 += ((NI) 1);
								} LA8: ;
							}
							nimln(306, "alloc.nim");
							r_46415 = (*r_46415).next;
						} LA6: ;
					}
					nimln(1619, "system.nim");
					res_46413 += ((NI) 1);
				} LA4: ;
			}
		}
	}
	nimln(757, "alloc.nim");
	lldeallocall_29877(a);
	popFrame();
}

static N_INLINE(NI, getfreemem_46455)(Tmemregion28410* a) {
	NI result;
	nimfr("getFreeMem", "alloc.nim")
	result = 0;
	nimln(759, "alloc.nim");
	result = (*a).freemem;
	popFrame();
	return result;
}

static N_INLINE(NI, gettotalmem_46462)(Tmemregion28410* a) {
	NI result;
	nimfr("getTotalMem", "alloc.nim")
	result = 0;
	nimln(760, "alloc.nim");
	result = (*a).currmem;
	popFrame();
	return result;
}

static N_INLINE(NIM_BOOL, contains_46585)(Tcellseq46563* s, Tcell46547* c) {
	NIM_BOOL result;
	nimfr("contains", "cellsets.nim")
{	result = 0;
	{
		NI i_46600;
		NI HEX3Atmp_46613;
		i_46600 = 0;
		HEX3Atmp_46613 = 0;
		nimln(47, "cellsets.nim");
		HEX3Atmp_46613 = (NI)((*s).len - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_46616 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_46616 <= HEX3Atmp_46613)) goto LA3;
				nimln(1600, "system.nim");
				i_46600 = res_46616;
				nimln(48, "cellsets.nim");
				{
					if (!((*s).d[(i_46600)- 0] == c)) goto LA6;
{					result = NIM_TRUE;
					goto BeforeRet;
}				}
				LA6: ;
				nimln(1619, "system.nim");
				res_46616 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(49, "cellsets.nim");
	result = NIM_FALSE;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, deinit_46668)(Tcellseq46563& s) {
	nimfr("deinit", "cellsets.nim")
	nimln(68, "cellsets.nim");
	dealloc_6048(((void*) (s.d)));
	nimln(69, "cellsets.nim");
	s.d = NIM_NIL;
	nimln(70, "cellsets.nim");
	s.len = ((NI) 0);
	nimln(71, "cellsets.nim");
	s.cap = ((NI) 0);
	popFrame();
}

N_NIMCALL(NIM_BOOL, contains_47223)(Tcellset46559* s, Tcell46547* cell) {
	NIM_BOOL result;
	nimfr("contains", "cellsets.nim")
	result = 0;
	nimln(150, "cellsets.nim");
	NI u = ((NI) (cell));
	nimln(151, "cellsets.nim");
	Tpagedesc46555* t = cellsetget_46724(s, (NI)((NU64)(u) >> (NU64)(((NI) 12))));
	nimln(152, "cellsets.nim");
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		nimln(153, "cellsets.nim");
		u = (NI)((NU64)((NI)((NU64)(u) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		nimln(154, "cellsets.nim");
		result = !(((NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63))))))) == ((NI) 0)));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(156, "cellsets.nim");
		result = NIM_FALSE;
	}
	LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(NIM_BOOL, containsorincl_47338)(Tcellset46559& s, Tcell46547* cell) {
	NIM_BOOL result;
	nimfr("containsOrIncl", "cellsets.nim")
	result = 0;
	nimln(173, "cellsets.nim");
	NI u = ((NI) (cell));
	nimln(174, "cellsets.nim");
	Tpagedesc46555* t = cellsetget_46724((&s), (NI)((NU64)(u) >> (NU64)(((NI) 12))));
	nimln(175, "cellsets.nim");
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		nimln(176, "cellsets.nim");
		u = (NI)((NU64)((NI)((NU64)(u) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		nimln(177, "cellsets.nim");
		result = !(((NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63))))))) == ((NI) 0)));
		nimln(178, "cellsets.nim");
		{
			if (!!(result)) goto LA7;
{			nimln(179, "cellsets.nim");
			nimln(180, "cellsets.nim");
			(*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63)))))));
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(182, "cellsets.nim");
		incl_47265(s, cell);
		nimln(183, "cellsets.nim");
		result = NIM_FALSE;
	}
	LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(void, deallocospages_48801)(void) {
	nimfr("deallocOsPages", "alloc.nim")
	nimln(775, "alloc.nim");
	deallocospages_46220(gch_48444.region);
	popFrame();
}

N_NOCONV(void*, realloc_6033)(void* p, NI newsize) {
	void* result;
	nimfr("realloc", "alloc.nim")
	result = 0;
	nimln(787, "alloc.nim");
	result = realloc_46207(gch_48444.region, p, newsize);
	popFrame();
	return result;
}

N_NOCONV(void*, allocshared_6057)(NI size) {
	void* result;
	nimfr("allocShared", "alloc.nim")
	result = 0;
	nimln(816, "alloc.nim");
	result = alloc_6001(size);
	popFrame();
	return result;
}

N_NOCONV(void*, allocshared0_6073)(NI size) {
	void* result;
	nimfr("allocShared0", "alloc.nim")
	result = 0;
	nimln(819, "alloc.nim");
	result = allocshared_6057(size);
	nimln(820, "alloc.nim");
	zeroMem(result, size);
	popFrame();
	return result;
}

N_NOCONV(void, deallocshared_6104)(void* p) {
	nimfr("deallocShared", "alloc.nim")
	nimln(828, "alloc.nim");
	dealloc_6048(p);
	popFrame();
}

N_NOCONV(void*, reallocshared_6089)(void* p, NI newsize) {
	void* result;
	nimfr("reallocShared", "alloc.nim")
	result = 0;
	nimln(836, "alloc.nim");
	result = realloc_6033(p, newsize);
	popFrame();
	return result;
}

N_NIMCALL(TNimType*, extGetCellType)(void* c) {
	TNimType* result;
	nimfr("extGetCellType", "gc.nim")
	result = 0;
	nimln(125, "gc.nim");
	result = (*usrtocell_50047(c)).typ;
	popFrame();
	return result;
}

N_NIMCALL(NI, getRefcount)(void* p) {
	NI result;
	nimfr("internRefcount", "gc.nim")
	result = 0;
	nimln(128, "gc.nim");
	result = (NI)((NU64)((*usrtocell_50047(p)).refcount) >> (NU64)(((NI) 3)));
	popFrame();
	return result;
}

N_NIMCALL(void, writecell_50218)(NCSTRING msg, Tcell46547* c) {
	nimfr("writeCell", "gc.nim")
	nimln(142, "gc.nim");
	NI kind = ((NI) -1);
	nimln(143, "gc.nim");
	{
		if (!!(((*c).typ == NIM_NIL))) goto LA3;
{		kind = ((NI) ((*(*c).typ).kind));
}	}
	LA3: ;
	nimln(148, "gc.nim");
	nimln(149, "gc.nim");
	fprintf(stdout, "[GC] %s: %p %d rc=%ld; color=%ld\015\012", msg, c, kind, (NI)((NU64)((*c).refcount) >> (NU64)(((NI) 3))), (NI)((*c).refcount & ((NI) 3)));
	popFrame();
}

N_NOINLINE(NIM_BOOL, isonstack_50414)(void* p) {
	NIM_BOOL result;
	void* volatile stacktop;
	NIM_BOOL LOC1;
	nimfr("isOnStack", "gc.nim")
	result = 0;
	stacktop = 0;
	nimln(910, "gc.nim");
	stacktop = ((void*) ((&stacktop)));
	nimln(911, "gc.nim");
	NI b = ((NI) (gch_48444.stackbottom));
	nimln(912, "gc.nim");
	NI a = ((NI) (stacktop));
	nimln(913, "gc.nim");
	NI x = ((NI) (p));
	nimln(914, "gc.nim");
	LOC1 = 0;
	LOC1 = ((NU64)(a) <= (NU64)(x));
	if (!(LOC1)) goto LA2;
	LOC1 = ((NU64)(x) <= (NU64)(b));
	LA2: ;
	result = LOC1;
	popFrame();
	return result;
}

static N_INLINE(void, nimGCref)(void* p) {
	nimfr("nimGCref", "gc.nim")
	nimln(222, "gc.nim");
	incref_52422(usrtocell_50047(p));
	popFrame();
}

static N_INLINE(void, nimGCunref)(void* p) {
	nimfr("nimGCunref", "gc.nim")
	nimln(223, "gc.nim");
	decref_52004(usrtocell_50047(p));
	popFrame();
}

N_NIMCALL(void, unsureAsgnRef)(void** dest, void* src) {
	nimfr("unsureAsgnRef", "gc.nim")
	nimln(264, "gc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = isonstack_50414(((void*) (dest)));
		if (!!(LOC3)) goto LA4;
{		nimln(265, "gc.nim");
		{
			if (!!((src == NIM_NIL))) goto LA8;
{			incref_52422(usrtocell_50047(src));
}		}
		LA8: ;
		nimln(269, "gc.nim");
		{
			if (!((NU64)(((NI) 4096)) <= (NU64)(((NI) ((*dest)))))) goto LA12;
{			decref_52004(usrtocell_50047((*dest)));
}		}
		LA12: ;
}	}
	goto LA1;
	LA4: ;
	{
	}
	LA1: ;
	nimln(274, "gc.nim");
	(*dest) = src;
	popFrame();
}

N_NIMCALL(void, setupforeignthreadgc_54405)(void) {
	nimfr("setupForeignThreadGc", "gc.nim")
	nimln(303, "gc.nim");
	{
		void* volatile stacktop;
		if (!!(localgcinitialized_54404)) goto LA3;
{		nimln(304, "gc.nim");
		localgcinitialized_54404 = NIM_TRUE;
		stacktop = 0;
		nimln(306, "gc.nim");
		setStackBottom(((void*) ((&stacktop))));
		nimln(307, "gc.nim");
		initgc_9801();
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, gcinvariant_55895)(void) {
}

N_NIMCALL(void*, newSeqRC1)(TNimType* typ, NI len) {
	void* result;
	nimfr("newSeqRC1", "gc.nim")
	result = 0;
	nimln(512, "gc.nim");
	NI size = addInt(mulInt(len, (*(*typ).base).size), ((NI) 16));
	nimln(513, "gc.nim");
	result = newObjRC1(typ, size);
	nimln(514, "gc.nim");
	(*((TGenericSeq*) (result))).len = len;
	nimln(515, "gc.nim");
	(*((TGenericSeq*) (result))).reserved = len;
	popFrame();
	return result;
}

N_NIMCALL(void, Gcsetstrategy_8814)(NU8 strategy) {
	nimfr("GC_setStrategy", "gc.nim")
	popFrame();
}

N_NIMCALL(void, Gcenablemarkandsweep_8817)(void) {
	nimfr("GC_enableMarkAndSweep", "gc.nim")
	nimln(1105, "gc.nim");
	gch_48444.cyclethreshold = ((NI) 4194304);
	popFrame();
}

N_NIMCALL(void, Gcdisablemarkandsweep_8819)(void) {
	nimfr("GC_disableMarkAndSweep", "gc.nim")
	nimln(1108, "gc.nim");
	gch_48444.cyclethreshold = ((NI) IL64(9223372036854775806));
	popFrame();
}

N_NIMCALL(void, Gcfullcollect_8805)(void) {
	nimfr("GC_fullCollect", "gc.nim")
	nimln(1113, "gc.nim");
	NI oldthreshold = gch_48444.cyclethreshold;
	nimln(1114, "gc.nim");
	gch_48444.cyclethreshold = ((NI) 0);
	nimln(1115, "gc.nim");
	collectct_50410(gch_48444);
	nimln(1116, "gc.nim");
	gch_48444.cyclethreshold = oldthreshold;
	popFrame();
}

N_NIMCALL(NimStringDesc*, Gcgetstatistics_8821)(void) {
	NimStringDesc* result;
	NimStringDesc* LOC1;
	NI LOC2;
	NimStringDesc* LOC3;
	NI LOC4;
	NimStringDesc* LOC5;
	NimStringDesc* LOC6;
	NimStringDesc* LOC7;
	NimStringDesc* LOC8;
	NimStringDesc* LOC9;
	NimStringDesc* LOC10;
	NimStringDesc* LOC11;
	NimStringDesc* LOC12;
	NimStringDesc* LOC13;
	nimfr("GC_getStatistics", "gc.nim")
	result = 0;
	nimln(1120, "gc.nim");
	Gcdisable_8801();
	nimln(1121, "gc.nim");
	nimln(1130, "gc.nim");
	LOC1 = 0;
	nimln(1121, "gc.nim");
	LOC2 = 0;
	LOC2 = gettotalmem_6699();
	LOC3 = 0;
	LOC3 = nimIntToStr(LOC2);
	nimln(1122, "gc.nim");
	LOC4 = 0;
	LOC4 = getoccupiedmem_6695();
	LOC5 = 0;
	LOC5 = nimIntToStr(LOC4);
	nimln(1123, "gc.nim");
	LOC6 = 0;
	LOC6 = nimIntToStr(gch_48444.stat.stackscans);
	nimln(1124, "gc.nim");
	LOC7 = 0;
	LOC7 = nimIntToStr(gch_48444.stat.maxstackcells);
	nimln(1125, "gc.nim");
	LOC8 = 0;
	LOC8 = nimIntToStr(gch_48444.stat.cyclecollections);
	nimln(1126, "gc.nim");
	LOC9 = 0;
	LOC9 = nimIntToStr(gch_48444.stat.maxthreshold);
	nimln(1127, "gc.nim");
	LOC10 = 0;
	LOC10 = nimIntToStr(gch_48444.zct.cap);
	nimln(1128, "gc.nim");
	LOC11 = 0;
	LOC11 = nimIntToStr(gch_48444.stat.cycletablesize);
	nimln(1129, "gc.nim");
	LOC12 = 0;
	LOC12 = nimIntToStr(gch_48444.stat.maxstacksize);
	nimln(1130, "gc.nim");
	LOC13 = 0;
	LOC13 = nimInt64ToStr((NI64)(gch_48444.stat.maxpause / IL64(1000000)));
	LOC1 = rawNewString(LOC3->len + LOC5->len + LOC6->len + LOC7->len + LOC8->len + LOC9->len + LOC10->len + LOC11->len + LOC12->len + LOC13->len + 232);
appendString(LOC1, ((NimStringDesc*) &TMP68));
appendString(LOC1, LOC3);
appendString(LOC1, ((NimStringDesc*) &TMP69));
appendString(LOC1, LOC5);
appendString(LOC1, ((NimStringDesc*) &TMP70));
appendString(LOC1, LOC6);
appendString(LOC1, ((NimStringDesc*) &TMP71));
appendString(LOC1, LOC7);
appendString(LOC1, ((NimStringDesc*) &TMP72));
appendString(LOC1, LOC8);
appendString(LOC1, ((NimStringDesc*) &TMP73));
appendString(LOC1, LOC9);
appendString(LOC1, ((NimStringDesc*) &TMP74));
appendString(LOC1, LOC10);
appendString(LOC1, ((NimStringDesc*) &TMP75));
appendString(LOC1, LOC11);
appendString(LOC1, ((NimStringDesc*) &TMP76));
appendString(LOC1, LOC12);
appendString(LOC1, ((NimStringDesc*) &TMP77));
appendString(LOC1, LOC13);
	result = LOC1;
	nimln(1131, "gc.nim");
	Gcenable_8803();
	popFrame();
	return result;
}

static N_INLINE(NI, cmpStrings)(NimStringDesc* a, NimStringDesc* b) {
	NI result;
	int LOC13;
{	result = 0;
	{
		if (!(a == b)) goto LA3;
{		result = ((NI) 0);
		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(a == NIM_NIL)) goto LA7;
{		result = ((NI) -1);
		goto BeforeRet;
}	}
	LA7: ;
	{
		if (!(b == NIM_NIL)) goto LA11;
{		result = ((NI) 1);
		goto BeforeRet;
}	}
	LA11: ;
	LOC13 = 0;
	LOC13 = strcmp(((NCSTRING) ((*a).data)), ((NCSTRING) ((*b).data)));
	result = ((NI) (LOC13));
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(NIM_BOOL, eqStrings)(NimStringDesc* a, NimStringDesc* b) {
	NIM_BOOL result;
	NIM_BOOL LOC11;
	int LOC13;
{	result = 0;
	{
		if (!(a == b)) goto LA3;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = 0;
		LOC7 = (a == NIM_NIL);
		if (LOC7) goto LA8;
		LOC7 = (b == NIM_NIL);
		LA8: ;
		if (!LOC7) goto LA9;
{		result = NIM_FALSE;
		goto BeforeRet;
}	}
	LA9: ;
	LOC11 = 0;
	LOC11 = ((*a).len == (*b).len);
	if (!(LOC11)) goto LA12;
	LOC13 = 0;
	LOC13 = memcmp(((NCSTRING) ((*a).data)), ((NCSTRING) ((*b).data)), (*a).len);
	LOC11 = (LOC13 == ((NI32) 0));
	LA12: ;
	result = LOC11;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s, NI start_76443, NI last) {
	NimStringDesc* result;
	result = 0;
	NI start = ((start_76443 >= ((NI) 0)) ? start_76443 : ((NI) 0));
	NI len = (NI)((NI)(((last <= (NI)((*s).len - ((NI) 1))) ? last : (NI)((*s).len - ((NI) 1))) - start) + ((NI) 1));
	{
		if (!(((NI) 0) < len)) goto LA3;
{		result = rawNewStringNoInit(len);
		(*result).len = len;
		memcpy(((NCSTRING) ((*result).data)), ((NCSTRING) ((&(*s).data[(start)- 0]))), len);
		(*result).data[(len)- 0] = 0;
}	}
	goto LA1;
	LA3: ;
	{
		result = rawNewString(len);
	}
	LA1: ;
	return result;
}

N_NIMCALL(NimStringDesc*, copyStr)(NimStringDesc* s, NI start) {
	NimStringDesc* result;
	result = 0;
	result = copyStrLast(s, start, (NI)((*s).len - ((NI) 1)));
	return result;
}

N_NIMCALL(NI, hashString)(NimStringDesc* s) {
	NI result;
	result = 0;
	NI h = ((NI) 0);
	{
		NI i_76624;
		NI HEX3Atmp_76671;
		i_76624 = 0;
		HEX3Atmp_76671 = 0;
		HEX3Atmp_76671 = (NI)((s ? s->len : 0) - ((NI) 1));
		NI res_76674 = ((NI) 0);
		{
			while (1) {
				if (!(res_76674 <= HEX3Atmp_76671)) goto LA3;
				i_76624 = res_76674;
				h = (NI)((NU64)(h) + (NU64)(((NI) (((NU8)(s->data[i_76624]))))));
				h = (NI)((NU64)(h) + (NU64)((NI)((NU64)(h) << (NU64)(((NI) 10)))));
				h = (NI)(h ^ (NI)((NU64)(h) >> (NU64)(((NI) 6))));
				res_76674 += ((NI) 1);
			} LA3: ;
		}
	}
	h = (NI)((NU64)(h) + (NU64)((NI)((NU64)(h) << (NU64)(((NI) 3)))));
	h = (NI)(h ^ (NI)((NU64)(h) >> (NU64)(((NI) 11))));
	h = (NI)((NU64)(h) + (NU64)((NI)((NU64)(h) << (NU64)(((NI) 15)))));
	result = h;
	return result;
}

static N_INLINE(void, appendChar)(NimStringDesc* dest, NIM_CHAR c) {
	(*dest).data[((*dest).len)- 0] = c;
	(*dest).data[((NI)((*dest).len + ((NI) 1)))- 0] = 0;
	(*dest).len += ((NI) 1);
}

N_NIMCALL(TGenericSeq*, incrSeq)(TGenericSeq* seq, NI elemsize) {
	TGenericSeq* result;
	result = 0;
	result = seq;
	{
		void* LOC5;
		if (!((NI)((*result).reserved & ((NI) IL64(9223372036854775807))) <= (*result).len)) goto LA3;
{		(*result).reserved = resize_76201((NI)((*result).reserved & ((NI) IL64(9223372036854775807))));
		LOC5 = 0;
		LOC5 = growobj_64818(((void*) (result)), (NI)((NI)(elemsize * (*result).reserved) + ((NI) 16)));
		result = ((TGenericSeq*) (LOC5));
}	}
	LA3: ;
	(*result).len += ((NI) 1);
	return result;
}

N_NIMCALL(TGenericSeq*, setLengthSeq)(TGenericSeq* seq, NI elemsize, NI newlen) {
	TGenericSeq* result;
	result = 0;
	result = seq;
	{
		NI LOC5;
		void* LOC6;
		if (!((NI)((*result).reserved & ((NI) IL64(9223372036854775807))) < newlen)) goto LA3;
{		LOC5 = 0;
		LOC5 = resize_76201((NI)((*result).reserved & ((NI) IL64(9223372036854775807))));
		(*result).reserved = ((LOC5 >= newlen) ? LOC5 : newlen);
		LOC6 = 0;
		LOC6 = growobj_64818(((void*) (result)), (NI)((NI)(elemsize * (*result).reserved) + ((NI) 16)));
		result = ((TGenericSeq*) (LOC6));
}	}
	goto LA1;
	LA3: ;
	{
		if (!(newlen < (*result).len)) goto LA8;
{		{
			NI i_77211;
			NI HEX3Atmp_77288;
			i_77211 = 0;
			HEX3Atmp_77288 = 0;
			HEX3Atmp_77288 = (NI)((*result).len - ((NI) 1));
			NI res_77291 = newlen;
			{
				while (1) {
					if (!(res_77291 <= HEX3Atmp_77288)) goto LA12;
					i_77211 = res_77291;
					forallchildrenaux_50425(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (result))) + (NU64)(((NI) 16)))) + (NU64)((NI)((NU64)(i_77211) * (NU64)(elemsize)))))), (*extGetCellType(((void*) (result)))).base, ((NU8) 2));
					res_77291 += ((NI) 1);
				} LA12: ;
			}
		}
		zeroMem(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (result))) + (NU64)(((NI) 16)))) + (NU64)((NI)((NU64)(newlen) * (NU64)(elemsize)))))), ((NI) ((NI)((NU64)((NI)((NU64)((*result).len) - (NU64)(newlen))) * (NU64)(elemsize)))));
}	}
	goto LA1;
	LA8: ;
	LA1: ;
	(*result).len = newlen;
	return result;
}

N_NIMCALL(NIM_CHAR, getdecimalpoint_77451)(void) {
	NIM_CHAR result;
	result = 0;
	result = decimalpoint_77450;
	{
		if (!((NU8)(result) == (NU8)(0))) goto LA3;
{		{
			NF LOC7;
			LOC7 = 0;
			LOC7 = strtod("0,5", NIM_NIL);
			if (!(LOC7 == 5.0000000000000000e-001)) goto LA8;
{			result = 44;
}		}
		goto LA5;
		LA8: ;
		{
			result = 46;
		}
		LA5: ;
		decimalpoint_77450 = result;
}	}
	LA3: ;
	return result;
}

N_NIMCALL(NI, nimParseBiggestFloat)(NimStringDesc* s, NF& number, NI start) {
	NI result;
	TY77470 t;
{	result = 0;
	NI i = start;
	NF sign = 1.0000000000000000e+000;
	memset((void*)t, 0, sizeof(t));
	NI ti = ((NI) 0);
	NIM_BOOL hasdigits = NIM_FALSE;
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = ((NU8)(s->data[i]) == (NU8)(43));
		if (LOC3) goto LA4;
		LOC3 = ((NU8)(s->data[i]) == (NU8)(45));
		LA4: ;
		if (!LOC3) goto LA5;
{		{
			if (!((NU8)(s->data[i]) == (NU8)(45))) goto LA9;
{			sign = -1.0000000000000000e+000;
}		}
		LA9: ;
		t[(ti)- 0] = s->data[i];
		i += ((NI) 1);
		ti += ((NI) 1);
}	}
	LA5: ;
	{
		NIM_BOOL LOC13;
		LOC13 = 0;
		LOC13 = ((NU8)(s->data[i]) == (NU8)(78));
		if (LOC13) goto LA14;
		LOC13 = ((NU8)(s->data[i]) == (NU8)(110));
		LA14: ;
		if (!LOC13) goto LA15;
{		{
			NIM_BOOL LOC19;
			LOC19 = 0;
			LOC19 = ((NU8)(s->data[(NI)(i + ((NI) 1))]) == (NU8)(65));
			if (LOC19) goto LA20;
			LOC19 = ((NU8)(s->data[(NI)(i + ((NI) 1))]) == (NU8)(97));
			LA20: ;
			if (!LOC19) goto LA21;
{			{
				NIM_BOOL LOC25;
				LOC25 = 0;
				LOC25 = ((NU8)(s->data[(NI)(i + ((NI) 2))]) == (NU8)(78));
				if (LOC25) goto LA26;
				LOC25 = ((NU8)(s->data[(NI)(i + ((NI) 2))]) == (NU8)(110));
				LA26: ;
				if (!LOC25) goto LA27;
{				{
					if (!!((((NU8)(s->data[(NI)(i + ((NI) 3))])) >= ((NU8)(97)) && ((NU8)(s->data[(NI)(i + ((NI) 3))])) <= ((NU8)(122)) || ((NU8)(s->data[(NI)(i + ((NI) 3))])) >= ((NU8)(65)) && ((NU8)(s->data[(NI)(i + ((NI) 3))])) <= ((NU8)(90)) || ((NU8)(s->data[(NI)(i + ((NI) 3))])) >= ((NU8)(48)) && ((NU8)(s->data[(NI)(i + ((NI) 3))])) <= ((NU8)(57)) || ((NU8)(s->data[(NI)(i + ((NI) 3))])) == ((NU8)(95))))) goto LA31;
{					number = NAN;
					result = (NI)((NI)(i + ((NI) 3)) - start);
					goto BeforeRet;
}				}
				LA31: ;
}			}
			LA27: ;
}		}
		LA21: ;
		result = ((NI) 0);
		goto BeforeRet;
}	}
	LA15: ;
	{
		NIM_BOOL LOC35;
		LOC35 = 0;
		LOC35 = ((NU8)(s->data[i]) == (NU8)(73));
		if (LOC35) goto LA36;
		LOC35 = ((NU8)(s->data[i]) == (NU8)(105));
		LA36: ;
		if (!LOC35) goto LA37;
{		{
			NIM_BOOL LOC41;
			LOC41 = 0;
			LOC41 = ((NU8)(s->data[(NI)(i + ((NI) 1))]) == (NU8)(78));
			if (LOC41) goto LA42;
			LOC41 = ((NU8)(s->data[(NI)(i + ((NI) 1))]) == (NU8)(110));
			LA42: ;
			if (!LOC41) goto LA43;
{			{
				NIM_BOOL LOC47;
				LOC47 = 0;
				LOC47 = ((NU8)(s->data[(NI)(i + ((NI) 2))]) == (NU8)(70));
				if (LOC47) goto LA48;
				LOC47 = ((NU8)(s->data[(NI)(i + ((NI) 2))]) == (NU8)(102));
				LA48: ;
				if (!LOC47) goto LA49;
{				{
					if (!!((((NU8)(s->data[(NI)(i + ((NI) 3))])) >= ((NU8)(97)) && ((NU8)(s->data[(NI)(i + ((NI) 3))])) <= ((NU8)(122)) || ((NU8)(s->data[(NI)(i + ((NI) 3))])) >= ((NU8)(65)) && ((NU8)(s->data[(NI)(i + ((NI) 3))])) <= ((NU8)(90)) || ((NU8)(s->data[(NI)(i + ((NI) 3))])) >= ((NU8)(48)) && ((NU8)(s->data[(NI)(i + ((NI) 3))])) <= ((NU8)(57)) || ((NU8)(s->data[(NI)(i + ((NI) 3))])) == ((NU8)(95))))) goto LA53;
{					number = ((NF)(INF) * (NF)(sign));
					result = (NI)((NI)(i + ((NI) 3)) - start);
					goto BeforeRet;
}				}
				LA53: ;
}			}
			LA49: ;
}		}
		LA43: ;
		result = ((NI) 0);
		goto BeforeRet;
}	}
	LA37: ;
	{
		while (1) {
			if (!(((NU8)(s->data[i])) >= ((NU8)(48)) && ((NU8)(s->data[i])) <= ((NU8)(57)))) goto LA56;
			hasdigits = NIM_TRUE;
			{
				if (!(ti < ((NI) 499))) goto LA59;
{				t[(ti)- 0] = s->data[i];
				ti += ((NI) 1);
}			}
			LA59: ;
			i += ((NI) 1);
			{
				while (1) {
					if (!((NU8)(s->data[i]) == (NU8)(95))) goto LA62;
					i += ((NI) 1);
				} LA62: ;
			}
		} LA56: ;
	}
	{
		if (!((NU8)(s->data[i]) == (NU8)(46))) goto LA65;
{		{
			if (!(ti < ((NI) 499))) goto LA69;
{			t[(ti)- 0] = getdecimalpoint_77451();
			ti += ((NI) 1);
}		}
		LA69: ;
		i += ((NI) 1);
		{
			while (1) {
				if (!(((NU8)(s->data[i])) >= ((NU8)(48)) && ((NU8)(s->data[i])) <= ((NU8)(57)))) goto LA72;
				hasdigits = NIM_TRUE;
				{
					if (!(ti < ((NI) 499))) goto LA75;
{					t[(ti)- 0] = s->data[i];
					ti += ((NI) 1);
}				}
				LA75: ;
				i += ((NI) 1);
				{
					while (1) {
						if (!((NU8)(s->data[i]) == (NU8)(95))) goto LA78;
						i += ((NI) 1);
					} LA78: ;
				}
			} LA72: ;
		}
}	}
	LA65: ;
	{
		if (!!(hasdigits)) goto LA81;
{		result = ((NI) 0);
		goto BeforeRet;
}	}
	LA81: ;
	{
		if (!(((NU8)(s->data[i])) == ((NU8)(101)) || ((NU8)(s->data[i])) == ((NU8)(69)))) goto LA85;
{		{
			if (!(ti < ((NI) 499))) goto LA89;
{			t[(ti)- 0] = s->data[i];
			ti += ((NI) 1);
}		}
		LA89: ;
		i += ((NI) 1);
		{
			if (!(((NU8)(s->data[i])) == ((NU8)(43)) || ((NU8)(s->data[i])) == ((NU8)(45)))) goto LA93;
{			{
				if (!(ti < ((NI) 499))) goto LA97;
{				t[(ti)- 0] = s->data[i];
				ti += ((NI) 1);
}			}
			LA97: ;
			i += ((NI) 1);
}		}
		LA93: ;
		{
			if (!!((((NU8)(s->data[i])) >= ((NU8)(48)) && ((NU8)(s->data[i])) <= ((NU8)(57))))) goto LA101;
{			result = ((NI) 0);
			goto BeforeRet;
}		}
		LA101: ;
		{
			while (1) {
				if (!(((NU8)(s->data[i])) >= ((NU8)(48)) && ((NU8)(s->data[i])) <= ((NU8)(57)))) goto LA104;
				{
					if (!(ti < ((NI) 499))) goto LA107;
{					t[(ti)- 0] = s->data[i];
					ti += ((NI) 1);
}				}
				LA107: ;
				i += ((NI) 1);
				{
					while (1) {
						if (!((NU8)(s->data[i]) == (NU8)(95))) goto LA110;
						i += ((NI) 1);
					} LA110: ;
				}
			} LA104: ;
		}
}	}
	LA85: ;
	number = strtod(((NCSTRING) (t)), NIM_NIL);
	result = (NI)(i - start);
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NimStringDesc*, nimBoolToStr)(NIM_BOOL x) {
	NimStringDesc* result;
{	result = 0;
	{
		if (!x) goto LA3;
{		result = copyString(((NimStringDesc*) &TMP23));
}	}
	goto LA1;
	LA3: ;
	{
		result = copyString(((NimStringDesc*) &TMP24));
	}
	LA1: ;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NimStringDesc*, nimCharToStr)(NIM_CHAR x) {
	NimStringDesc* result;
	result = 0;
	result = mnewString(((NI) 1));
	result->data[((NI) 0)] = x;
	return result;
}

N_NIMCALL(NI, binaryStrSearch)(NimStringDesc** x, NI xLen0, NimStringDesc* y) {
	NI result;
	result = 0;
	NI a = ((NI) 0);
	NI b = xLen0;
	{
		while (1) {
			if (!(a < b)) goto LA2;
			NI mid = (NI)((NI)(a + b) / ((NI) 2));
			{
				if (!(cmpStrings(x[mid], y) < 0)) goto LA5;
{				a = (NI)(mid + ((NI) 1));
}			}
			goto LA3;
			LA5: ;
			{
				b = mid;
			}
			LA3: ;
		} LA2: ;
	}
	{
		NIM_BOOL LOC10;
		LOC10 = 0;
		LOC10 = (a < xLen0);
		if (!(LOC10)) goto LA11;
		LOC10 = eqStrings(x[a], y);
		LA11: ;
		if (!LOC10) goto LA12;
{		result = a;
}	}
	goto LA8;
	LA12: ;
	{
		result = ((NI) -1);
	}
	LA8: ;
	return result;
}

N_NIMCALL(NimStringDesc*, readallfile_79331)(FILE* file) {
	NimStringDesc* result;
	nimfr("readAllFile", "sysio.nim")
	result = 0;
	nimln(179, "sysio.nim");
	NI len = rawfilesize_79312(file);
	nimln(180, "sysio.nim");
	result = readallfile_79320(file, len);
	popFrame();
	return result;
}

static N_INLINE(void, rawEcho)(NimStringDesc* x) {
	nimfr("rawEcho", "sysio.nim")
	nimln(215, "sysio.nim");
	write_13457(stdout, x);
	popFrame();
}

static N_INLINE(void, rawEchoNL)(void) {
	nimfr("rawEchoNL", "sysio.nim")
	nimln(216, "sysio.nim");
	write_13457(stdout, ((NimStringDesc*) &TMP8));
	popFrame();
}

N_NIMCALL(NI, len_79808)(NI16* w) {
	NI result;
	nimfr("len", "widestrs.nim")
	result = 0;
	{
		nimln(23, "widestrs.nim");
		while (1) {
			if (!!((w[(result)- 0] == ((NI16) 0)))) goto LA2;
			result += ((NI) 1);
		} LA2: ;
	}
	popFrame();
	return result;
}

N_NIMCALL(NI16*, newwidecstring_81005)(NimStringDesc* s) {
	NI16* result;
	nimfr("newWideCString", "widestrs.nim")
	result = 0;
	nimln(114, "widestrs.nim");
	result = newwidecstring_80821(s->data, (s ? s->len : 0));
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_81012)(NI16* w, NI estimate) {
	NimStringDesc* result;
	nimfr("$", "widestrs.nim")
	result = 0;
	nimln(117, "widestrs.nim");
	result = rawNewString(((NI) ((NI)(estimate + (NI)((NU64)(estimate) >> (NU64)(((NI) 2)))))));
	nimln(119, "widestrs.nim");
	NI i = ((NI) 0);
	{
		nimln(120, "widestrs.nim");
		while (1) {
			if (!!((w[(i)- 0] == ((NI16) 0)))) goto LA2;
			nimln(121, "widestrs.nim");
			NI ch = ((NI) (w[(i)- 0]));
			nimln(122, "widestrs.nim");
			i += ((NI) 1);
			nimln(123, "widestrs.nim");
			{
				NIM_BOOL LOC5;
				LOC5 = 0;
				LOC5 = ((NU64)(((NI) 55296)) <= (NU64)(ch));
				if (!(LOC5)) goto LA6;
				LOC5 = ((NU64)(ch) <= (NU64)(((NI) 56319)));
				LA6: ;
				if (!LOC5) goto LA7;
{				nimln(125, "widestrs.nim");
				NI ch2 = ((NI) (w[(i)- 0]));
				nimln(127, "widestrs.nim");
				{
					NIM_BOOL LOC11;
					LOC11 = 0;
					LOC11 = ((NU64)(((NI) 56320)) <= (NU64)(ch2));
					if (!(LOC11)) goto LA12;
					LOC11 = ((NU64)(ch2) <= (NU64)(((NI) 57343)));
					LA12: ;
					if (!LOC11) goto LA13;
{					nimln(128, "widestrs.nim");
					nimln(129, "widestrs.nim");
					nimln(128, "widestrs.nim");
					nimln(129, "widestrs.nim");
					ch = (NI)((NU64)((NI)((NU64)((NI)((NU64)((NI)((NU64)(ch) - (NU64)(((NI) 55296)))) >> (NU64)(((NI) 10)))) + (NU64)((NI)((NU64)(ch2) - (NU64)(((NI) 56320)))))) + (NU64)(((NI) 65536)));
					nimln(130, "widestrs.nim");
					i += ((NI) 1);
}				}
				LA13: ;
}			}
			LA7: ;
			nimln(132, "widestrs.nim");
			{
				if (!((NU64)(ch) <= (NU64)(((NI) 127)))) goto LA17;
{				nimln(133, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) (ch)))));
}			}
			goto LA15;
			LA17: ;
			{
				nimln(134, "widestrs.nim");
				if (!((NU64)(ch) <= (NU64)(((NI) 2047)))) goto LA20;
{				nimln(135, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)((NI)((NU64)(ch) >> (NU64)(((NI) 6))) | ((NI) 192)))))));
				nimln(136, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)(ch & ((NI) 63)))) | ((NI) 128)))))));
}			}
			goto LA15;
			LA20: ;
			{
				nimln(137, "widestrs.nim");
				if (!((NU64)(ch) <= (NU64)(((NI) 65535)))) goto LA23;
{				nimln(138, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)((NI)((NU64)(ch) >> (NU64)(((NI) 12))) | ((NI) 224)))))));
				nimln(139, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)((NI)((NU64)(ch) >> (NU64)(((NI) 6))) & ((NI) 63)))) | ((NI) 128)))))));
				nimln(140, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)(ch & ((NI) 63)))) | ((NI) 128)))))));
}			}
			goto LA15;
			LA23: ;
			{
				nimln(141, "widestrs.nim");
				if (!((NU64)(ch) <= (NU64)(((NI) 1114111)))) goto LA26;
{				nimln(142, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)((NI)((NU64)(ch) >> (NU64)(((NI) 18))) | ((NI) 240)))))));
				nimln(143, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)((NI)((NU64)(ch) >> (NU64)(((NI) 12))) & ((NI) 63)))) | ((NI) 128)))))));
				nimln(144, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)((NI)((NU64)(ch) >> (NU64)(((NI) 6))) & ((NI) 63)))) | ((NI) 128)))))));
				nimln(145, "widestrs.nim");
				result = addChar(result, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)(ch & ((NI) 63)))) | ((NI) 128)))))));
}			}
			goto LA15;
			LA26: ;
			{
				nimln(148, "widestrs.nim");
				result = addChar(result, 239);
				nimln(149, "widestrs.nim");
				result = addChar(result, 191);
				nimln(150, "widestrs.nim");
				result = addChar(result, 189);
			}
			LA15: ;
		} LA2: ;
	}
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_81189)(NI16* s) {
	NimStringDesc* result;
	nimfr("$", "widestrs.nim")
	result = 0;
	nimln(153, "widestrs.nim");
	result = HEX24_81012(s, ((NI) 80));
	popFrame();
	return result;
}

N_NIMCALL(void, genericReset)(void* dest, TNimType* mt) {
	nimfr("genericReset", "assign.nim")
	nimln(203, "assign.nim");
	NI d = ((NI) (dest));
	nimln(205, "assign.nim");
	switch ((*mt).kind) {
	case ((NU8) 28):
	case ((NU8) 22):
	case ((NU8) 24):
	{
		nimln(207, "assign.nim");
		unsureAsgnRef(((void**) (dest)), NIM_NIL);
	}
	break;
	case ((NU8) 18):
	{
		nimln(209, "assign.nim");
		genericresetaux_82201(dest, (*mt).node);
	}
	break;
	case ((NU8) 17):
	{
		nimln(211, "assign.nim");
		genericresetaux_82201(dest, (*mt).node);
		nimln(213, "assign.nim");
		TNimType** pint = ((TNimType**) (dest));
		nimln(214, "assign.nim");
		(*pint) = NIM_NIL;
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		{
			NI i_84013;
			NI HEX3Atmp_84037;
			i_84013 = 0;
			HEX3Atmp_84037 = 0;
			nimln(216, "assign.nim");
			HEX3Atmp_84037 = (NI)((NI)((*mt).size / (*(*mt).base).size) - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_84040 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_84040 <= HEX3Atmp_84037)) goto LA7;
					nimln(1600, "system.nim");
					i_84013 = res_84040;
					nimln(217, "assign.nim");
					genericReset(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_84013) * (NU64)((*(*mt).base).size)))))), (*mt).base);
					nimln(1619, "system.nim");
					res_84040 += ((NI) 1);
				} LA7: ;
			}
		}
	}
	break;
	default:
	{
		nimln(219, "assign.nim");
		zeroMem(dest, ((NI) ((*mt).size)));
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericresetaux_82201)(void* dest, TNimNode* n) {
	nimfr("genericResetAux", "assign.nim")
	nimln(191, "assign.nim");
	NI d = ((NI) (dest));
	nimln(192, "assign.nim");
	switch ((*n).kind) {
	case ((NU8) 0):
	{
	}
	break;
	case ((NU8) 1):
	{
		nimln(194, "assign.nim");
		genericReset(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), (*n).typ);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_83820;
			NI HEX3Atmp_83846;
			i_83820 = 0;
			HEX3Atmp_83846 = 0;
			nimln(196, "assign.nim");
			HEX3Atmp_83846 = (NI)((*n).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_83849 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_83849 <= HEX3Atmp_83846)) goto LA6;
					nimln(1600, "system.nim");
					i_83820 = res_83849;
					nimln(196, "assign.nim");
					genericresetaux_82201(dest, (*n).sons[(i_83820)- 0]);
					nimln(1619, "system.nim");
					res_83849 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		nimln(198, "assign.nim");
		TNimNode* m = selectbranch_26810(dest, n);
		nimln(199, "assign.nim");
		{
			if (!!((m == NIM_NIL))) goto LA10;
{			genericresetaux_82201(dest, m);
}		}
		LA10: ;
		nimln(200, "assign.nim");
		zeroMem(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((NI) ((*(*n).typ).size)));
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericassignaux_82212)(void* dest, void* src, TNimNode* n, NIM_BOOL shallow) {
	nimfr("genericAssignAux", "assign.nim")
	nimln(16, "assign.nim");
	NI d = ((NI) (dest));
	nimln(17, "assign.nim");
	NI s = ((NI) (src));
	nimln(18, "assign.nim");
	switch ((*n).kind) {
	case ((NU8) 1):
	{
		nimln(20, "assign.nim");
		nimln(21, "assign.nim");
		genericassignaux_82206(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((void*) ((NI)((NU64)(s) + (NU64)((*n).offset)))), (*n).typ, shallow);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_82249;
			NI HEX3Atmp_82406;
			i_82249 = 0;
			HEX3Atmp_82406 = 0;
			nimln(23, "assign.nim");
			HEX3Atmp_82406 = (NI)((*n).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_82409 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_82409 <= HEX3Atmp_82406)) goto LA5;
					nimln(1600, "system.nim");
					i_82249 = res_82409;
					nimln(24, "assign.nim");
					genericassignaux_82212(dest, src, (*n).sons[(i_82249)- 0], shallow);
					nimln(1619, "system.nim");
					res_82409 += ((NI) 1);
				} LA5: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		nimln(26, "assign.nim");
		TNimNode* dd = selectbranch_26810(dest, n);
		nimln(27, "assign.nim");
		TNimNode* m = selectbranch_26810(src, n);
		nimln(30, "assign.nim");
		{
			NIM_BOOL LOC9;
			LOC9 = 0;
			LOC9 = !((m == dd));
			if (!(LOC9)) goto LA10;
			LOC9 = !((dd == NIM_NIL));
			LA10: ;
			if (!LOC9) goto LA11;
{			nimln(31, "assign.nim");
			genericresetaux_82201(dest, dd);
}		}
		LA11: ;
		nimln(32, "assign.nim");
		memcpy(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((void*) ((NI)((NU64)(s) + (NU64)((*n).offset)))), ((NI) ((*(*n).typ).size)));
		nimln(34, "assign.nim");
		{
			if (!!((m == NIM_NIL))) goto LA15;
{			nimln(35, "assign.nim");
			genericassignaux_82212(dest, src, m, shallow);
}		}
		LA15: ;
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericassignaux_82206)(void* dest, void* src, TNimType* mt, NIM_BOOL shallow) {
	nimfr("genericAssignAux", "assign.nim")
{	nimln(43, "assign.nim");
	NI d = ((NI) (dest));
	nimln(44, "assign.nim");
	NI s = ((NI) (src));
	nimln(46, "assign.nim");
	switch ((*mt).kind) {
	case ((NU8) 28):
	{
		nimln(48, "assign.nim");
		void** x = ((void**) (dest));
		nimln(49, "assign.nim");
		void* s2 = (*((void**) (s)));
		nimln(50, "assign.nim");
		{
			NIM_BOOL LOC4;
			NIM_BOOL LOC5;
			LOC4 = 0;
			LOC5 = 0;
			LOC5 = (s2 == NIM_NIL);
			if (LOC5) goto LA6;
			LOC5 = shallow;
			LA6: ;
			LOC4 = LOC5;
			if (LOC4) goto LA7;
			nimln(51, "assign.nim");
			LOC4 = !(((NI)((*((TGenericSeq*) (s2))).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)));
			LA7: ;
			if (!LOC4) goto LA8;
{			nimln(52, "assign.nim");
			unsureAsgnRef(x, s2);
}		}
		goto LA2;
		LA8: ;
		{
			NimStringDesc* LOC11;
			nimln(54, "assign.nim");
			LOC11 = 0;
			LOC11 = copyString(((NimStringDesc*) (s2)));
			unsureAsgnRef(x, ((void*) (LOC11)));
		}
		LA2: ;
	}
	break;
	case ((NU8) 24):
	{
		nimln(56, "assign.nim");
		void* s2 = (*((void**) (src)));
		nimln(57, "assign.nim");
		TGenericSeq* seq = ((TGenericSeq*) (s2));
		nimln(58, "assign.nim");
		void** x = ((void**) (dest));
		nimln(59, "assign.nim");
		{
			NIM_BOOL LOC15;
			NIM_BOOL LOC16;
			LOC15 = 0;
			LOC16 = 0;
			LOC16 = (s2 == NIM_NIL);
			if (LOC16) goto LA17;
			LOC16 = shallow;
			LA17: ;
			LOC15 = LOC16;
			if (LOC15) goto LA18;
			LOC15 = !(((NI)((*seq).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)));
			LA18: ;
			if (!LOC15) goto LA19;
{			nimln(61, "assign.nim");
			unsureAsgnRef(x, s2);
			nimln(62, "assign.nim");
			goto BeforeRet;
}		}
		LA19: ;
		nimln(64, "assign.nim");
		unsureAsgnRef(x, newSeq(mt, (*seq).len));
		nimln(65, "assign.nim");
		NI dst = ((NI) ((*((void**) (dest)))));
		{
			NI i_82812;
			NI HEX3Atmp_82943;
			i_82812 = 0;
			HEX3Atmp_82943 = 0;
			nimln(66, "assign.nim");
			HEX3Atmp_82943 = (NI)((*seq).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_82946 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_82946 <= HEX3Atmp_82943)) goto LA23;
					nimln(1600, "system.nim");
					i_82812 = res_82946;
					nimln(67, "assign.nim");
					nimln(68, "assign.nim");
					nimln(69, "assign.nim");
					genericassignaux_82206(((void*) ((NI)((NU64)((NI)((NU64)(dst) + (NU64)((NI)((NU64)(i_82812) * (NU64)((*(*mt).base).size))))) + (NU64)(((NI) 16))))), ((void*) ((NI)((NU64)((NI)((NU64)(((NI) (s2))) + (NU64)((NI)((NU64)(i_82812) * (NU64)((*(*mt).base).size))))) + (NU64)(((NI) 16))))), (*mt).base, shallow);
					nimln(1619, "system.nim");
					res_82946 += ((NI) 1);
				} LA23: ;
			}
		}
	}
	break;
	case ((NU8) 17):
	{
		nimln(73, "assign.nim");
		{
			if (!!(((*mt).base == NIM_NIL))) goto LA27;
{			nimln(74, "assign.nim");
			genericassignaux_82206(dest, src, (*mt).base, shallow);
}		}
		LA27: ;
		nimln(75, "assign.nim");
		genericassignaux_82212(dest, src, (*mt).node, shallow);
		nimln(78, "assign.nim");
		TNimType** pint = ((TNimType**) (dest));
		nimln(83, "assign.nim");
		(*pint) = mt;
	}
	break;
	case ((NU8) 18):
	{
		nimln(85, "assign.nim");
		genericassignaux_82212(dest, src, (*mt).node, shallow);
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		{
			NI i_82891;
			NI HEX3Atmp_82954;
			i_82891 = 0;
			HEX3Atmp_82954 = 0;
			nimln(87, "assign.nim");
			HEX3Atmp_82954 = (NI)((NI)((*mt).size / (*(*mt).base).size) - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_82957 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_82957 <= HEX3Atmp_82954)) goto LA33;
					nimln(1600, "system.nim");
					i_82891 = res_82957;
					nimln(88, "assign.nim");
					nimln(89, "assign.nim");
					genericassignaux_82206(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_82891) * (NU64)((*(*mt).base).size)))))), ((void*) ((NI)((NU64)(s) + (NU64)((NI)((NU64)(i_82891) * (NU64)((*(*mt).base).size)))))), (*mt).base, shallow);
					nimln(1619, "system.nim");
					res_82957 += ((NI) 1);
				} LA33: ;
			}
		}
	}
	break;
	case ((NU8) 22):
	{
		nimln(91, "assign.nim");
		unsureAsgnRef(((void**) (dest)), (*((void**) (s))));
	}
	break;
	default:
	{
		nimln(93, "assign.nim");
		memcpy(dest, src, ((NI) ((*mt).size)));
	}
	break;
	}
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, genericAssign)(void* dest, void* src, TNimType* mt) {
	nimfr("genericAssign", "assign.nim")
	nimln(96, "assign.nim");
	genericassignaux_82206(dest, src, mt, NIM_FALSE);
	popFrame();
}

N_NIMCALL(void, genericShallowAssign)(void* dest, void* src, TNimType* mt) {
	nimfr("genericShallowAssign", "assign.nim")
	nimln(99, "assign.nim");
	genericassignaux_82206(dest, src, mt, NIM_TRUE);
	popFrame();
}

N_NIMCALL(void, genericSeqAssign)(void* dest, void* src_83204, TNimType* mt) {
	nimfr("genericSeqAssign", "assign.nim")
	nimln(131, "assign.nim");
	void* src = src_83204;
	nimln(132, "assign.nim");
	genericAssign(dest, ((void*) ((&src))), mt);
	popFrame();
}

N_NIMCALL(void, genericAssignOpenArray)(void* dest, void* src, NI len, TNimType* mt) {
	nimfr("genericAssignOpenArray", "assign.nim")
	nimln(137, "assign.nim");
	NI d = ((NI) (dest));
	nimln(138, "assign.nim");
	NI s = ((NI) (src));
	{
		NI i_83229;
		NI HEX3Atmp_83271;
		i_83229 = 0;
		HEX3Atmp_83271 = 0;
		nimln(139, "assign.nim");
		HEX3Atmp_83271 = (NI)(len - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_83274 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_83274 <= HEX3Atmp_83271)) goto LA3;
				nimln(1600, "system.nim");
				i_83229 = res_83274;
				nimln(140, "assign.nim");
				nimln(141, "assign.nim");
				genericAssign(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_83229) * (NU64)((*(*mt).base).size)))))), ((void*) ((NI)((NU64)(s) + (NU64)((NI)((NU64)(i_83229) * (NU64)((*(*mt).base).size)))))), (*mt).base);
				nimln(1619, "system.nim");
				res_83274 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(void, objectinitaux_83294)(void* dest, TNimNode* n) {
	nimfr("objectInitAux", "assign.nim")
	nimln(145, "assign.nim");
	NI d = ((NI) (dest));
	nimln(146, "assign.nim");
	switch ((*n).kind) {
	case ((NU8) 0):
	{
	}
	break;
	case ((NU8) 1):
	{
		nimln(148, "assign.nim");
		objectInit(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), (*n).typ);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_83420;
			NI HEX3Atmp_83437;
			i_83420 = 0;
			HEX3Atmp_83437 = 0;
			nimln(150, "assign.nim");
			HEX3Atmp_83437 = (NI)((*n).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_83440 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_83440 <= HEX3Atmp_83437)) goto LA6;
					nimln(1600, "system.nim");
					i_83420 = res_83440;
					nimln(151, "assign.nim");
					objectinitaux_83294(dest, (*n).sons[(i_83420)- 0]);
					nimln(1619, "system.nim");
					res_83440 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		nimln(153, "assign.nim");
		TNimNode* m = selectbranch_26810(dest, n);
		nimln(154, "assign.nim");
		{
			if (!!((m == NIM_NIL))) goto LA10;
{			objectinitaux_83294(dest, m);
}		}
		LA10: ;
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, objectInit)(void* dest, TNimType* typ) {
	nimfr("objectInit", "assign.nim")
	nimln(159, "assign.nim");
	NI d = ((NI) (dest));
	nimln(160, "assign.nim");
	switch ((*typ).kind) {
	case ((NU8) 17):
	{
		nimln(164, "assign.nim");
		TNimType** pint = ((TNimType**) (dest));
		nimln(165, "assign.nim");
		(*pint) = typ;
		nimln(166, "assign.nim");
		objectinitaux_83294(dest, (*typ).node);
	}
	break;
	case ((NU8) 18):
	{
		nimln(168, "assign.nim");
		objectinitaux_83294(dest, (*typ).node);
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		{
			NI i_83473;
			NI HEX3Atmp_83487;
			i_83473 = 0;
			HEX3Atmp_83487 = 0;
			nimln(170, "assign.nim");
			HEX3Atmp_83487 = (NI)((NI)((*typ).size / (*(*typ).base).size) - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_83490 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_83490 <= HEX3Atmp_83487)) goto LA6;
					nimln(1600, "system.nim");
					i_83473 = res_83490;
					nimln(171, "assign.nim");
					objectInit(((void*) ((NI)((NU64)(d) + (NU64)((NI)(i_83473 * (*(*typ).base).size))))), (*typ).base);
					nimln(1619, "system.nim");
					res_83490 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	default:
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(TNimNode*, selectbranch_84056)(NI discval, NI L, TNimNode** a) {
	TNimNode* result;
	nimfr("selectBranch", "assign.nim")
	result = 0;
	nimln(223, "assign.nim");
	result = a[(L)- 0];
	nimln(224, "assign.nim");
	{
		if (!((NU64)(discval) < (NU64)(L))) goto LA3;
{		nimln(225, "assign.nim");
		TNimNode* x = a[(discval)- 0];
		nimln(226, "assign.nim");
		{
			if (!!((x == NIM_NIL))) goto LA7;
{			result = x;
}		}
		LA7: ;
}	}
	LA3: ;
	popFrame();
	return result;
}

N_NIMCALL(void, FieldDiscriminantCheck)(NI olddiscval, NI newdiscval, TNimNode** a, NI L) {
	nimfr("FieldDiscriminantCheck", "assign.nim")
	nimln(231, "assign.nim");
	TNimNode* oldbranch = selectbranch_84056(olddiscval, L, a);
	nimln(232, "assign.nim");
	TNimNode* newbranch = selectbranch_84056(newdiscval, L, a);
	nimln(233, "assign.nim");
	{
		NIM_BOOL LOC3;
		Fielderror3457* e_84119;
		NimStringDesc* LOC7;
		LOC3 = 0;
		LOC3 = !((newbranch == oldbranch));
		if (!(LOC3)) goto LA4;
		LOC3 = !((olddiscval == ((NI) 0)));
		LA4: ;
		if (!LOC3) goto LA5;
{		e_84119 = 0;
		nimln(2278, "system.nim");
		e_84119 = (Fielderror3457*) newObj((&NTI22001), sizeof(Fielderror3457));
		(*e_84119).m_type = (&NTI3457);
		nimln(2279, "system.nim");
		LOC7 = 0;
		LOC7 = (*e_84119).message; (*e_84119).message = copyStringRC1(((NimStringDesc*) &TMP78));
		if (LOC7) nimGCunrefNoCycle(LOC7);
		nimln(2280, "system.nim");
		raiseException((Exception*)e_84119, "FieldError");
}	}
	LA5: ;
	popFrame();
}

N_NIMCALL(void, initreprclosure_84801)(Treprclosure84714& cl) {
	nimfr("initReprClosure", "repr.nim")
	nimln(138, "repr.nim");
	init_46677(cl.marked);
	nimln(139, "repr.nim");
	cl.recdepth = ((NI) -1);
	nimln(140, "repr.nim");
	cl.indent = ((NI) 0);
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprEnum)(NI e_84529, TNimType* typ) {
	NimStringDesc* result;
	NI LOC1;
	NimStringDesc* LOC26;
	NimStringDesc* LOC27;
	nimfr("reprEnum", "repr.nim")
{	result = 0;
	nimln(64, "repr.nim");
	LOC1 = 0;
	{
		if (!((*typ).size == ((NI) 1))) goto LA4;
{		LOC1 = ((NI) ((NI)(e_84529 & ((NI) 255))));
}	}
	goto LA2;
	LA4: ;
	{
		nimln(65, "repr.nim");
		if (!((*typ).size == ((NI) 2))) goto LA7;
{		LOC1 = ((NI) ((NI)(e_84529 & ((NI) 65535))));
}	}
	goto LA2;
	LA7: ;
	{
		LOC1 = e_84529;
	}
	LA2: ;
	NI e = LOC1;
	nimln(69, "repr.nim");
	{
		if (!!((((*typ).flags &(1<<((((NU8) 2))&7)))!=0))) goto LA12;
{		nimln(70, "repr.nim");
		{
			if (!((NU64)(e) < (NU64)((*(*typ).node).len))) goto LA16;
{			nimln(71, "repr.nim");
			result = cstrToNimstr((*(*(*typ).node).sons[(e)- 0]).name);
			goto BeforeRet;
}		}
		LA16: ;
}	}
	goto LA10;
	LA12: ;
	{
		nimln(74, "repr.nim");
		TNimNode* n = (*typ).node;
		nimln(75, "repr.nim");
		TNimNode** s = (*n).sons;
		{
			NI i_84568;
			NI HEX3Atmp_84570;
			i_84568 = 0;
			HEX3Atmp_84570 = 0;
			nimln(76, "repr.nim");
			HEX3Atmp_84570 = (NI)((*n).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_84573 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_84573 <= HEX3Atmp_84570)) goto LA21;
					nimln(1600, "system.nim");
					i_84568 = res_84573;
					nimln(77, "repr.nim");
					{
						if (!((*s[(i_84568)- 0]).offset == e)) goto LA24;
{						result = cstrToNimstr((*s[(i_84568)- 0]).name);
						goto BeforeRet;
}					}
					LA24: ;
					nimln(1619, "system.nim");
					res_84573 += ((NI) 1);
				} LA21: ;
			}
		}
	}
	LA10: ;
	nimln(78, "repr.nim");
	LOC26 = 0;
	LOC27 = 0;
	LOC27 = nimIntToStr(e);
	LOC26 = rawNewString(LOC27->len + 16);
appendString(LOC26, LOC27);
appendString(LOC26, ((NimStringDesc*) &TMP82));
	result = LOC26;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, reprBool)(NIM_BOOL x) {
	NimStringDesc* result;
	nimfr("reprBool", "repr.nim")
	result = 0;
	nimln(50, "repr.nim");
	{
		if (!x) goto LA3;
{		result = copyString(((NimStringDesc*) &TMP23));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(51, "repr.nim");
		result = copyString(((NimStringDesc*) &TMP24));
	}
	LA1: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, reprInt)(NI64 x) {
	NimStringDesc* result;
	nimfr("reprInt", "repr.nim")
{	result = 0;
	nimln(15, "repr.nim");
	result = nimInt64ToStr(x);
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, reprChar)(NIM_CHAR x) {
	NimStringDesc* result;
	nimfr("reprChar", "repr.nim")
	result = 0;
	nimln(54, "repr.nim");
	result = copyString(((NimStringDesc*) &TMP83));
	nimln(55, "repr.nim");
	switch (((NU8)(x))) {
	case 34:
	{
		nimln(56, "repr.nim");
		result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP84));
	}
	break;
	case 92:
	{
		nimln(57, "repr.nim");
		result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP85));
	}
	break;
	case 128 ... 255:
	case 0 ... 31:
	{
		NimStringDesc* LOC4;
		NimStringDesc* LOC5;
		nimln(58, "repr.nim");
		LOC4 = 0;
		LOC5 = 0;
		LOC5 = reprInt(((NI64) (((NU8)(x)))));
		LOC4 = rawNewString(LOC5->len + 1);
appendString(LOC4, ((NimStringDesc*) &TMP86));
appendString(LOC4, LOC5);
		result = resizeString(result, LOC4->len + 0);
appendString(result, LOC4);
	}
	break;
	default:
	{
		nimln(59, "repr.nim");
		result = addChar(result, x);
	}
	break;
	}
	nimln(60, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP83));
	popFrame();
	return result;
}

N_NIMCALL(void, addsetelem_84594)(NimStringDesc*& result, NI elem, TNimType* typ) {
	nimfr("addSetElem", "repr.nim")
	nimln(84, "repr.nim");
	switch ((*typ).kind) {
	case ((NU8) 14):
	{
		NimStringDesc* LOC2;
		nimln(85, "repr.nim");
		LOC2 = 0;
		LOC2 = reprEnum(elem, typ);
		result = resizeString(result, LOC2->len + 0);
appendString(result, LOC2);
	}
	break;
	case ((NU8) 1):
	{
		NimStringDesc* LOC4;
		nimln(86, "repr.nim");
		LOC4 = 0;
		LOC4 = reprBool(((NIM_BOOL) (elem)));
		result = resizeString(result, LOC4->len + 0);
appendString(result, LOC4);
	}
	break;
	case ((NU8) 2):
	{
		NimStringDesc* LOC6;
		nimln(87, "repr.nim");
		LOC6 = 0;
		LOC6 = reprChar(((NIM_CHAR) (((NI) (elem)))));
		result = resizeString(result, LOC6->len + 0);
appendString(result, LOC6);
	}
	break;
	case ((NU8) 20):
	{
		nimln(88, "repr.nim");
		addsetelem_84594(result, elem, (*typ).base);
	}
	break;
	case ((NU8) 31) ... ((NU8) 35):
	case ((NU8) 41):
	case ((NU8) 42):
	{
		NimStringDesc* LOC9;
		nimln(89, "repr.nim");
		LOC9 = 0;
		LOC9 = reprInt(((NI64) (elem)));
		result = resizeString(result, LOC9->len + 0);
appendString(result, LOC9);
	}
	break;
	default:
	{
		nimln(91, "repr.nim");
		result = resizeString(result, 16);
appendString(result, ((NimStringDesc*) &TMP82));
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, reprsetaux_84604)(NimStringDesc*& result, void* p, TNimType* typ) {
	NI64 u;
	nimfr("reprSetAux", "repr.nim")
	nimln(95, "repr.nim");
	NI elemcounter = ((NI) 0);
	nimln(97, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP80));
	u = 0;
	nimln(99, "repr.nim");
	switch ((*typ).size) {
	case ((NI) 1):
	{
		nimln(100, "repr.nim");
		u = ((NI64)(NU64)(NU8)((*((NI8*) (p)))));
	}
	break;
	case ((NI) 2):
	{
		nimln(101, "repr.nim");
		u = ((NI64)(NU64)(NU16)((*((NI16*) (p)))));
	}
	break;
	case ((NI) 4):
	{
		nimln(102, "repr.nim");
		u = ((NI64)(NU64)(NU32)((*((NI32*) (p)))));
	}
	break;
	case ((NI) 8):
	{
		nimln(103, "repr.nim");
		u = (*((NI64*) (p)));
	}
	break;
	default:
	{
		nimln(105, "repr.nim");
		NI8* a = ((NI8*) (p));
		{
			NI i_84627;
			NI HEX3Atmp_84668;
			i_84627 = 0;
			HEX3Atmp_84668 = 0;
			nimln(106, "repr.nim");
			HEX3Atmp_84668 = (NI)((NI)((*typ).size * ((NI) 8)) - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_84671 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_84671 <= HEX3Atmp_84668)) goto LA8;
					nimln(1600, "system.nim");
					i_84627 = res_84671;
					nimln(107, "repr.nim");
					{
						if (!!(((NI)(((NI)(NU)(NU8)(a[((NI)(i_84627 / ((NI) 8)))- 0])) & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(i_84627 % ((NI) 8))))))) == ((NI) 0)))) goto LA11;
{						nimln(108, "repr.nim");
						{
							if (!(((NI) 0) < elemcounter)) goto LA15;
{							result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP81));
}						}
						LA15: ;
						nimln(109, "repr.nim");
						addsetelem_84594(result, (NI)(i_84627 + (*(*typ).node).len), (*typ).base);
						nimln(110, "repr.nim");
						elemcounter += ((NI) 1);
}					}
					LA11: ;
					nimln(1619, "system.nim");
					res_84671 += ((NI) 1);
				} LA8: ;
			}
		}
	}
	break;
	}
	nimln(111, "repr.nim");
	{
		if (!((*typ).size <= ((NI) 8))) goto LA19;
{		{
			NI i_84650;
			i_84650 = 0;
			nimln(1598, "system.nim");
			NI res_84679 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_84679 <= ((NI) 63))) goto LA23;
					nimln(1600, "system.nim");
					i_84650 = res_84679;
					nimln(113, "repr.nim");
					{
						if (!!(((NI64)(u & (NI64)((NU64)(IL64(1)) << (NU64)(((NI64) (i_84650))))) == IL64(0)))) goto LA26;
{						nimln(114, "repr.nim");
						{
							if (!(((NI) 0) < elemcounter)) goto LA30;
{							result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP81));
}						}
						LA30: ;
						nimln(115, "repr.nim");
						addsetelem_84594(result, (NI)(i_84650 + (*(*typ).node).len), (*typ).base);
						nimln(116, "repr.nim");
						elemcounter += ((NI) 1);
}					}
					LA26: ;
					nimln(1619, "system.nim");
					res_84679 += ((NI) 1);
				} LA23: ;
			}
		}
}	}
	LA19: ;
	nimln(117, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP87));
	popFrame();
}

N_NIMCALL(void, reprarray_85648)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl) {
	nimfr("reprArray", "repr.nim")
	nimln(156, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP88));
	nimln(157, "repr.nim");
	NI bs = (*(*typ).base).size;
	{
		NI i_85667;
		NI HEX3Atmp_85673;
		i_85667 = 0;
		HEX3Atmp_85673 = 0;
		nimln(158, "repr.nim");
		HEX3Atmp_85673 = (NI)((NI)((*typ).size / bs) - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_85676 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_85676 <= HEX3Atmp_85673)) goto LA3;
				nimln(1600, "system.nim");
				i_85667 = res_85676;
				nimln(159, "repr.nim");
				{
					if (!(((NI) 0) < i_85667)) goto LA6;
{					result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP81));
}				}
				LA6: ;
				nimln(160, "repr.nim");
				repraux_85640(result, ((void*) ((NI)(((NI) (p)) + (NI)(i_85667 * bs)))), (*typ).base, cl);
				nimln(1619, "system.nim");
				res_85676 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(161, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP89));
	popFrame();
}

N_NIMCALL(void, reprrecordaux_85737)(NimStringDesc*& result, void* p, TNimNode* n, Treprclosure84714& cl) {
	nimfr("reprRecordAux", "repr.nim")
	nimln(178, "repr.nim");
	switch ((*n).kind) {
	case ((NU8) 0):
	{
	}
	break;
	case ((NU8) 1):
	{
		NimStringDesc* LOC3;
		nimln(181, "repr.nim");
		LOC3 = 0;
		LOC3 = cstrToNimstr((*n).name);
		result = resizeString(result, LOC3->len + 0);
appendString(result, LOC3);
		nimln(182, "repr.nim");
		result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP90));
		nimln(183, "repr.nim");
		repraux_85640(result, ((void*) ((NI)(((NI) (p)) + (*n).offset))), (*n).typ, cl);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_85813;
			NI HEX3Atmp_85836;
			i_85813 = 0;
			HEX3Atmp_85836 = 0;
			nimln(185, "repr.nim");
			HEX3Atmp_85836 = (NI)((*n).len - ((NI) 1));
			nimln(1598, "system.nim");
			NI res_85839 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					if (!(res_85839 <= HEX3Atmp_85836)) goto LA7;
					nimln(1600, "system.nim");
					i_85813 = res_85839;
					nimln(186, "repr.nim");
					{
						if (!(((NI) 0) < i_85813)) goto LA10;
{						result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP91));
}					}
					LA10: ;
					nimln(187, "repr.nim");
					reprrecordaux_85737(result, p, (*n).sons[(i_85813)- 0], cl);
					nimln(1619, "system.nim");
					res_85839 += ((NI) 1);
				} LA7: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		nimln(189, "repr.nim");
		TNimNode* m = selectbranch_26810(p, n);
		nimln(190, "repr.nim");
		repraux_85640(result, ((void*) ((NI)(((NI) (p)) + (*n).offset))), (*n).typ, cl);
		nimln(191, "repr.nim");
		{
			if (!!((m == NIM_NIL))) goto LA15;
{			reprrecordaux_85737(result, p, m, cl);
}		}
		LA15: ;
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, reprrecord_85857)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl) {
	nimfr("reprRecord", "repr.nim")
	nimln(195, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP88));
	nimln(196, "repr.nim");
	NI oldlen = (result ? result->len : 0);
	nimln(197, "repr.nim");
	reprrecordaux_85737(result, p, (*typ).node, cl);
	nimln(198, "repr.nim");
	{
		if (!!(((*typ).base == NIM_NIL))) goto LA3;
{		nimln(199, "repr.nim");
		{
			if (!!((oldlen == (result ? result->len : 0)))) goto LA7;
{			result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP91));
}		}
		LA7: ;
		nimln(200, "repr.nim");
		reprrecordaux_85737(result, p, (*(*typ).base).node, cl);
}	}
	LA3: ;
	nimln(201, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP89));
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprPointer)(void* x) {
	NimStringDesc* result;
	TY84423 buf;
	int LOC1;
	nimfr("reprPointer", "repr.nim")
{	result = 0;
	memset((void*)buf, 0, sizeof(buf));
	nimln(20, "repr.nim");
	LOC1 = 0;
	LOC1 = sprintf(((NCSTRING) (buf)), "%p", x);
	nimln(21, "repr.nim");
	result = cstrToNimstr(((NCSTRING) (buf)));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, reprref_85885)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl) {
	NimStringDesc* LOC1;
	NimStringDesc* LOC2;
	nimfr("reprRef", "repr.nim")
	nimln(210, "repr.nim");
	Tcell46547* cell = usrtocell_50047(p);
	nimln(211, "repr.nim");
	LOC1 = 0;
	LOC2 = 0;
	LOC2 = reprPointer(p);
	LOC1 = rawNewString(LOC2->len + 4);
appendString(LOC1, ((NimStringDesc*) &TMP93));
appendString(LOC1, LOC2);
	result = resizeString(result, LOC1->len + 0);
appendString(result, LOC1);
	nimln(212, "repr.nim");
	{
		NIM_BOOL LOC5;
		LOC5 = 0;
		LOC5 = contains_47223((&cl.marked), cell);
		if (!!(LOC5)) goto LA6;
{		nimln(214, "repr.nim");
		incl_47265(cl.marked, cell);
		nimln(215, "repr.nim");
		result = resizeString(result, 5);
appendString(result, ((NimStringDesc*) &TMP94));
		nimln(216, "repr.nim");
		repraux_85640(result, p, (*typ).base, cl);
}	}
	LA6: ;
	popFrame();
}

N_NIMCALL(void, reprsequence_85692)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl) {
	NimStringDesc* LOC5;
	NimStringDesc* LOC6;
	nimfr("reprSequence", "repr.nim")
{	nimln(165, "repr.nim");
	{
		if (!(p == NIM_NIL)) goto LA3;
{		nimln(166, "repr.nim");
		result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP92));
		nimln(167, "repr.nim");
		goto BeforeRet;
}	}
	LA3: ;
	nimln(168, "repr.nim");
	LOC5 = 0;
	LOC6 = 0;
	LOC6 = reprPointer(p);
	LOC5 = rawNewString(LOC6->len + 1);
appendString(LOC5, LOC6);
appendString(LOC5, ((NimStringDesc*) &TMP88));
	result = resizeString(result, LOC5->len + 0);
appendString(result, LOC5);
	nimln(169, "repr.nim");
	NI bs = (*(*typ).base).size;
	{
		NI i_85711;
		NI HEX3Atmp_85718;
		i_85711 = 0;
		HEX3Atmp_85718 = 0;
		nimln(170, "repr.nim");
		HEX3Atmp_85718 = (NI)((*((TGenericSeq*) (p))).len - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_85721 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_85721 <= HEX3Atmp_85718)) goto LA9;
				nimln(1600, "system.nim");
				i_85711 = res_85721;
				nimln(171, "repr.nim");
				{
					if (!(((NI) 0) < i_85711)) goto LA12;
{					result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP81));
}				}
				LA12: ;
				nimln(172, "repr.nim");
				repraux_85640(result, ((void*) ((NI)((NI)(((NI) (p)) + ((NI) 16)) + (NI)(i_85711 * bs)))), (*typ).base, cl);
				nimln(1619, "system.nim");
				res_85721 += ((NI) 1);
			} LA9: ;
		}
	}
	nimln(174, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP89));
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, reprstraux_84442)(NimStringDesc*& result, NimStringDesc* s) {
	NimStringDesc* LOC5;
	NimStringDesc* LOC6;
	nimfr("reprStrAux", "repr.nim")
{	nimln(29, "repr.nim");
	{
		if (!(((void*) (s)) == NIM_NIL)) goto LA3;
{		nimln(30, "repr.nim");
		result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP92));
		nimln(31, "repr.nim");
		goto BeforeRet;
}	}
	LA3: ;
	nimln(32, "repr.nim");
	LOC5 = 0;
	LOC6 = 0;
	LOC6 = reprPointer(((void*) (s)));
	LOC5 = rawNewString(LOC6->len + 1);
appendString(LOC5, LOC6);
appendString(LOC5, ((NimStringDesc*) &TMP95));
	result = resizeString(result, LOC5->len + 0);
appendString(result, LOC5);
	{
		NI i_84465;
		NI HEX3Atmp_84478;
		i_84465 = 0;
		HEX3Atmp_84478 = 0;
		nimln(33, "repr.nim");
		HEX3Atmp_84478 = ((s ? s->len : 0) - 1);
		nimln(1598, "system.nim");
		NI res_84481 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_84481 <= HEX3Atmp_84478)) goto LA9;
				nimln(1600, "system.nim");
				i_84465 = res_84481;
				nimln(34, "repr.nim");
				NIM_CHAR c = s->data[i_84465];
				nimln(35, "repr.nim");
				switch (((NU8)(c))) {
				case 34:
				{
					nimln(36, "repr.nim");
					result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP84));
				}
				break;
				case 92:
				{
					nimln(37, "repr.nim");
					result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP85));
				}
				break;
				case 10:
				{
					nimln(38, "repr.nim");
					result = resizeString(result, 7);
appendString(result, ((NimStringDesc*) &TMP96));
				}
				break;
				case 128 ... 255:
				case 0 ... 9:
				case 11 ... 31:
				{
					NimStringDesc* LOC14;
					NimStringDesc* LOC15;
					nimln(40, "repr.nim");
					LOC14 = 0;
					LOC15 = 0;
					LOC15 = reprInt(((NI64) (((NU8)(c)))));
					LOC14 = rawNewString(LOC15->len + 1);
appendString(LOC14, ((NimStringDesc*) &TMP86));
appendString(LOC14, LOC15);
					result = resizeString(result, LOC14->len + 0);
appendString(result, LOC14);
				}
				break;
				default:
				{
					nimln(42, "repr.nim");
					result = addChar(result, c);
				}
				break;
				}
				nimln(1619, "system.nim");
				res_84481 += ((NI) 1);
			} LA9: ;
		}
	}
	nimln(43, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP95));
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, repraux_85640)(NimStringDesc*& result, void* p, TNimType* typ, Treprclosure84714& cl) {
	nimfr("reprAux", "repr.nim")
{	nimln(220, "repr.nim");
	{
		if (!(cl.recdepth == ((NI) 0))) goto LA3;
{		nimln(221, "repr.nim");
		result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP79));
		nimln(222, "repr.nim");
		goto BeforeRet;
}	}
	LA3: ;
	nimln(223, "repr.nim");
	cl.recdepth -= ((NI) 1);
	nimln(224, "repr.nim");
	switch ((*typ).kind) {
	case ((NU8) 19):
	{
		nimln(225, "repr.nim");
		reprsetaux_84604(result, p, typ);
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		nimln(226, "repr.nim");
		reprarray_85648(result, p, typ, cl);
	}
	break;
	case ((NU8) 18):
	{
		nimln(227, "repr.nim");
		reprrecord_85857(result, p, typ, cl);
	}
	break;
	case ((NU8) 17):
	{
		nimln(229, "repr.nim");
		TNimType* t = (*((TNimType**) (p)));
		nimln(230, "repr.nim");
		reprrecord_85857(result, p, t, cl);
	}
	break;
	case ((NU8) 22):
	case ((NU8) 21):
	{
		nimln(233, "repr.nim");
		{
			if (!((*((void**) (p))) == NIM_NIL)) goto LA12;
{			result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP92));
}		}
		goto LA10;
		LA12: ;
		{
			nimln(234, "repr.nim");
			reprref_85885(result, (*((void**) (p))), typ, cl);
		}
		LA10: ;
	}
	break;
	case ((NU8) 24):
	{
		nimln(236, "repr.nim");
		reprsequence_85692(result, (*((void**) (p))), typ, cl);
	}
	break;
	case ((NU8) 31):
	{
		NimStringDesc* LOC17;
		nimln(237, "repr.nim");
		LOC17 = 0;
		LOC17 = nimIntToStr((*((NI*) (p))));
		result = resizeString(result, LOC17->len + 0);
appendString(result, LOC17);
	}
	break;
	case ((NU8) 32):
	{
		NimStringDesc* LOC19;
		nimln(238, "repr.nim");
		LOC19 = 0;
		LOC19 = nimIntToStr(((NI) ((*((NI8*) (p))))));
		result = resizeString(result, LOC19->len + 0);
appendString(result, LOC19);
	}
	break;
	case ((NU8) 33):
	{
		NimStringDesc* LOC21;
		nimln(239, "repr.nim");
		LOC21 = 0;
		LOC21 = nimIntToStr(((NI) ((*((NI16*) (p))))));
		result = resizeString(result, LOC21->len + 0);
appendString(result, LOC21);
	}
	break;
	case ((NU8) 34):
	{
		NimStringDesc* LOC23;
		nimln(240, "repr.nim");
		LOC23 = 0;
		LOC23 = nimIntToStr(((NI) ((*((NI32*) (p))))));
		result = resizeString(result, LOC23->len + 0);
appendString(result, LOC23);
	}
	break;
	case ((NU8) 35):
	{
		NimStringDesc* LOC25;
		nimln(241, "repr.nim");
		LOC25 = 0;
		LOC25 = nimInt64ToStr((*((NI64*) (p))));
		result = resizeString(result, LOC25->len + 0);
appendString(result, LOC25);
	}
	break;
	case ((NU8) 41):
	{
		NimStringDesc* LOC27;
		nimln(242, "repr.nim");
		LOC27 = 0;
		LOC27 = nimIntToStr(((NI)(NU)(NU8)((*((NI8*) (p))))));
		result = resizeString(result, LOC27->len + 0);
appendString(result, LOC27);
	}
	break;
	case ((NU8) 42):
	{
		NimStringDesc* LOC29;
		nimln(243, "repr.nim");
		LOC29 = 0;
		LOC29 = nimIntToStr(((NI)(NU)(NU16)((*((NI16*) (p))))));
		result = resizeString(result, LOC29->len + 0);
appendString(result, LOC29);
	}
	break;
	case ((NU8) 36):
	{
		NimStringDesc* LOC31;
		nimln(245, "repr.nim");
		LOC31 = 0;
		LOC31 = nimFloatToStr((*((NF*) (p))));
		result = resizeString(result, LOC31->len + 0);
appendString(result, LOC31);
	}
	break;
	case ((NU8) 37):
	{
		NimStringDesc* LOC33;
		nimln(246, "repr.nim");
		LOC33 = 0;
		LOC33 = nimFloatToStr(((NF) ((*((NF32*) (p))))));
		result = resizeString(result, LOC33->len + 0);
appendString(result, LOC33);
	}
	break;
	case ((NU8) 38):
	{
		NimStringDesc* LOC35;
		nimln(247, "repr.nim");
		LOC35 = 0;
		LOC35 = nimFloatToStr((*((NF*) (p))));
		result = resizeString(result, LOC35->len + 0);
appendString(result, LOC35);
	}
	break;
	case ((NU8) 14):
	{
		NimStringDesc* LOC37;
		nimln(248, "repr.nim");
		LOC37 = 0;
		LOC37 = reprEnum((*((NI*) (p))), typ);
		result = resizeString(result, LOC37->len + 0);
appendString(result, LOC37);
	}
	break;
	case ((NU8) 1):
	{
		NimStringDesc* LOC39;
		nimln(249, "repr.nim");
		LOC39 = 0;
		LOC39 = reprBool((*((NIM_BOOL*) (p))));
		result = resizeString(result, LOC39->len + 0);
appendString(result, LOC39);
	}
	break;
	case ((NU8) 2):
	{
		NimStringDesc* LOC41;
		nimln(250, "repr.nim");
		LOC41 = 0;
		LOC41 = reprChar((*((NIM_CHAR*) (p))));
		result = resizeString(result, LOC41->len + 0);
appendString(result, LOC41);
	}
	break;
	case ((NU8) 28):
	{
		nimln(251, "repr.nim");
		reprstraux_84442(result, (*((NimStringDesc**) (p))));
	}
	break;
	case ((NU8) 29):
	{
		NimStringDesc* LOC44;
		nimln(252, "repr.nim");
		LOC44 = 0;
		LOC44 = cstrToNimstr((*((NCSTRING*) (p))));
		reprstraux_84442(result, LOC44);
	}
	break;
	case ((NU8) 20):
	{
		nimln(253, "repr.nim");
		repraux_85640(result, p, (*typ).base, cl);
	}
	break;
	case ((NU8) 25):
	case ((NU8) 26):
	{
		nimln(255, "repr.nim");
		{
			if (!((*((void**) (p))) == NIM_NIL)) goto LA49;
{			result = resizeString(result, 3);
appendString(result, ((NimStringDesc*) &TMP92));
}		}
		goto LA47;
		LA49: ;
		{
			NimStringDesc* LOC52;
			nimln(256, "repr.nim");
			LOC52 = 0;
			LOC52 = reprPointer((*((void**) (p))));
			result = resizeString(result, LOC52->len + 0);
appendString(result, LOC52);
		}
		LA47: ;
	}
	break;
	default:
	{
		nimln(258, "repr.nim");
		result = resizeString(result, 15);
appendString(result, ((NimStringDesc*) &TMP97));
	}
	break;
	}
	nimln(259, "repr.nim");
	cl.recdepth += ((NI) 1);
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, deinitreprclosure_85205)(Treprclosure84714& cl) {
	nimfr("deinitReprClosure", "repr.nim")
	nimln(143, "repr.nim");
	deinit_46688(cl.marked);
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprAny)(void* p_84403, TNimType* typ) {
	NimStringDesc* result;
	Treprclosure84714 cl;
	nimfr("reprAny", "repr.nim")
	result = 0;
	memset((void*)(&cl), 0, sizeof(cl));
	nimln(278, "repr.nim");
	initreprclosure_84801(cl);
	nimln(279, "repr.nim");
	result = copyString(((NimStringDesc*) &TMP2));
	nimln(280, "repr.nim");
	{
		if (!((983056 &(IL64(1)<<(((*typ).kind)&IL64(63))))!=0)) goto LA3;
{		nimln(281, "repr.nim");
		repraux_85640(result, p_84403, typ, cl);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(283, "repr.nim");
		void* p = p_84403;
		nimln(284, "repr.nim");
		repraux_85640(result, ((void*) ((&p))), typ, cl);
	}
	LA1: ;
	nimln(285, "repr.nim");
	result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP8));
	nimln(286, "repr.nim");
	deinitreprclosure_85205(cl);
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, reprFloat)(NF x) {
	NimStringDesc* result;
	nimfr("reprFloat", "repr.nim")
{	result = 0;
	nimln(16, "repr.nim");
	result = nimFloatToStr(x);
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_6401)(NU64 x) {
	NimStringDesc* result;
	TY84423 buf;
	int LOC1;
	nimfr("$", "repr.nim")
{	result = 0;
	memset((void*)buf, 0, sizeof(buf));
	nimln(25, "repr.nim");
	LOC1 = 0;
	LOC1 = sprintf(((NCSTRING) (buf)), "%llu", x);
	nimln(26, "repr.nim");
	result = cstrToNimstr(((NCSTRING) (buf)));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, reprStr)(NimStringDesc* s) {
	NimStringDesc* result;
	nimfr("reprStr", "repr.nim")
	result = 0;
	nimln(46, "repr.nim");
	result = copyString(((NimStringDesc*) &TMP2));
	nimln(47, "repr.nim");
	reprstraux_84442(result, s);
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, reprSet)(void* p, TNimType* typ) {
	NimStringDesc* result;
	nimfr("reprSet", "repr.nim")
	result = 0;
	nimln(120, "repr.nim");
	result = copyString(((NimStringDesc*) &TMP2));
	nimln(121, "repr.nim");
	reprsetaux_84604(result, p, typ);
	popFrame();
	return result;
}

N_NIMCALL(void, reprbreak_85604)(NimStringDesc*& result, Treprclosure84714* cl) {
	nimfr("reprBreak", "repr.nim")
	nimln(148, "repr.nim");
	result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP8));
	{
		NI i_85619;
		NI HEX3Atmp_85621;
		i_85619 = 0;
		HEX3Atmp_85621 = 0;
		nimln(149, "repr.nim");
		HEX3Atmp_85621 = (NI)((*cl).indent - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_85624 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_85624 <= HEX3Atmp_85621)) goto LA3;
				nimln(1600, "system.nim");
				i_85619 = res_85624;
				nimln(149, "repr.nim");
				result = addChar(result, 32);
				nimln(1619, "system.nim");
				res_85624 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprOpenArray)(void* p, NI length, TNimType* elemtyp) {
	NimStringDesc* result;
	Treprclosure84714 cl;
	nimfr("reprOpenArray", "repr.nim")
	result = 0;
	memset((void*)(&cl), 0, sizeof(cl));
	nimln(265, "repr.nim");
	initreprclosure_84801(cl);
	nimln(266, "repr.nim");
	result = copyString(((NimStringDesc*) &TMP88));
	nimln(267, "repr.nim");
	NI bs = (*elemtyp).size;
	{
		NI i_86479;
		NI HEX3Atmp_86487;
		i_86479 = 0;
		HEX3Atmp_86487 = 0;
		nimln(268, "repr.nim");
		HEX3Atmp_86487 = (NI)(length - ((NI) 1));
		nimln(1598, "system.nim");
		NI res_86490 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				if (!(res_86490 <= HEX3Atmp_86487)) goto LA3;
				nimln(1600, "system.nim");
				i_86479 = res_86490;
				nimln(269, "repr.nim");
				{
					if (!(((NI) 0) < i_86479)) goto LA6;
{					result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TMP81));
}				}
				LA6: ;
				nimln(270, "repr.nim");
				repraux_85640(result, ((void*) ((NI)(((NI) (p)) + (NI)(i_86479 * bs)))), elemtyp, cl);
				nimln(1619, "system.nim");
				res_86490 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(271, "repr.nim");
	result = resizeString(result, 1);
appendString(result, ((NimStringDesc*) &TMP89));
	nimln(272, "repr.nim");
	deinitreprclosure_85205(cl);
	popFrame();
	return result;
}

static N_INLINE(Exception*, getCurrentException)(void) {
	Exception* result;
	nimfr("getCurrentException", "system.nim")
	result = 0;
	nimln(2726, "system.nim");
	result = currexception_17045;
	popFrame();
	return result;
}

static N_INLINE(NimStringDesc*, getcurrentexceptionmsg_86637)(void) {
	NimStringDesc* result;
	nimfr("getCurrentExceptionMsg", "system.nim")
{	result = 0;
	nimln(2731, "system.nim");
	Exception* e = getCurrentException();
	nimln(2732, "system.nim");
	{
		if (!(e == NIM_NIL)) goto LA3;
{		result = copyString(((NimStringDesc*) &TMP2));
}	}
	goto LA1;
	LA3: ;
	{
		result = copyString((*e).message);
	}
	LA1: ;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result;
}

N_NIMCALL(void, onraise_86656)(TY15609 action) {
	nimfr("onRaise", "system.nim")
	nimln(2740, "system.nim");
	{
		if (!!(exchandler_17043 == 0)) goto LA3;
{		nimln(2741, "system.nim");
		(*exchandler_17043).hasRaiseAction = NIM_TRUE;
		nimln(2742, "system.nim");
		unsureAsgnRef((void**) (&(*exchandler_17043).raiseAction.ClEnv), action.ClEnv);
		(*exchandler_17043).raiseAction.ClPrc = action.ClPrc;
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, setcurrentexception_86674)(Exception* exc) {
	nimfr("setCurrentException", "system.nim")
	nimln(2748, "system.nim");
	asgnRef((void**) (&currexception_17045), exc);
	popFrame();
}

N_NIMCALL(void, quit_87781)(NimStringDesc* errormsg, NI errorcode) {
	nimfr("quit", "system.nim")
	nimln(2848, "system.nim");
	printf("%s\015\012", errormsg? (errormsg)->data:"nil");
	nimln(2849, "system.nim");
	exit(errorcode);
	popFrame();
}

static N_INLINE(NF, HEX2F_87799)(NI x, NI y) {
	NF result;
	nimfr("/", "system.nim")
	result = 0;
	nimln(2856, "system.nim");
	result = ((NF)(((double) (x))) / (NF)(((double) (y))));
	popFrame();
	return result;
}

static N_INLINE(NimStringDesc*, HEX5BHEX5D_87854)(NimStringDesc* s, Slice87861 x) {
	NimStringDesc* result;
	nimfr("[]", "system.nim")
	result = 0;
	nimln(2880, "system.nim");
	result = copyStrLast(s, x.a, x.b);
	popFrame();
	return result;
}

N_NIMCALL(void, HEX5BHEX5DHEX3D_87871)(NimStringDesc*& s, Slice87861 x, NimStringDesc* b) {
	NI TMP98;
	NI TMP99;
	nimfr("[]=", "system.nim")
	nimln(2891, "system.nim");
	NI a = x.a;
	nimln(2892, "system.nim");
	TMP98 = subInt(x.b, a);
	TMP99 = addInt((NI)(TMP98), ((NI) 1));
	NI L = (NI)(TMP99);
	nimln(2893, "system.nim");
	{
		if (!(L == (b ? b->len : 0))) goto LA3;
{		{
			NI i_87899;
			NI HEX3Atmp_87954;
			i_87899 = 0;
			HEX3Atmp_87954 = 0;
			nimln(2894, "system.nim");
			HEX3Atmp_87954 = subInt(L, 1);
			nimln(1598, "system.nim");
			NI res_87957 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					NI TMP100;
					NI TMP101;
					if (!(res_87957 <= HEX3Atmp_87954)) goto LA7;
					nimln(1600, "system.nim");
					i_87899 = res_87957;
					nimln(2894, "system.nim");
					TMP100 = addInt(i_87899, a);
					if ((NU)((NI)(TMP100)) > (NU)(s->len)) raiseIndexError();
					if ((NU)(i_87899) > (NU)(b->len)) raiseIndexError();
					s->data[(NI)(TMP100)] = b->data[i_87899];
					nimln(1619, "system.nim");
					TMP101 = addInt(res_87957, ((NI) 1));
					res_87957 = (NI)(TMP101);
				} LA7: ;
			}
		}
}	}
	goto LA1;
	LA3: ;
	{
		NI TMP102;
		NI TMP103;
		nimln(2863, "system.nim");
		NI slen_87901 = (s ? s->len : 0);
		nimln(2864, "system.nim");
		TMP102 = subInt((b ? b->len : 0), L);
		NI shift_87903 = (NI)(TMP102);
		nimln(2865, "system.nim");
		TMP103 = addInt(slen_87901, shift_87903);
		NI newlen_87905 = (NI)(TMP103);
		nimln(2866, "system.nim");
		{
			if (!(((NI) 0) < shift_87903)) goto LA11;
{			nimln(2868, "system.nim");
			s = setLengthStr(s, ((NI)chckRange(newlen_87905, ((NI) 0), ((NI) IL64(9223372036854775807)))));
			{
				NI i_87907;
				NI HEX3Atmp_87962;
				NI HEX3Atmp_87963;
				NI TMP104;
				NI TMP105;
				NI TMP106;
				i_87907 = 0;
				HEX3Atmp_87962 = 0;
				HEX3Atmp_87963 = 0;
				nimln(2869, "system.nim");
				TMP104 = subInt(newlen_87905, ((NI) 1));
				HEX3Atmp_87962 = (NI)(TMP104);
				TMP105 = addInt(a, shift_87903);
				TMP106 = addInt((NI)(TMP105), ((NI) 1));
				HEX3Atmp_87963 = (NI)(TMP106);
				nimln(1586, "system.nim");
				NI res_87966 = HEX3Atmp_87962;
				{
					nimln(1587, "system.nim");
					while (1) {
						NI TMP107;
						NI TMP108;
						if (!(HEX3Atmp_87963 <= res_87966)) goto LA15;
						nimln(1588, "system.nim");
						i_87907 = res_87966;
						nimln(2869, "system.nim");
						if ((NU)(i_87907) > (NU)(s->len)) raiseIndexError();
						TMP107 = subInt(i_87907, shift_87903);
						if ((NU)((NI)(TMP107)) > (NU)(s->len)) raiseIndexError();
						s->data[i_87907] = s->data[(NI)(TMP107)];
						nimln(1589, "system.nim");
						TMP108 = subInt(res_87966, ((NI) 1));
						res_87966 = (NI)(TMP108);
					} LA15: ;
				}
			}
}		}
		goto LA9;
		LA11: ;
		{
			{
				NI i_87909;
				NI HEX3Atmp_87971;
				NI HEX3Atmp_87972;
				NI TMP109;
				NI TMP110;
				NI TMP111;
				i_87909 = 0;
				HEX3Atmp_87971 = 0;
				HEX3Atmp_87972 = 0;
				nimln(2871, "system.nim");
				TMP109 = addInt(a, (b ? b->len : 0));
				HEX3Atmp_87971 = (NI)(TMP109);
				TMP110 = subInt((s ? s->len : 0), ((NI) 1));
				TMP111 = addInt((NI)(TMP110), shift_87903);
				HEX3Atmp_87972 = (NI)(TMP111);
				nimln(1598, "system.nim");
				NI res_87975 = HEX3Atmp_87971;
				{
					nimln(1599, "system.nim");
					while (1) {
						NI TMP112;
						NI TMP113;
						if (!(res_87975 <= HEX3Atmp_87972)) goto LA19;
						nimln(1600, "system.nim");
						i_87909 = res_87975;
						nimln(2871, "system.nim");
						if ((NU)(i_87909) > (NU)(s->len)) raiseIndexError();
						TMP112 = subInt(i_87909, shift_87903);
						if ((NU)((NI)(TMP112)) > (NU)(s->len)) raiseIndexError();
						s->data[i_87909] = s->data[(NI)(TMP112)];
						nimln(1614, "system.nim");
						TMP113 = addInt(res_87975, ((NI) 1));
						res_87975 = (NI)(TMP113);
					} LA19: ;
				}
			}
			nimln(2873, "system.nim");
			s = setLengthStr(s, ((NI)chckRange(newlen_87905, ((NI) 0), ((NI) IL64(9223372036854775807)))));
		}
		LA9: ;
		{
			NI i_87911;
			NI HEX3Atmp_87980;
			i_87911 = 0;
			HEX3Atmp_87980 = 0;
			nimln(2875, "system.nim");
			HEX3Atmp_87980 = subInt((b ? b->len : 0), 1);
			nimln(1598, "system.nim");
			NI res_87983 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					NI TMP114;
					NI TMP115;
					if (!(res_87983 <= HEX3Atmp_87980)) goto LA22;
					nimln(1600, "system.nim");
					i_87911 = res_87983;
					nimln(2875, "system.nim");
					TMP114 = addInt(i_87911, a);
					if ((NU)((NI)(TMP114)) > (NU)(s->len)) raiseIndexError();
					if ((NU)(i_87911) > (NU)(b->len)) raiseIndexError();
					s->data[(NI)(TMP114)] = b->data[i_87911];
					nimln(1619, "system.nim");
					TMP115 = addInt(res_87983, ((NI) 1));
					res_87983 = (NI)(TMP115);
				} LA22: ;
			}
		}
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(NimStringDesc*, gorge_88404)(NimStringDesc* command, NimStringDesc* input) {
	NimStringDesc* result;
	nimfr("gorge", "system.nim")
	result = 0;
	popFrame();
	return result;
}

N_NIMCALL(NimStringDesc*, staticexec_88415)(NimStringDesc* command, NimStringDesc* input) {
	NimStringDesc* result;
	nimfr("staticExec", "system.nim")
	result = 0;
	popFrame();
	return result;
}

static N_INLINE(void, HEX2FHEX3D_88502)(NF& x, NF y) {
	nimfr("/=", "system.nim")
	nimln(3004, "system.nim");
	x = ((NF)(x) / (NF)(y));
	popFrame();
}
N_NIMCALL(void, TMP116)(void* p, NI op) {
	Assertionerror3447* a;
	a = (Assertionerror3447*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NOINLINE(void, raiseassert_88557)(NimStringDesc* msg) {
	Assertionerror3447* e_88562;
	NimStringDesc* LOC1;
	nimfr("raiseAssert", "system.nim")
	e_88562 = 0;
	nimln(2278, "system.nim");
	e_88562 = (Assertionerror3447*) newObj((&NTI88601), sizeof(Assertionerror3447));
	(*e_88562).m_type = (&NTI3447);
	nimln(2279, "system.nim");
	LOC1 = 0;
	LOC1 = (*e_88562).message; (*e_88562).message = copyStringRC1(msg);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2280, "system.nim");
	raiseException((Exception*)e_88562, "AssertionError");
	popFrame();
}

N_NIMCALL(void, failedassertimpl_88617)(NimStringDesc* msg) {
	nimfr("failedAssertImpl", "system.nim")
	nimln(3058, "system.nim");
	raiseassert_88557(msg);
	popFrame();
}

static N_INLINE(void, shallow_89224)(NimStringDesc*& s_89227) {
	nimfr("shallow", "system.nim")
	nimln(3151, "system.nim");
	TGenericSeq* s = ((TGenericSeq*) (s_89227));
	nimln(3152, "system.nim");
	(*s).reserved = (NI)((*s).reserved | ((NI) (IL64(-9223372036854775807) - IL64(1))));
	popFrame();
}

N_NIMCALL(void, insert_89601)(NimStringDesc*& x, NimStringDesc* item, NI i) {
	NI TMP117;
	NI TMP118;
	nimfr("insert", "system.nim")
	nimln(3172, "system.nim");
	NI xl = (x ? x->len : 0);
	nimln(3173, "system.nim");
	TMP117 = addInt(xl, (item ? item->len : 0));
	x = setLengthStr(x, ((NI)chckRange((NI)(TMP117), ((NI) 0), ((NI) IL64(9223372036854775807)))));
	nimln(3174, "system.nim");
	TMP118 = subInt(xl, ((NI) 1));
	NI j = (NI)(TMP118);
	{
		nimln(3175, "system.nim");
		while (1) {
			NI TMP119;
			NI TMP120;
			if (!(((NI) (i)) <= j)) goto LA2;
			nimln(3176, "system.nim");
			TMP119 = addInt(j, (item ? item->len : 0));
			if ((NU)((NI)(TMP119)) > (NU)(x->len)) raiseIndexError();
			if ((NU)(j) > (NU)(x->len)) raiseIndexError();
			x->data[(NI)(TMP119)] = x->data[j];
			nimln(3177, "system.nim");
			TMP120 = subInt(j, ((NI) 1));
			j = (NI)(TMP120);
		} LA2: ;
	}
	nimln(3178, "system.nim");
	j = ((NI) 0);
	{
		nimln(3179, "system.nim");
		while (1) {
			NI TMP121;
			NI TMP122;
			if (!(j < (item ? item->len : 0))) goto LA4;
			nimln(3180, "system.nim");
			TMP121 = addInt(j, ((NI) (i)));
			if ((NU)((NI)(TMP121)) > (NU)(x->len)) raiseIndexError();
			if ((NU)(j) > (NU)(item->len)) raiseIndexError();
			x->data[(NI)(TMP121)] = item->data[j];
			nimln(3181, "system.nim");
			TMP122 = addInt(j, ((NI) 1));
			j = (NI)(TMP122);
		} LA4: ;
	}
	popFrame();
}

N_NIMCALL(void, safeadd_90012)(NimStringDesc*& x, NIM_CHAR y) {
	nimfr("safeAdd", "system.nim")
	nimln(3203, "system.nim");
	{
		if (!(x == NIM_NIL)) goto LA3;
{		unsureAsgnRef((void**) (&x), copyString(((NimStringDesc*) &TMP2)));
}	}
	LA3: ;
	nimln(3204, "system.nim");
	x = addChar(x, y);
	popFrame();
}

N_NIMCALL(void, safeadd_90020)(NimStringDesc*& x, NimStringDesc* y) {
	nimfr("safeAdd", "system.nim")
	nimln(3207, "system.nim");
	{
		if (!(x == NIM_NIL)) goto LA3;
{		unsureAsgnRef((void**) (&x), copyString(y));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(3208, "system.nim");
		x = resizeString(x, y->len + 0);
appendString(x, y);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, locals_90204)(TNimObject* Result) {
	nimfr("locals", "system.nim")
	popFrame();
}

static N_INLINE(NimStringDesc*, copydeepstring_90427)(NimStringDesc* src) {
	NimStringDesc* result;
	nimfr("copyDeepString", "deepcopy.nim")
	result = 0;
	nimln(36, "deepcopy.nim");
	{
		NI TMP123;
		if (!!((src == NIM_NIL))) goto LA3;
{		nimln(37, "deepcopy.nim");
		result = rawNewStringNoInit((*src).len);
		nimln(38, "deepcopy.nim");
		(*result).len = (*src).len;
		nimln(39, "deepcopy.nim");
		TMP123 = addInt((*src).len, ((NI) 1));
		memcpy(((NCSTRING) ((*result).data)), ((NCSTRING) ((*src).data)), (NI)(TMP123));
}	}
	LA3: ;
	popFrame();
	return result;
}

N_NIMCALL(void, genericdeepcopyaux_90225)(void* dest, void* src, TNimNode* n) {
	nimfr("genericDeepCopyAux", "deepcopy.nim")
	nimln(13, "deepcopy.nim");
	NI d = ((NI) (dest));
	nimln(14, "deepcopy.nim");
	NI s = ((NI) (src));
	nimln(15, "deepcopy.nim");
	switch ((*n).kind) {
	case ((NU8) 1):
	{
		nimln(17, "deepcopy.nim");
		nimln(18, "deepcopy.nim");
		genericdeepcopyaux_90220(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((void*) ((NI)((NU64)(s) + (NU64)((*n).offset)))), (*n).typ);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_90261;
			NI HEX3Atmp_90406;
			NI TMP126;
			i_90261 = 0;
			HEX3Atmp_90406 = 0;
			nimln(20, "deepcopy.nim");
			TMP126 = subInt((*n).len, ((NI) 1));
			HEX3Atmp_90406 = (NI)(TMP126);
			nimln(1598, "system.nim");
			NI res_90409 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					NI TMP127;
					if (!(res_90409 <= HEX3Atmp_90406)) goto LA5;
					nimln(1600, "system.nim");
					i_90261 = res_90409;
					nimln(21, "deepcopy.nim");
					if ((NU)(i_90261) > (NU)(32767)) raiseIndexError();
					genericdeepcopyaux_90225(dest, src, (*n).sons[(i_90261)- 0]);
					nimln(1619, "system.nim");
					TMP127 = addInt(res_90409, ((NI) 1));
					res_90409 = (NI)(TMP127);
				} LA5: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		nimln(23, "deepcopy.nim");
		TNimNode* dd = selectbranch_26810(dest, n);
		nimln(24, "deepcopy.nim");
		TNimNode* m = selectbranch_26810(src, n);
		nimln(27, "deepcopy.nim");
		{
			NIM_BOOL LOC9;
			LOC9 = 0;
			LOC9 = !((m == dd));
			if (!(LOC9)) goto LA10;
			LOC9 = !((dd == NIM_NIL));
			LA10: ;
			if (!LOC9) goto LA11;
{			nimln(28, "deepcopy.nim");
			genericresetaux_82201(dest, dd);
}		}
		LA11: ;
		nimln(29, "deepcopy.nim");
		memcpy(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((void*) ((NI)((NU64)(s) + (NU64)((*n).offset)))), ((NI)chckRange((*(*n).typ).size, ((NI) 0), ((NI) IL64(9223372036854775807)))));
		nimln(31, "deepcopy.nim");
		{
			if (!!((m == NIM_NIL))) goto LA15;
{			nimln(32, "deepcopy.nim");
			genericdeepcopyaux_90225(dest, src, m);
}		}
		LA15: ;
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericdeepcopyaux_90220)(void* dest, void* src, TNimType* mt) {
	nimfr("genericDeepCopyAux", "deepcopy.nim")
{	nimln(43, "deepcopy.nim");
	NI d = ((NI) (dest));
	nimln(44, "deepcopy.nim");
	NI s = ((NI) (src));
	nimln(46, "deepcopy.nim");
	switch ((*mt).kind) {
	case ((NU8) 28):
	{
		nimln(48, "deepcopy.nim");
		void** x = ((void**) (dest));
		nimln(49, "deepcopy.nim");
		void* s2 = (*((void**) (s)));
		nimln(50, "deepcopy.nim");
		{
			if (!(s2 == NIM_NIL)) goto LA4;
{			nimln(51, "deepcopy.nim");
			unsureAsgnRef(x, s2);
}		}
		goto LA2;
		LA4: ;
		{
			NimStringDesc* LOC7;
			nimln(53, "deepcopy.nim");
			LOC7 = 0;
			LOC7 = copydeepstring_90427(((NimStringDesc*) (s2)));
			unsureAsgnRef(x, ((void*) (LOC7)));
		}
		LA2: ;
	}
	break;
	case ((NU8) 24):
	{
		nimln(55, "deepcopy.nim");
		void* s2 = (*((void**) (src)));
		nimln(56, "deepcopy.nim");
		TGenericSeq* seq = ((TGenericSeq*) (s2));
		nimln(57, "deepcopy.nim");
		void** x = ((void**) (dest));
		nimln(58, "deepcopy.nim");
		{
			if (!(s2 == NIM_NIL)) goto LA11;
{			nimln(59, "deepcopy.nim");
			unsureAsgnRef(x, s2);
			nimln(60, "deepcopy.nim");
			goto BeforeRet;
}		}
		LA11: ;
		nimln(62, "deepcopy.nim");
		unsureAsgnRef(x, newSeq(mt, (*seq).len));
		nimln(63, "deepcopy.nim");
		NI dst = ((NI) ((*((void**) (dest)))));
		{
			NI i_90812;
			NI HEX3Atmp_91032;
			NI TMP124;
			i_90812 = 0;
			HEX3Atmp_91032 = 0;
			nimln(64, "deepcopy.nim");
			TMP124 = subInt((*seq).len, ((NI) 1));
			HEX3Atmp_91032 = (NI)(TMP124);
			nimln(1598, "system.nim");
			NI res_91035 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					NI TMP125;
					if (!(res_91035 <= HEX3Atmp_91032)) goto LA15;
					nimln(1600, "system.nim");
					i_90812 = res_91035;
					nimln(65, "deepcopy.nim");
					nimln(66, "deepcopy.nim");
					nimln(67, "deepcopy.nim");
					genericdeepcopyaux_90220(((void*) ((NI)((NU64)((NI)((NU64)(dst) + (NU64)((NI)((NU64)(i_90812) * (NU64)((*(*mt).base).size))))) + (NU64)(((NI) 16))))), ((void*) ((NI)((NU64)((NI)((NU64)(((NI) (s2))) + (NU64)((NI)((NU64)(i_90812) * (NU64)((*(*mt).base).size))))) + (NU64)(((NI) 16))))), (*mt).base);
					nimln(1619, "system.nim");
					TMP125 = addInt(res_91035, ((NI) 1));
					res_91035 = (NI)(TMP125);
				} LA15: ;
			}
		}
	}
	break;
	case ((NU8) 17):
	{
		nimln(73, "deepcopy.nim");
		TNimType** pint = ((TNimType**) (dest));
		nimln(74, "deepcopy.nim");
		(*pint) = (*((TNimType**) (src)));
		nimln(75, "deepcopy.nim");
		{
			if (!!(((*mt).base == NIM_NIL))) goto LA19;
{			nimln(76, "deepcopy.nim");
			genericdeepcopyaux_90220(dest, src, (*mt).base);
}		}
		LA19: ;
		nimln(77, "deepcopy.nim");
		genericdeepcopyaux_90225(dest, src, (*mt).node);
	}
	break;
	case ((NU8) 18):
	{
		nimln(79, "deepcopy.nim");
		genericdeepcopyaux_90225(dest, src, (*mt).node);
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		{
			NI i_90892;
			NI HEX3Atmp_91044;
			NI TMP128;
			NI TMP129;
			i_90892 = 0;
			HEX3Atmp_91044 = 0;
			nimln(81, "deepcopy.nim");
			TMP128 = divInt((*mt).size, (*(*mt).base).size);
			TMP129 = subInt((NI)(TMP128), ((NI) 1));
			HEX3Atmp_91044 = (NI)(TMP129);
			nimln(1598, "system.nim");
			NI res_91047 = ((NI) 0);
			{
				nimln(1599, "system.nim");
				while (1) {
					NI TMP130;
					if (!(res_91047 <= HEX3Atmp_91044)) goto LA25;
					nimln(1600, "system.nim");
					i_90892 = res_91047;
					nimln(82, "deepcopy.nim");
					nimln(83, "deepcopy.nim");
					genericdeepcopyaux_90220(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_90892) * (NU64)((*(*mt).base).size)))))), ((void*) ((NI)((NU64)(s) + (NU64)((NI)((NU64)(i_90892) * (NU64)((*(*mt).base).size)))))), (*mt).base);
					nimln(1619, "system.nim");
					TMP130 = addInt(res_91047, ((NI) 1));
					res_91047 = (NI)(TMP130);
				} LA25: ;
			}
		}
	}
	break;
	case ((NU8) 22):
	{
		nimln(85, "deepcopy.nim");
		void* s2 = (*((void**) (src)));
		nimln(86, "deepcopy.nim");
		{
			if (!(s2 == NIM_NIL)) goto LA29;
{			nimln(87, "deepcopy.nim");
			unsureAsgnRef(((void**) (dest)), s2);
}		}
		goto LA27;
		LA29: ;
		{
			nimln(88, "deepcopy.nim");
			if (!!(((*(*mt).base).deepcopy == NIM_NIL))) goto LA32;
{			nimln(89, "deepcopy.nim");
			void* z = (*(*mt).base).deepcopy(s2);
			nimln(90, "deepcopy.nim");
			unsureAsgnRef(((void**) (dest)), z);
}		}
		goto LA27;
		LA32: ;
		{
			nimln(97, "deepcopy.nim");
			Tcell46547* x = usrtocell_50047(s2);
			nimln(98, "deepcopy.nim");
			NI forw = ((NI) ((*x).typ));
			nimln(99, "deepcopy.nim");
			{
				if (!(((NI) ((NI)(forw & ((NI) 1)))) == ((NI) 1))) goto LA37;
{				nimln(101, "deepcopy.nim");
				void* z = ((void*) ((NI)(forw & ((NI) -2))));
				nimln(102, "deepcopy.nim");
				unsureAsgnRef(((void**) (dest)), z);
}			}
			goto LA35;
			LA37: ;
			{
				nimln(104, "deepcopy.nim");
				TNimType* realtype = (*x).typ;
				nimln(105, "deepcopy.nim");
				void* z = newObj(realtype, (*(*realtype).base).size);
				nimln(107, "deepcopy.nim");
				unsureAsgnRef(((void**) (dest)), z);
				nimln(108, "deepcopy.nim");
				(*x).typ = ((TNimType*) ((NI)(((NI) (z)) | ((NI) 1))));
				nimln(109, "deepcopy.nim");
				genericdeepcopyaux_90220(z, s2, (*realtype).base);
				nimln(110, "deepcopy.nim");
				(*x).typ = realtype;
			}
			LA35: ;
		}
		LA27: ;
	}
	break;
	case ((NU8) 21):
	{
		nimln(118, "deepcopy.nim");
		void* s2 = (*((void**) (src)));
		nimln(119, "deepcopy.nim");
		{
			NIM_BOOL LOC43;
			LOC43 = 0;
			LOC43 = !((s2 == NIM_NIL));
			if (!(LOC43)) goto LA44;
			LOC43 = !(((*(*mt).base).deepcopy == NIM_NIL));
			LA44: ;
			if (!LOC43) goto LA45;
{			nimln(120, "deepcopy.nim");
			(*((void**) (dest))) = (*(*mt).base).deepcopy(s2);
}		}
		goto LA41;
		LA45: ;
		{
			nimln(122, "deepcopy.nim");
			(*((void**) (dest))) = s2;
		}
		LA41: ;
	}
	break;
	default:
	{
		nimln(124, "deepcopy.nim");
		memcpy(dest, src, ((NI)chckRange((*mt).size, ((NI) 0), ((NI) IL64(9223372036854775807)))));
	}
	break;
	}
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, genericDeepCopy)(void* dest, void* src, TNimType* mt) {
	nimfr("genericDeepCopy", "deepcopy.nim")
	nimln(127, "deepcopy.nim");
	genericdeepcopyaux_90220(dest, src, mt);
	popFrame();
}

N_NIMCALL(void, genericSeqDeepCopy)(void* dest, void* src_91095, TNimType* mt) {
	nimfr("genericSeqDeepCopy", "deepcopy.nim")
	nimln(131, "deepcopy.nim");
	void* src = src_91095;
	nimln(132, "deepcopy.nim");
	genericDeepCopy(dest, ((void*) ((&src))), mt);
	popFrame();
}

N_NIMCALL(void, genericDeepCopyOpenArray)(void* dest, void* src, NI len, TNimType* mt) {
	nimfr("genericDeepCopyOpenArray", "deepcopy.nim")
	nimln(137, "deepcopy.nim");
	NI d = ((NI) (dest));
	nimln(138, "deepcopy.nim");
	NI s = ((NI) (src));
	{
		NI i_91120;
		NI HEX3Atmp_91162;
		NI TMP131;
		i_91120 = 0;
		HEX3Atmp_91162 = 0;
		nimln(139, "deepcopy.nim");
		TMP131 = subInt(len, ((NI) 1));
		HEX3Atmp_91162 = (NI)(TMP131);
		nimln(1598, "system.nim");
		NI res_91165 = ((NI) 0);
		{
			nimln(1599, "system.nim");
			while (1) {
				NI TMP132;
				if (!(res_91165 <= HEX3Atmp_91162)) goto LA3;
				nimln(1600, "system.nim");
				i_91120 = res_91165;
				nimln(140, "deepcopy.nim");
				nimln(141, "deepcopy.nim");
				genericDeepCopy(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_91120) * (NU64)((*(*mt).base).size)))))), ((void*) ((NI)((NU64)(s) + (NU64)((NI)((NU64)(i_91120) * (NU64)((*(*mt).base).size)))))), (*mt).base);
				nimln(1619, "system.nim");
				TMP132 = addInt(res_91165, ((NI) 1));
				res_91165 = (NI)(TMP132);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(NI, HEX5E_91212)(NI x) {
	NI result;
	nimfr("^", "system.nim")
	result = 0;
	popFrame();
	return result;
}

N_NIMCALL(NI, xlen_91239)(NimStringDesc* x) {
	NI result;
	nimfr("xlen", "system.nim")
	result = 0;
	popFrame();
	return result;
}
NIM_EXTERNC N_NOINLINE(void, systemInit)(void) {
	strdesc_10404.size = ((NI) 8);
	strdesc_10404.kind = ((NU8) 28);
	strdesc_10404.flags = 2;
	setmode(fileno(stdin), O_BINARY);
	setmode(fileno(stdout), O_BINARY);
	initallocator_10001();
	initStackBottom();
	initgc_9801();
	registersignalhandler_21007();
}

NIM_EXTERNC N_NOINLINE(void, systemDatInit)(void) {
static TNimNode* TMP15[4];
static TNimNode TMP0[24];
NTI112.size = sizeof(NI16);
NTI112.kind = 33;
NTI112.base = 0;
NTI112.flags = 3;
NTI79805.size = sizeof(TY79805);
NTI79805.kind = 16;
NTI79805.base = (&NTI112);
NTI79805.flags = 3;
NTI79804.size = sizeof(NI16*);
NTI79804.kind = 22;
NTI79804.base = (&NTI79805);
NTI79804.flags = 2;
NTI79804.marker = TMP9;
NTI3411.size = sizeof(TNimObject);
NTI3411.kind = 17;
NTI3411.base = 0;
NTI3411.flags = 1;
TMP0[0].len = 0; TMP0[0].kind = 2;
NTI3411.node = &TMP0[0];
NTI3427.size = sizeof(Exception);
NTI3427.kind = 17;
NTI3427.base = (&NTI3411);
TMP15[0] = &TMP0[2];
NTI9022.size = sizeof(Exception*);
NTI9022.kind = 22;
NTI9022.base = (&NTI3427);
NTI9022.marker = TMP16;
TMP0[2].kind = 1;
TMP0[2].offset = offsetof(Exception, parent);
TMP0[2].typ = (&NTI9022);
TMP0[2].name = "parent";
TMP15[1] = &TMP0[3];
NTI151.size = sizeof(NCSTRING);
NTI151.kind = 29;
NTI151.base = 0;
NTI151.flags = 3;
TMP0[3].kind = 1;
TMP0[3].offset = offsetof(Exception, name);
TMP0[3].typ = (&NTI151);
TMP0[3].name = "name";
TMP15[2] = &TMP0[4];
NTI149.size = sizeof(NimStringDesc*);
NTI149.kind = 28;
NTI149.base = 0;
NTI149.flags = 2;
TMP0[4].kind = 1;
TMP0[4].offset = offsetof(Exception, message);
TMP0[4].typ = (&NTI149);
TMP0[4].name = "msg";
TMP15[3] = &TMP0[5];
TMP0[5].kind = 1;
TMP0[5].offset = offsetof(Exception, trace);
TMP0[5].typ = (&NTI149);
TMP0[5].name = "trace";
TMP0[1].len = 4; TMP0[1].kind = 2; TMP0[1].sons = &TMP15[0];
NTI3427.node = &TMP0[1];
NTI3429.size = sizeof(Systemerror3429);
NTI3429.kind = 17;
NTI3429.base = (&NTI3427);
TMP0[6].len = 0; TMP0[6].kind = 2;
NTI3429.node = &TMP0[6];
NTI3431.size = sizeof(Ioerror3431);
NTI3431.kind = 17;
NTI3431.base = (&NTI3429);
TMP0[7].len = 0; TMP0[7].kind = 2;
NTI3431.node = &TMP0[7];
NTI13401.size = sizeof(Ioerror3431*);
NTI13401.kind = 22;
NTI13401.base = (&NTI3431);
NTI13401.marker = TMP17;
NTI3453.size = sizeof(Outofmemerror3453);
NTI3453.kind = 17;
NTI3453.base = (&NTI3429);
TMP0[8].len = 0; TMP0[8].kind = 2;
NTI3453.node = &TMP0[8];
NTI13606.size = sizeof(TY13606*);
NTI13606.kind = 24;
NTI13606.base = (&NTI149);
NTI13606.flags = 2;
NTI13606.marker = TMP28;
NTI3439.size = sizeof(Arithmeticerror3439);
NTI3439.kind = 17;
NTI3439.base = (&NTI3427);
TMP0[9].len = 0; TMP0[9].kind = 2;
NTI3439.node = &TMP0[9];
NTI3443.size = sizeof(Overflowerror3443);
NTI3443.kind = 17;
NTI3443.base = (&NTI3439);
TMP0[10].len = 0; TMP0[10].kind = 2;
NTI3443.node = &TMP0[10];
NTI23201.size = sizeof(Overflowerror3443*);
NTI23201.kind = 22;
NTI23201.base = (&NTI3443);
NTI23201.marker = TMP29;
NTI3455.size = sizeof(Indexerror3455);
NTI3455.kind = 17;
NTI3455.base = (&NTI3427);
TMP0[11].len = 0; TMP0[11].kind = 2;
NTI3455.node = &TMP0[11];
NTI21801.size = sizeof(Indexerror3455*);
NTI21801.kind = 22;
NTI21801.base = (&NTI3455);
NTI21801.marker = TMP31;
NTI3459.size = sizeof(Rangeerror3459);
NTI3459.kind = 17;
NTI3459.base = (&NTI3427);
TMP0[12].len = 0; TMP0[12].kind = 2;
NTI3459.node = &TMP0[12];
NTI21601.size = sizeof(Rangeerror3459*);
NTI21601.kind = 22;
NTI21601.base = (&NTI3459);
NTI21601.marker = TMP33;
NTI3449.size = sizeof(Valueerror3449);
NTI3449.kind = 17;
NTI3449.base = (&NTI3427);
TMP0[13].len = 0; TMP0[13].kind = 2;
NTI3449.node = &TMP0[13];
NTI22601.size = sizeof(Valueerror3449*);
NTI22601.kind = 22;
NTI22601.base = (&NTI3449);
NTI22601.marker = TMP38;
NTI3463.size = sizeof(Reraiseerror3463);
NTI3463.kind = 17;
NTI3463.base = (&NTI3427);
TMP0[14].len = 0; TMP0[14].kind = 2;
NTI3463.node = &TMP0[14];
NTI19201.size = sizeof(Reraiseerror3463*);
NTI19201.kind = 22;
NTI19201.base = (&NTI3463);
NTI19201.marker = TMP40;
NTI3457.size = sizeof(Fielderror3457);
NTI3457.kind = 17;
NTI3457.base = (&NTI3427);
TMP0[15].len = 0; TMP0[15].kind = 2;
NTI3457.node = &TMP0[15];
NTI22001.size = sizeof(Fielderror3457*);
NTI22001.kind = 22;
NTI22001.base = (&NTI3457);
NTI22001.marker = TMP49;
NTI3467.size = sizeof(Objectconversionerror3467);
NTI3467.kind = 17;
NTI3467.base = (&NTI3427);
TMP0[16].len = 0; TMP0[16].kind = 2;
NTI3467.node = &TMP0[16];
NTI22801.size = sizeof(Objectconversionerror3467*);
NTI22801.kind = 22;
NTI22801.base = (&NTI3467);
NTI22801.marker = TMP51;
NTI3465.size = sizeof(Objectassignmenterror3465);
NTI3465.kind = 17;
NTI3465.base = (&NTI3427);
TMP0[17].len = 0; TMP0[17].kind = 2;
NTI3465.node = &TMP0[17];
NTI23001.size = sizeof(Objectassignmenterror3465*);
NTI23001.kind = 22;
NTI23001.base = (&NTI3465);
NTI23001.marker = TMP53;
NTI3441.size = sizeof(Divbyzeroerror3441);
NTI3441.kind = 17;
NTI3441.base = (&NTI3439);
TMP0[18].len = 0; TMP0[18].kind = 2;
NTI3441.node = &TMP0[18];
NTI23401.size = sizeof(Divbyzeroerror3441*);
NTI23401.kind = 22;
NTI23401.base = (&NTI3441);
NTI23401.marker = TMP55;
NTI3469.size = sizeof(Floatingpointerror3469);
NTI3469.kind = 17;
NTI3469.base = (&NTI3427);
TMP0[19].len = 0; TMP0[19].kind = 2;
NTI3469.node = &TMP0[19];
NTI3471.size = sizeof(Floatinvalidoperror3471);
NTI3471.kind = 17;
NTI3471.base = (&NTI3469);
TMP0[20].len = 0; TMP0[20].kind = 2;
NTI3471.node = &TMP0[20];
NTI25001.size = sizeof(Floatinvalidoperror3471*);
NTI25001.kind = 22;
NTI25001.base = (&NTI3471);
NTI25001.marker = TMP57;
NTI3475.size = sizeof(Floatoverflowerror3475);
NTI3475.kind = 17;
NTI3475.base = (&NTI3469);
TMP0[21].len = 0; TMP0[21].kind = 2;
NTI3475.node = &TMP0[21];
NTI25201.size = sizeof(Floatoverflowerror3475*);
NTI25201.kind = 22;
NTI25201.base = (&NTI3475);
NTI25201.marker = TMP59;
NTI3477.size = sizeof(Floatunderflowerror3477);
NTI3477.kind = 17;
NTI3477.base = (&NTI3469);
TMP0[22].len = 0; TMP0[22].kind = 2;
NTI3477.node = &TMP0[22];
NTI25401.size = sizeof(Floatunderflowerror3477*);
NTI25401.kind = 22;
NTI25401.base = (&NTI3477);
NTI25401.marker = TMP61;
NTI3447.size = sizeof(Assertionerror3447);
NTI3447.kind = 17;
NTI3447.base = (&NTI3427);
TMP0[23].len = 0; TMP0[23].kind = 2;
NTI3447.node = &TMP0[23];
NTI88601.size = sizeof(Assertionerror3447*);
NTI88601.kind = 22;
NTI88601.base = (&NTI3447);
NTI88601.marker = TMP116;
NTI108.size = sizeof(NI);
NTI108.kind = 31;
NTI108.base = 0;
NTI108.flags = 3;
NTI138.size = sizeof(NIM_BOOL);
NTI138.kind = 1;
NTI138.base = 0;
NTI138.flags = 3;
NTI147.size = sizeof(NIM_CHAR);
NTI147.kind = 2;
NTI147.base = 0;
NTI147.flags = 3;
}


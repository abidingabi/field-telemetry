/* Generated by Nim Compiler v0.11.2 */
/*   (c) 2015 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Windows, amd64, gcc */
/* Command for C compiler:
   g++.exe -c  -w -w -fpermissive  -IC:\Nim\lib -o c:\users\dansm\desktop\folders\robotics\field-telemetry\nimcache\stdlib_times.o c:\users\dansm\desktop\folders\robotics\field-telemetry\nimcache\stdlib_times.cpp */
#define NIM_INTBITS 64
#include "nimbase.h"

#include <time.h>

#include <string.h>
struct Timeinterval107407;
struct Timeinfo107405;
struct TNimObject;
struct TNimType;
struct TNimNode;
struct NimStringDesc;
struct TGenericSeq;
struct TY107548;
struct Tfiletime104245;
struct Slice87861;
struct Valueerror3449;
struct Exception;
struct Tcell46547;
struct Tcellseq46563;
struct Tgcheap48416;
struct Tcellset46559;
struct Tpagedesc46555;
struct Tmemregion28410;
struct Tsmallchunk27640;
struct Tllchunk28404;
struct Tbigchunk27642;
struct Tintset27617;
struct Ttrunk27613;
struct Tavlnode28408;
struct Tgcstat48414;
struct Tbasechunk27638;
struct Tfreecell27630;
struct  Timeinterval107407  {
NI miliseconds;
NI seconds;
NI minutes;
NI hours;
NI days;
NI months;
NI years;
};
typedef N_NIMCALL_PTR(void, TY3289) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, TY3294) (void* p);
struct  TNimType  {
NI size;
NU8 kind;
NU8 flags;
TNimType* base;
TNimNode* node;
void* finalizer;
TY3289 marker;
TY3294 deepcopy;
};
struct  TNimObject  {
TNimType* m_type;
};
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
struct  Timeinfo107405  : public TNimObject {
NI second;
NI minute;
NI hour;
NI monthday;
NU8 month;
NI year;
NU8 weekday;
NI yearday;
NIM_BOOL isdst;
NimStringDesc* tzname;
NI timezone;
};
struct  TNimNode  {
NU8 kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
typedef NU8 TY108054[7];
struct TY107548 {
NimStringDesc* Field0;
NimStringDesc* Field1;
};
typedef NI8 TY108073[7];
struct  Tfiletime104245  {
NI32 dwlowdatetime;
NI32 dwhighdatetime;
};
typedef N_STDCALL_PTR(void, TY105625) (Tfiletime104245& lpsystemtimeasfiletime);
typedef NimStringDesc* TY109239[7];
typedef NimStringDesc* TY109255[12];
struct  Slice87861  {
NI a;
NI b;
};
struct  Exception  : public TNimObject {
Exception* parent;
NCSTRING name;
NimStringDesc* message;
NimStringDesc* trace;
};
struct  Valueerror3449  : public Exception {
};
struct  Tcell46547  {
NI refcount;
TNimType* typ;
};
struct  Tcellseq46563  {
NI len;
NI cap;
Tcell46547** d;
};
struct  Tcellset46559  {
NI counter;
NI max;
Tpagedesc46555* head;
Tpagedesc46555** data;
};
typedef Tsmallchunk27640* TY28422[512];
typedef Ttrunk27613* Ttrunkbuckets27615[256];
struct  Tintset27617  {
Ttrunkbuckets27615 data;
};
struct  Tmemregion28410  {
NI minlargeobj;
NI maxlargeobj;
TY28422 freesmallchunks;
Tllchunk28404* llmem;
NI currmem;
NI maxmem;
NI freemem;
NI lastsize;
Tbigchunk27642* freechunkslist;
Tintset27617 chunkstarts;
Tavlnode28408* root;
Tavlnode28408* deleted;
Tavlnode28408* last;
Tavlnode28408* freeavlnodes;
};
struct  Tgcstat48414  {
NI stackscans;
NI cyclecollections;
NI maxthreshold;
NI maxstacksize;
NI maxstackcells;
NI cycletablesize;
NI64 maxpause;
};
struct  Tgcheap48416  {
void* stackbottom;
NI cyclethreshold;
Tcellseq46563 zct;
Tcellseq46563 decstack;
Tcellset46559 cycleroots;
Tcellseq46563 tempstack;
NI recgclock;
Tmemregion28410 region;
Tgcstat48414 stat;
};
typedef NI TY27620[8];
struct  Tpagedesc46555  {
Tpagedesc46555* next;
NI key;
TY27620 bits;
};
struct  Tbasechunk27638  {
NI prevsize;
NI size;
NIM_BOOL used;
};
struct  Tsmallchunk27640  : public Tbasechunk27638 {
Tsmallchunk27640* next;
Tsmallchunk27640* prev;
Tfreecell27630* freelist;
NI free;
NI acc;
NF data;
};
struct  Tllchunk28404  {
NI size;
NI acc;
Tllchunk28404* next;
};
struct  Tbigchunk27642  : public Tbasechunk27638 {
Tbigchunk27642* next;
Tbigchunk27642* prev;
NI align;
NF data;
};
struct  Ttrunk27613  {
Ttrunk27613* next;
NI key;
TY27620 bits;
};
typedef Tavlnode28408* TY28414[2];
struct  Tavlnode28408  {
TY28414 link;
NI key;
NI upperbound;
NI level;
};
struct  Tfreecell27630  {
Tfreecell27630* next;
NI zerofield;
};
N_NIMCALL(time_t, fromseconds_107477)(NI64 since1970);
N_NIMCALL(NIM_BOOL, ntLtTime)(time_t a, time_t b);
N_NIMCALL(NIM_BOOL, ntLeTime)(time_t a, time_t b);
N_NIMCALL(NIM_BOOL, ntEqTime)(time_t a, time_t b);
N_NIMCALL(Timeinterval107407, initinterval_107614)(NI miliseconds, NI seconds, NI minutes, NI hours, NI days, NI months, NI years);
N_NIMCALL(NIM_BOOL, isleapyear_107630)(NI year);
N_NIMCALL(NI, getdaysinmonth_107645)(NU8 month, NI year);
static N_INLINE(void, HEX2BHEX3D_107689)(NF& x, NF y);
static N_INLINE(void, nimFrame)(TFrame* s);
N_NOINLINE(void, stackoverflow_19801)(void);
static N_INLINE(void, popFrame)(void);
N_NIMCALL(NF, toseconds_107658)(Timeinfo107405* a, Timeinterval107407* interval);
N_NIMCALL(void, genericAssign)(void* dest, void* src, TNimType* mt);
static N_INLINE(NF, HEX2F_87799)(NI x, NI y);
N_NIMCALL(void, HEX2B_107808)(Timeinfo107405* a, Timeinterval107407* interval, Timeinfo107405* Result);
static N_INLINE(NIM_BOOL, eqStrings)(NimStringDesc* a, NimStringDesc* b);
N_NIMCALL(void, genericReset)(void* dest, TNimType* mt);
N_NIMCALL(void, HEX2D_107821)(Timeinfo107405* a, Timeinterval107407* interval, Timeinfo107405* Result);
N_NIMCALL(void, tmtotimeinfo_108048)(struct tm* tm, NIM_BOOL local, Timeinfo107405* Result);
N_NIMCALL(void, gettzname_107546)(TY107548* Result);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str);
N_NIMCALL(void, unsureAsgnRef)(void** dest, void* src);
N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src);
N_NIMCALL(NI, gettimezone_107604)(void);
N_NIMCALL(void, genericShallowAssign)(void* dest, void* src, TNimType* mt);
N_NIMCALL(struct tm, timeinfototm_108068)(Timeinfo107405* t);
N_NIMCALL(NI64, ntDiffTime)(time_t a, time_t b);
N_NIMCALL(NI, getstartmilsecs_107609)(void);
N_NIMCALL(time_t, gettime_107448)(void);
N_NIMCALL(void, getlocaltime_107453)(time_t t, Timeinfo107405* Result);
N_NIMCALL(void, getgmtime_107459)(time_t t, Timeinfo107405* Result);
N_NIMCALL(time_t, timeinfototime_107465)(Timeinfo107405* timeinfo);
N_NIMCALL(NimStringDesc*, tostringtillnl_108637)(NCSTRING p);
N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s, NIM_CHAR c);
N_NIMCALL(NimStringDesc*, HEX24_107494)(Timeinfo107405* timeinfo);
N_NIMCALL(NimStringDesc*, HEX24_107500)(time_t time);
N_NIMCALL(NI64, unixtimetowintime_108680)(time_t t);
N_NIMCALL(time_t, wintimetounixtime_108688)(NI64 t);
N_NIMCALL(time_t, fromseconds_107471)(NF since1970);
N_NIMCALL(NF, toseconds_107488)(time_t time);
N_NIMCALL(NF, ntepochTime)(void);
N_NIMCALL(NI64, rdfiletime_105604)(Tfiletime104245 f);
N_NIMCALL(NF, ntcpuTime)(void);
N_NIMCALL(NimStringDesc*, ntgetDateStr)(void);
N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x);
static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src);
static N_INLINE(void, appendChar)(NimStringDesc* dest, NIM_CHAR c);
N_NIMCALL(NimStringDesc*, nsuIntToStr)(NI x, NI minchars);
N_NIMCALL(NimStringDesc*, rawNewString)(NI space);
N_NIMCALL(NimStringDesc*, ntgetClockStr)(void);
N_NIMCALL(NimStringDesc*, HEX24_109234)(NU8 day);
N_NIMCALL(NimStringDesc*, HEX24_109250)(NU8 m);
N_NIMCALL(void, formattoken_109266)(Timeinfo107405* info, NimStringDesc* token, NimStringDesc*& buf);
N_NIMCALL(NI, hashString)(NimStringDesc* s);
N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen);
static N_INLINE(NimStringDesc*, HEX5BHEX5D_87854)(NimStringDesc* s, Slice87861 x);
N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s, NI start_76443, NI last);
N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s, NI first, NI last);
static N_INLINE(Slice87861, HEX2EHEX2E_109273)(NI a, NI b);
N_NIMCALL(NimStringDesc*, nsuRepeatChar)(NIM_CHAR c, NI count);
N_NIMCALL(void, insert_89601)(NimStringDesc*& x, NimStringDesc* item, NI i);
N_NIMCALL(void*, newObj)(TNimType* typ, NI size);
static N_INLINE(void, asgnRefNoCycle)(void** dest, void* src);
static N_INLINE(Tcell46547*, usrtocell_50047)(void* usr);
static N_INLINE(void, rtladdzct_51604)(Tcell46547* c);
N_NOINLINE(void, addzct_50017)(Tcellseq46563& s, Tcell46547* c);
N_NIMCALL(void, raiseException)(Exception* e, NCSTRING ename);
N_NIMCALL(NimStringDesc*, format_109394)(Timeinfo107405* info, NimStringDesc* f);
N_NIMCALL(void, parsetoken_109462)(Timeinfo107405& info, NimStringDesc* token, NimStringDesc* value, NI& j);
N_NIMCALL(NI, npuParseInt)(NimStringDesc* s, NI& number, NI start);
N_NIMCALL(NI, nsuParseInt)(NimStringDesc* s);
N_NIMCALL(NimStringDesc*, nsuToLowerStr)(NimStringDesc* s);
N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src);
static N_INLINE(void, nimGCunrefNoCycle)(void* p);
N_NIMCALL(NI, nsuCmpIgnoreCase)(NimStringDesc* a, NimStringDesc* b);
N_NIMCALL(NimStringDesc*, nimCharToStr)(NIM_CHAR x);
N_NIMCALL(NimStringDesc*, nsuToUpperStr)(NimStringDesc* s);
N_NIMCALL(void, parse_110354)(NimStringDesc* value, NimStringDesc* layout, Timeinfo107405* Result);
STRING_LITERAL(TMP154, "UTC", 3);
NIM_CONST TY108054 weekdays_108053 = {((NU8) 6),
((NU8) 0),
((NU8) 1),
((NU8) 2),
((NU8) 3),
((NU8) 4),
((NU8) 5)}
;
NIM_CONST TY108073 weekdays_108072 = {((NI8) 1),
((NI8) 2),
((NI8) 3),
((NI8) 4),
((NI8) 5),
((NI8) 6),
((NI8) 0)}
;
STRING_LITERAL(TMP155, "", 0);
STRING_LITERAL(TMP159, "Monday", 6);
STRING_LITERAL(TMP160, "Tuesday", 7);
STRING_LITERAL(TMP161, "Wednesday", 9);
STRING_LITERAL(TMP162, "Thursday", 8);
STRING_LITERAL(TMP163, "Friday", 6);
STRING_LITERAL(TMP164, "Saturday", 8);
STRING_LITERAL(TMP165, "Sunday", 6);
NIM_CONST TY109239 lookup_109238 = {((NimStringDesc*) &TMP159),
((NimStringDesc*) &TMP160),
((NimStringDesc*) &TMP161),
((NimStringDesc*) &TMP162),
((NimStringDesc*) &TMP163),
((NimStringDesc*) &TMP164),
((NimStringDesc*) &TMP165)}
;
STRING_LITERAL(TMP166, "January", 7);
STRING_LITERAL(TMP167, "February", 8);
STRING_LITERAL(TMP168, "March", 5);
STRING_LITERAL(TMP169, "April", 5);
STRING_LITERAL(TMP170, "May", 3);
STRING_LITERAL(TMP171, "June", 4);
STRING_LITERAL(TMP172, "July", 4);
STRING_LITERAL(TMP173, "August", 6);
STRING_LITERAL(TMP174, "September", 9);
STRING_LITERAL(TMP175, "October", 7);
STRING_LITERAL(TMP176, "November", 8);
STRING_LITERAL(TMP177, "December", 8);
NIM_CONST TY109255 lookup_109254 = {((NimStringDesc*) &TMP166),
((NimStringDesc*) &TMP167),
((NimStringDesc*) &TMP168),
((NimStringDesc*) &TMP169),
((NimStringDesc*) &TMP170),
((NimStringDesc*) &TMP171),
((NimStringDesc*) &TMP172),
((NimStringDesc*) &TMP173),
((NimStringDesc*) &TMP174),
((NimStringDesc*) &TMP175),
((NimStringDesc*) &TMP176),
((NimStringDesc*) &TMP177)}
;
STRING_LITERAL(TMP178, "d", 1);
STRING_LITERAL(TMP179, "dd", 2);
STRING_LITERAL(TMP180, "ddd", 3);
STRING_LITERAL(TMP181, "dddd", 4);
STRING_LITERAL(TMP182, "h", 1);
STRING_LITERAL(TMP183, "hh", 2);
STRING_LITERAL(TMP184, "H", 1);
STRING_LITERAL(TMP185, "HH", 2);
STRING_LITERAL(TMP186, "m", 1);
STRING_LITERAL(TMP187, "mm", 2);
STRING_LITERAL(TMP188, "M", 1);
STRING_LITERAL(TMP189, "MM", 2);
STRING_LITERAL(TMP190, "MMM", 3);
STRING_LITERAL(TMP191, "MMMM", 4);
STRING_LITERAL(TMP192, "s", 1);
STRING_LITERAL(TMP193, "ss", 2);
STRING_LITERAL(TMP194, "t", 1);
STRING_LITERAL(TMP195, "tt", 2);
STRING_LITERAL(TMP196, "y", 1);
STRING_LITERAL(TMP197, "yy", 2);
STRING_LITERAL(TMP198, "yyy", 3);
STRING_LITERAL(TMP199, "yyyy", 4);
STRING_LITERAL(TMP200, "yyyyy", 5);
STRING_LITERAL(TMP201, "z", 1);
STRING_LITERAL(TMP202, "zz", 2);
STRING_LITERAL(TMP203, "zzz", 3);
STRING_LITERAL(TMP204, "ZZZ", 3);
STRING_LITERAL(TMP205, "0", 1);
STRING_LITERAL(TMP206, "PM", 2);
STRING_LITERAL(TMP207, "AM", 2);
STRING_LITERAL(TMP208, ":00", 3);
STRING_LITERAL(TMP209, "Invalid format string: ", 23);
STRING_LITERAL(TMP221, "sun", 3);
STRING_LITERAL(TMP222, "mon", 3);
STRING_LITERAL(TMP223, "tue", 3);
STRING_LITERAL(TMP224, "wed", 3);
STRING_LITERAL(TMP225, "thu", 3);
STRING_LITERAL(TMP226, "fri", 3);
STRING_LITERAL(TMP227, "sat", 3);
STRING_LITERAL(TMP228, "invalid day of week ", 20);
STRING_LITERAL(TMP229, "sunday", 6);
STRING_LITERAL(TMP230, "monday", 6);
STRING_LITERAL(TMP231, "tuesday", 7);
STRING_LITERAL(TMP232, "wednesday", 9);
STRING_LITERAL(TMP233, "thursday", 8);
STRING_LITERAL(TMP234, "friday", 6);
STRING_LITERAL(TMP235, "saturday", 8);
STRING_LITERAL(TMP236, "jan", 3);
STRING_LITERAL(TMP237, "feb", 3);
STRING_LITERAL(TMP238, "mar", 3);
STRING_LITERAL(TMP239, "apr", 3);
STRING_LITERAL(TMP240, "may", 3);
STRING_LITERAL(TMP241, "jun", 3);
STRING_LITERAL(TMP242, "jul", 3);
STRING_LITERAL(TMP243, "aug", 3);
STRING_LITERAL(TMP244, "sep", 3);
STRING_LITERAL(TMP245, "oct", 3);
STRING_LITERAL(TMP246, "nov", 3);
STRING_LITERAL(TMP247, "dec", 3);
STRING_LITERAL(TMP248, "invalid month", 13);
STRING_LITERAL(TMP249, "january", 7);
STRING_LITERAL(TMP250, "february", 8);
STRING_LITERAL(TMP251, "march", 5);
STRING_LITERAL(TMP252, "april", 5);
STRING_LITERAL(TMP253, "june", 4);
STRING_LITERAL(TMP254, "july", 4);
STRING_LITERAL(TMP255, "august", 6);
STRING_LITERAL(TMP256, "september", 9);
STRING_LITERAL(TMP257, "october", 7);
STRING_LITERAL(TMP258, "november", 8);
STRING_LITERAL(TMP259, "december", 8);
STRING_LITERAL(TMP260, "Sign for timezone ", 18);
extern TFrame* frameptr_17042;
extern TNimType NTI3411; /* RootObj */
TNimType NTI107405; /* TimeInfo */
extern TNimType NTI108; /* int */
TNimType NTI107408; /* range 0..61(int) */
TNimType NTI107410; /* range 0..59(int) */
TNimType NTI107412; /* range 0..23(int) */
TNimType NTI107415; /* range 1..31(int) */
TNimType NTI104006; /* Month */
TNimType NTI107418; /* range -10000..10000(int) */
TNimType NTI104008; /* WeekDay */
TNimType NTI107424; /* range 0..365(int) */
extern TNimType NTI138; /* bool */
extern TNimType NTI149; /* string */
extern TY105625 Dl_105624;
extern TNimType NTI22601; /* ref ValueError */
extern TNimType NTI3449; /* ValueError */
extern Tgcheap48416 gch_48444;

N_NIMCALL(time_t, fromseconds_107477)(NI64 since1970) {
	time_t result;
	result = 0;
	result = fromseconds_107471(((NF) (since1970)));
	return result;
}

N_NIMCALL(NIM_BOOL, ntLtTime)(time_t a, time_t b) {
	NIM_BOOL result;
	NI64 LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = ntDiffTime(a, b);
	result = (LOC1 < IL64(0));
	return result;
}

N_NIMCALL(NIM_BOOL, ntLeTime)(time_t a, time_t b) {
	NIM_BOOL result;
	NI64 LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = ntDiffTime(a, b);
	result = (LOC1 <= IL64(0));
	return result;
}

N_NIMCALL(NIM_BOOL, ntEqTime)(time_t a, time_t b) {
	NIM_BOOL result;
	NI64 LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = ntDiffTime(a, b);
	result = (LOC1 == IL64(0));
	return result;
}

N_NIMCALL(Timeinterval107407, initinterval_107614)(NI miliseconds, NI seconds, NI minutes, NI hours, NI days, NI months, NI years) {
	Timeinterval107407 result;
	memset((void*)(&result), 0, sizeof(result));
	result.miliseconds = miliseconds;
	result.seconds = seconds;
	result.minutes = minutes;
	result.hours = hours;
	result.days = days;
	result.months = months;
	result.years = years;
	return result;
}

N_NIMCALL(NIM_BOOL, isleapyear_107630)(NI year) {
	NIM_BOOL result;
{	result = 0;
	{
		if (!(((NI) ((NI)(year % ((NI) 400)))) == ((NI) 0))) goto LA3;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	goto LA1;
	LA3: ;
	{
		if (!(((NI) ((NI)(year % ((NI) 100)))) == ((NI) 0))) goto LA6;
{		result = NIM_FALSE;
		goto BeforeRet;
}	}
	goto LA1;
	LA6: ;
	{
		if (!(((NI) ((NI)(year % ((NI) 4)))) == ((NI) 0))) goto LA9;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	goto LA1;
	LA9: ;
	{
		result = NIM_FALSE;
		goto BeforeRet;
	}
	LA1: ;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI, getdaysinmonth_107645)(NU8 month, NI year) {
	NI result;
	result = 0;
	switch (month) {
	case ((NU8) 1):
	{
		{
			if (!isleapyear_107630(year)) goto LA4;
{			result = ((NI) 29);
}		}
		goto LA2;
		LA4: ;
		{
			result = ((NI) 28);
		}
		LA2: ;
	}
	break;
	case ((NU8) 3):
	case ((NU8) 5):
	case ((NU8) 8):
	case ((NU8) 10):
	{
		result = ((NI) 30);
	}
	break;
	default:
	{
		result = ((NI) 31);
	}
	break;
	}
	return result;
}

static N_INLINE(void, nimFrame)(TFrame* s) {
	NI LOC1;
	LOC1 = 0;
	{
		if (!(frameptr_17042 == NIM_NIL)) goto LA4;
{		LOC1 = ((NI) 0);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) ((NI16)((*frameptr_17042).calldepth + ((NI16) 1))));
	}
	LA2: ;
	(*s).calldepth = ((NI16) (LOC1));
	(*s).prev = frameptr_17042;
	frameptr_17042 = s;
	{
		if (!((*s).calldepth == ((NI16) 2000))) goto LA9;
{		stackoverflow_19801();
}	}
	LA9: ;
}

static N_INLINE(void, popFrame)(void) {
	frameptr_17042 = (*frameptr_17042).prev;
}

static N_INLINE(void, HEX2BHEX3D_107689)(NF& x, NF y) {
	nimfr("+=", "system.nim")
	nimln(2992, "system.nim");
	x = ((NF)(x) + (NF)(y));
	popFrame();
}

static N_INLINE(NF, HEX2F_87799)(NI x, NI y) {
	NF result;
	nimfr("/", "system.nim")
	result = 0;
	nimln(2856, "system.nim");
	result = ((NF)(((double) (x))) / (NF)(((double) (y))));
	popFrame();
	return result;
}

N_NIMCALL(NF, toseconds_107658)(Timeinfo107405* a, Timeinterval107407* interval) {
	NF result;
	Timeinfo107405 anew;
	result = 0;
	memset((void*)(&anew), 0, sizeof(anew));
	anew.m_type = (&NTI107405);
	genericAssign((void*)(&anew), (void*)a, (&NTI107405));
	Timeinterval107407 newinterv = (*interval);
	result = 0.0;
	newinterv.months += (NI)((*interval).years * ((NI) 12));
	NU8 curmonth = anew.month;
	{
		NI mth_107685;
		NI HEX3Atmp_107782;
		mth_107685 = 0;
		HEX3Atmp_107782 = 0;
		HEX3Atmp_107782 = newinterv.months;
		NI res_107785 = ((NI) 1);
		{
			while (1) {
				NI LOC4;
				if (!(res_107785 <= HEX3Atmp_107782)) goto LA3;
				mth_107685 = res_107785;
				LOC4 = 0;
				LOC4 = getdaysinmonth_107645(curmonth, ((NI) (anew.year)));
				HEX2BHEX3D_107689(result, ((NF) ((NI)((NI)((NI)(LOC4 * ((NI) 24)) * ((NI) 60)) * ((NI) 60)))));
				{
					if (!(curmonth == ((NU8) 11))) goto LA7;
{					curmonth = ((NU8) 0);
					anew.year += ((NI) 1);
}				}
				goto LA5;
				LA7: ;
				{
					curmonth += ((NI) 1);
				}
				LA5: ;
				res_107785 += ((NI) 1);
			} LA3: ;
		}
	}
	HEX2BHEX3D_107689(result, ((NF) ((NI)((NI)((NI)(newinterv.days * ((NI) 24)) * ((NI) 60)) * ((NI) 60)))));
	HEX2BHEX3D_107689(result, ((NF) ((NI)((NI)(newinterv.hours * ((NI) 60)) * ((NI) 60)))));
	HEX2BHEX3D_107689(result, ((NF) ((NI)(newinterv.minutes * ((NI) 60)))));
	HEX2BHEX3D_107689(result, ((NF) (newinterv.seconds)));
	HEX2BHEX3D_107689(result, HEX2F_87799(newinterv.miliseconds, ((NI) 1000)));
	return result;
}

static N_INLINE(NIM_BOOL, eqStrings)(NimStringDesc* a, NimStringDesc* b) {
	NIM_BOOL result;
	NIM_BOOL LOC11;
	int LOC13;
{	result = 0;
	{
		if (!(a == b)) goto LA3;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = 0;
		LOC7 = (a == NIM_NIL);
		if (LOC7) goto LA8;
		LOC7 = (b == NIM_NIL);
		LA8: ;
		if (!LOC7) goto LA9;
{		result = NIM_FALSE;
		goto BeforeRet;
}	}
	LA9: ;
	LOC11 = 0;
	LOC11 = ((*a).len == (*b).len);
	if (!(LOC11)) goto LA12;
	LOC13 = 0;
	LOC13 = memcmp(((NCSTRING) ((*a).data)), ((NCSTRING) ((*b).data)), (*a).len);
	LOC11 = (LOC13 == ((NI32) 0));
	LA12: ;
	result = LOC11;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void, HEX2B_107808)(Timeinfo107405* a, Timeinterval107407* interval, Timeinfo107405* Result) {
	NF t = toseconds_107488(timeinfototime_107465(a));
	NF secs = toseconds_107658(a, interval);
	{
		if (!eqStrings((*a).tzname, ((NimStringDesc*) &TMP154))) goto LA3;
{		genericReset((void*)Result, (&NTI107405));
		(*Result).m_type = (&NTI107405);
		getgmtime_107459(fromseconds_107471(((NF)(t) + (NF)(secs))), Result);
}	}
	goto LA1;
	LA3: ;
	{
		genericReset((void*)Result, (&NTI107405));
		(*Result).m_type = (&NTI107405);
		getlocaltime_107453(fromseconds_107471(((NF)(t) + (NF)(secs))), Result);
	}
	LA1: ;
}

N_NIMCALL(void, HEX2D_107821)(Timeinfo107405* a, Timeinterval107407* interval, Timeinfo107405* Result) {
	NF t = toseconds_107488(timeinfototime_107465(a));
	NF secs = toseconds_107658(a, interval);
	{
		if (!eqStrings((*a).tzname, ((NimStringDesc*) &TMP154))) goto LA3;
{		genericReset((void*)Result, (&NTI107405));
		(*Result).m_type = (&NTI107405);
		getgmtime_107459(fromseconds_107471(((NF)(t) - (NF)(secs))), Result);
}	}
	goto LA1;
	LA3: ;
	{
		genericReset((void*)Result, (&NTI107405));
		(*Result).m_type = (&NTI107405);
		getlocaltime_107453(fromseconds_107471(((NF)(t) - (NF)(secs))), Result);
	}
	LA1: ;
}

N_NIMCALL(void, gettzname_107546)(TY107548* Result) {
{	unsureAsgnRef((void**) (&(*Result).Field0), cstrToNimstr(tzname[(((NI) 0))- 0]));
	unsureAsgnRef((void**) (&(*Result).Field1), cstrToNimstr(tzname[(((NI) 1))- 0]));
	goto BeforeRet;
	}BeforeRet: ;
}

N_NIMCALL(NI, gettimezone_107604)(void) {
	NI result;
{	result = 0;
	result = timezone;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void, tmtotimeinfo_108048)(struct tm* tm, NIM_BOOL local, Timeinfo107405* Result) {
	Timeinfo107405 LOC1;
	memset((void*)(&LOC1), 0, sizeof(LOC1));
	LOC1.m_type = (&NTI107405);
	memset((void*)(&LOC1), 0, sizeof(LOC1));
	LOC1.m_type = (&NTI107405);
	LOC1.second = ((NI) (((NI) ((*tm).tm_sec))));
	LOC1.minute = ((NI) (((NI) ((*tm).tm_min))));
	LOC1.hour = ((NI) (((NI) ((*tm).tm_hour))));
	LOC1.monthday = ((NI) (((NI) ((*tm).tm_mday))));
	LOC1.month = ((NU8) ((*tm).tm_mon));
	LOC1.year = ((NI) ((NI32)((*tm).tm_year + ((NI32) 1900))));
	LOC1.weekday = weekdays_108053[(((NI) ((*tm).tm_wday)))- 0];
	LOC1.yearday = ((NI) (((NI) ((*tm).tm_yday))));
	LOC1.isdst = (((NI32) 0) < (*tm).tm_isdst);
	{
		if (!local) goto LA4;
{		{
			TY107548 LOC10;
			if (!(((NI32) 0) < (*tm).tm_isdst)) goto LA8;
{			memset((void*)(&LOC10), 0, sizeof(LOC10));
			gettzname_107546((&LOC10));
			LOC1.tzname = copyString(LOC10.Field1);
}		}
		goto LA6;
		LA8: ;
		{
			TY107548 LOC12;
			memset((void*)(&LOC12), 0, sizeof(LOC12));
			gettzname_107546((&LOC12));
			LOC1.tzname = copyString(LOC12.Field0);
		}
		LA6: ;
}	}
	goto LA2;
	LA4: ;
	{
		LOC1.tzname = copyString(((NimStringDesc*) &TMP154));
	}
	LA2: ;
	{
		if (!local) goto LA16;
{		LOC1.timezone = gettimezone_107604();
}	}
	goto LA14;
	LA16: ;
	{
		LOC1.timezone = ((NI) 0);
	}
	LA14: ;
	genericShallowAssign((void*)Result, (void*)(&LOC1), (&NTI107405));
}

N_NIMCALL(struct tm, timeinfototm_108068)(Timeinfo107405* t) {
	struct tm result;
	NI LOC1;
	memset((void*)(&result), 0, sizeof(result));
	result.tm_sec = ((int) ((*t).second));
	result.tm_min = ((int) ((*t).minute));
	result.tm_hour = ((int) ((*t).hour));
	result.tm_mday = ((int) ((*t).monthday));
	result.tm_mon = ((int) ((*t).month));
	result.tm_year = ((int) ((NI)(((NI) ((*t).year)) - ((NI) 1900))));
	result.tm_wday = ((int) (weekdays_108072[((*t).weekday)- 0]));
	result.tm_yday = ((int) ((*t).yearday));
	LOC1 = 0;
	{
		if (!(*t).isdst) goto LA4;
{		LOC1 = ((NI) 1);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) 0);
	}
	LA2: ;
	result.tm_isdst = ((int) (LOC1));
	return result;
}

N_NIMCALL(NI64, ntDiffTime)(time_t a, time_t b) {
	NI64 result;
	NF LOC1;
{	result = 0;
	LOC1 = 0;
	LOC1 = difftime(a, b);
	result = float64ToInt64(LOC1);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI, getstartmilsecs_107609)(void) {
	NI result;
	NI LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = clock();
	result = (NI)(LOC1 / (NI)(CLOCKS_PER_SEC / ((NI) 1000)));
	return result;
}

N_NIMCALL(time_t, gettime_107448)(void) {
	time_t result;
{	result = 0;
	result = time(NIM_NIL);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void, getlocaltime_107453)(time_t t, Timeinfo107405* Result) {
	time_t a = t;
	genericReset((void*)Result, (&NTI107405));
	(*Result).m_type = (&NTI107405);
	tmtotimeinfo_108048((&(*localtime((&a)))), NIM_TRUE, Result);
}

N_NIMCALL(void, getgmtime_107459)(time_t t, Timeinfo107405* Result) {
	time_t a = t;
	genericReset((void*)Result, (&NTI107405));
	(*Result).m_type = (&NTI107405);
	tmtotimeinfo_108048((&(*gmtime((&a)))), NIM_FALSE, Result);
}

N_NIMCALL(time_t, timeinfototime_107465)(Timeinfo107405* timeinfo) {
	time_t result;
	Timeinfo107405 ctimeinfo;
	struct tm LOC1;
{	result = 0;
	memset((void*)(&ctimeinfo), 0, sizeof(ctimeinfo));
	ctimeinfo.m_type = (&NTI107405);
	genericAssign((void*)(&ctimeinfo), (void*)timeinfo, (&NTI107405));
	LOC1 = timeinfototm_108068((&ctimeinfo));
	result = mktime((&LOC1));
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NimStringDesc*, tostringtillnl_108637)(NCSTRING p) {
	NimStringDesc* result;
	result = 0;
	result = copyString(((NimStringDesc*) &TMP155));
	NI i = ((NI) 0);
	{
		while (1) {
			NIM_BOOL LOC3;
			NIM_BOOL LOC4;
			LOC3 = 0;
			LOC4 = 0;
			LOC4 = !(((NU8)(p[i]) == (NU8)(0)));
			if (!(LOC4)) goto LA5;
			LOC4 = !(((NU8)(p[i]) == (NU8)(10)));
			LA5: ;
			LOC3 = LOC4;
			if (!(LOC3)) goto LA6;
			LOC3 = !(((NU8)(p[i]) == (NU8)(13)));
			LA6: ;
			if (!LOC3) goto LA2;
			result = addChar(result, p[i]);
			i += ((NI) 1);
		} LA2: ;
	}
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_107494)(Timeinfo107405* timeinfo) {
	NimStringDesc* result;
	struct tm LOC1;
	result = 0;
	LOC1 = timeinfototm_108068(timeinfo);
	NCSTRING p = asctime((&LOC1));
	result = tostringtillnl_108637(p);
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_107500)(time_t time) {
	NimStringDesc* result;
{	result = 0;
	time_t a = time;
	result = tostringtillnl_108637(ctime((&a)));
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI64, unixtimetowintime_108680)(time_t t) {
	NI64 result;
	result = 0;
	result = (NI64)((NI64)(((NI64) (t)) * IL64(10000000)) + IL64(116444736000000000));
	return result;
}

N_NIMCALL(time_t, wintimetounixtime_108688)(NI64 t) {
	time_t result;
	result = 0;
	result = ((time_t) ((NI64)((NI64)(t - IL64(116444736000000000)) / IL64(10000000))));
	return result;
}

N_NIMCALL(time_t, fromseconds_107471)(NF since1970) {
	time_t result;
	result = 0;
	result = ((time_t) (since1970));
	return result;
}

N_NIMCALL(NF, toseconds_107488)(time_t time) {
	NF result;
	result = 0;
	result = ((NF) (time));
	return result;
}

N_NIMCALL(NF, ntepochTime)(void) {
	NF result;
	Tfiletime104245 f;
	NI64 LOC1;
	result = 0;
	memset((void*)(&f), 0, sizeof(f));
	Dl_105624(f);
	LOC1 = 0;
	LOC1 = rdfiletime_105604(f);
	NI64 i64 = (NI64)(LOC1 - IL64(116444736000000000));
	NI64 secs = (NI64)(i64 / IL64(10000000));
	NI64 subsecs = (NI64)(i64 % IL64(10000000));
	result = ((NF)(((double) (((NI) (secs))))) + (NF)(((NF)(((double) (((NI) (subsecs))))) * (NF)(9.9999999999999995e-008))));
	return result;
}

N_NIMCALL(NF, ntcpuTime)(void) {
	NF result;
	NI LOC1;
	result = 0;
	LOC1 = 0;
	LOC1 = clock();
	result = ((NF)(((double) (LOC1))) / (NF)(((double) (CLOCKS_PER_SEC))));
	return result;
}

static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src) {
	memcpy(((NCSTRING) ((&(*dest).data[((*dest).len)- 0]))), ((NCSTRING) ((*src).data)), (NI)((*src).len + ((NI) 1)));
	(*dest).len += (*src).len;
}

static N_INLINE(void, appendChar)(NimStringDesc* dest, NIM_CHAR c) {
	(*dest).data[((*dest).len)- 0] = c;
	(*dest).data[((NI)((*dest).len + ((NI) 1)))- 0] = 0;
	(*dest).len += ((NI) 1);
}

N_NIMCALL(NimStringDesc*, ntgetDateStr)(void) {
	NimStringDesc* result;
	Timeinfo107405 ti;
	NimStringDesc* LOC1;
	NimStringDesc* LOC2;
	NimStringDesc* LOC3;
	NimStringDesc* LOC4;
	result = 0;
	memset((void*)(&ti), 0, sizeof(ti));
	ti.m_type = (&NTI107405);
	memset((void*)(&ti), 0, sizeof(ti));
	ti.m_type = (&NTI107405);
	getlocaltime_107453(gettime_107448(), (&ti));
	LOC1 = 0;
	LOC2 = 0;
	LOC2 = nimIntToStr(((NI) (ti.year)));
	LOC3 = 0;
	LOC3 = nsuIntToStr(((NI) ((NI)(((NI) (ti.month)) + ((NI) 1)))), ((NI) 2));
	LOC4 = 0;
	LOC4 = nsuIntToStr(((NI) (ti.monthday)), ((NI) 2));
	LOC1 = rawNewString(LOC2->len + LOC3->len + LOC4->len + 2);
appendString(LOC1, LOC2);
appendChar(LOC1, 45);
appendString(LOC1, LOC3);
appendChar(LOC1, 45);
appendString(LOC1, LOC4);
	result = LOC1;
	return result;
}

N_NIMCALL(NimStringDesc*, ntgetClockStr)(void) {
	NimStringDesc* result;
	Timeinfo107405 ti;
	NimStringDesc* LOC1;
	NimStringDesc* LOC2;
	NimStringDesc* LOC3;
	NimStringDesc* LOC4;
	result = 0;
	memset((void*)(&ti), 0, sizeof(ti));
	ti.m_type = (&NTI107405);
	memset((void*)(&ti), 0, sizeof(ti));
	ti.m_type = (&NTI107405);
	getlocaltime_107453(gettime_107448(), (&ti));
	LOC1 = 0;
	LOC2 = 0;
	LOC2 = nsuIntToStr(((NI) (ti.hour)), ((NI) 2));
	LOC3 = 0;
	LOC3 = nsuIntToStr(((NI) (ti.minute)), ((NI) 2));
	LOC4 = 0;
	LOC4 = nsuIntToStr(((NI) (ti.second)), ((NI) 2));
	LOC1 = rawNewString(LOC2->len + LOC3->len + LOC4->len + 2);
appendString(LOC1, LOC2);
appendChar(LOC1, 58);
appendString(LOC1, LOC3);
appendChar(LOC1, 58);
appendString(LOC1, LOC4);
	result = LOC1;
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_109234)(NU8 day) {
	NimStringDesc* result;
{	result = 0;
	result = copyString(lookup_109238[(day)- 0]);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NimStringDesc*, HEX24_109250)(NU8 m) {
	NimStringDesc* result;
{	result = 0;
	result = copyString(lookup_109254[(m)- 0]);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(NimStringDesc*, HEX5BHEX5D_87854)(NimStringDesc* s, Slice87861 x) {
	NimStringDesc* result;
	nimfr("[]", "system.nim")
	result = 0;
	nimln(2880, "system.nim");
	result = copyStrLast(s, x.a, x.b);
	popFrame();
	return result;
}

static N_INLINE(Slice87861, HEX2EHEX2E_109273)(NI a, NI b) {
	Slice87861 result;
	nimfr("..", "system.nim")
	memset((void*)(&result), 0, sizeof(result));
	nimln(234, "system.nim");
	result.a = a;
	nimln(235, "system.nim");
	result.b = b;
	popFrame();
	return result;
}

static N_INLINE(Tcell46547*, usrtocell_50047)(void* usr) {
	Tcell46547* result;
	nimfr("usrToCell", "gc.nim")
	result = 0;
	nimln(118, "gc.nim");
	result = ((Tcell46547*) ((NI)((NU64)(((NI) (usr))) - (NU64)(((NI)sizeof(Tcell46547))))));
	popFrame();
	return result;
}

static N_INLINE(void, rtladdzct_51604)(Tcell46547* c) {
	nimfr("rtlAddZCT", "gc.nim")
	nimln(199, "gc.nim");
	addzct_50017(gch_48444.zct, c);
	popFrame();
}

static N_INLINE(void, asgnRefNoCycle)(void** dest, void* src) {
	nimfr("asgnRefNoCycle", "gc.nim")
	nimln(251, "gc.nim");
	{
		if (!!((src == NIM_NIL))) goto LA3;
{		nimln(252, "gc.nim");
		Tcell46547* c = usrtocell_50047(src);
		nimln(169, "gc.nim");
		(*c).refcount += ((NI) 8);
}	}
	LA3: ;
	nimln(254, "gc.nim");
	{
		if (!!(((*dest) == NIM_NIL))) goto LA7;
{		nimln(255, "gc.nim");
		Tcell46547* c = usrtocell_50047((*dest));
		nimln(256, "gc.nim");
		{
			nimln(167, "gc.nim");
			(*c).refcount -= ((NI) 8);
			nimln(168, "gc.nim");
			if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA11;
{			nimln(257, "gc.nim");
			rtladdzct_51604(c);
}		}
		LA11: ;
}	}
	LA7: ;
	nimln(258, "gc.nim");
	(*dest) = src;
	popFrame();
}

N_NIMCALL(void, formattoken_109266)(Timeinfo107405* info, NimStringDesc* token, NimStringDesc*& buf) {
	switch (hashString(token) & 31) {
	case 0: 
if (eqStrings(token, ((NimStringDesc*) &TMP155))) goto LA28;
break;
	case 1: 
if (eqStrings(token, ((NimStringDesc*) &TMP187))) goto LA10;
break;
	case 5: 
if (eqStrings(token, ((NimStringDesc*) &TMP178))) goto LA1;
break;
	case 6: 
if (eqStrings(token, ((NimStringDesc*) &TMP195))) goto LA18;
break;
	case 7: 
if (eqStrings(token, ((NimStringDesc*) &TMP204))) goto LA27;
break;
	case 8: 
if (eqStrings(token, ((NimStringDesc*) &TMP196))) goto LA19;
break;
	case 10: 
if (eqStrings(token, ((NimStringDesc*) &TMP182))) goto LA5;
if (eqStrings(token, ((NimStringDesc*) &TMP188))) goto LA11;
if (eqStrings(token, ((NimStringDesc*) &TMP189))) goto LA12;
if (eqStrings(token, ((NimStringDesc*) &TMP193))) goto LA16;
if (eqStrings(token, ((NimStringDesc*) &TMP197))) goto LA20;
break;
	case 12: 
if (eqStrings(token, ((NimStringDesc*) &TMP190))) goto LA13;
break;
	case 14: 
if (eqStrings(token, ((NimStringDesc*) &TMP203))) goto LA26;
break;
	case 15: 
if (eqStrings(token, ((NimStringDesc*) &TMP181))) goto LA4;
if (eqStrings(token, ((NimStringDesc*) &TMP194))) goto LA17;
break;
	case 20: 
if (eqStrings(token, ((NimStringDesc*) &TMP200))) goto LA23;
break;
	case 21: 
if (eqStrings(token, ((NimStringDesc*) &TMP179))) goto LA2;
if (eqStrings(token, ((NimStringDesc*) &TMP186))) goto LA9;
break;
	case 22: 
if (eqStrings(token, ((NimStringDesc*) &TMP192))) goto LA15;
if (eqStrings(token, ((NimStringDesc*) &TMP202))) goto LA25;
break;
	case 24: 
if (eqStrings(token, ((NimStringDesc*) &TMP184))) goto LA7;
break;
	case 25: 
if (eqStrings(token, ((NimStringDesc*) &TMP185))) goto LA8;
break;
	case 28: 
if (eqStrings(token, ((NimStringDesc*) &TMP191))) goto LA14;
break;
	case 29: 
if (eqStrings(token, ((NimStringDesc*) &TMP198))) goto LA21;
break;
	case 30: 
if (eqStrings(token, ((NimStringDesc*) &TMP201))) goto LA24;
break;
	case 31: 
if (eqStrings(token, ((NimStringDesc*) &TMP180))) goto LA3;
if (eqStrings(token, ((NimStringDesc*) &TMP183))) goto LA6;
if (eqStrings(token, ((NimStringDesc*) &TMP199))) goto LA22;
break;
	}
	goto LA29;
	LA1: ;
	{
		NimStringDesc* LOC32;
		LOC32 = 0;
		LOC32 = nimIntToStr(((NI) ((*info).monthday)));
		buf = resizeString(buf, LOC32->len + 0);
appendString(buf, LOC32);
	}
	goto LA30;
	LA2: ;
	{
		NimStringDesc* LOC38;
		{
			if (!(((NI) ((*info).monthday)) < ((NI) 10))) goto LA36;
{			buf = resizeString(buf, 1);
appendString(buf, ((NimStringDesc*) &TMP205));
}		}
		LA36: ;
		LOC38 = 0;
		LOC38 = nimIntToStr(((NI) ((*info).monthday)));
		buf = resizeString(buf, LOC38->len + 0);
appendString(buf, LOC38);
	}
	goto LA30;
	LA3: ;
	{
		NimStringDesc* LOC40;
		LOC40 = 0;
		LOC40 = HEX5BHEX5D_87854(HEX24_109234((*info).weekday), HEX2EHEX2E_109273(((NI) 0), ((NI) 2)));
		buf = resizeString(buf, LOC40->len + 0);
appendString(buf, LOC40);
	}
	goto LA30;
	LA4: ;
	{
		NimStringDesc* LOC42;
		LOC42 = 0;
		LOC42 = HEX24_109234((*info).weekday);
		buf = resizeString(buf, LOC42->len + 0);
appendString(buf, LOC42);
	}
	goto LA30;
	LA5: ;
	{
		NI LOC44;
		NimStringDesc* LOC50;
		LOC44 = 0;
		{
			if (!(((NI) 12) < ((NI) ((*info).hour)))) goto LA47;
{			LOC44 = ((NI) ((NI)(((NI) ((*info).hour)) - ((NI) 12))));
}		}
		goto LA45;
		LA47: ;
		{
			LOC44 = ((NI) ((*info).hour));
		}
		LA45: ;
		LOC50 = 0;
		LOC50 = nimIntToStr(LOC44);
		buf = resizeString(buf, LOC50->len + 0);
appendString(buf, LOC50);
	}
	goto LA30;
	LA6: ;
	{
		NI LOC52;
		NimStringDesc* LOC62;
		LOC52 = 0;
		{
			if (!(((NI) 12) < ((NI) ((*info).hour)))) goto LA55;
{			LOC52 = ((NI) ((NI)(((NI) ((*info).hour)) - ((NI) 12))));
}		}
		goto LA53;
		LA55: ;
		{
			LOC52 = ((NI) ((*info).hour));
		}
		LA53: ;
		NI amerhour = LOC52;
		{
			if (!(amerhour < ((NI) 10))) goto LA60;
{			buf = addChar(buf, 48);
}		}
		LA60: ;
		LOC62 = 0;
		LOC62 = nimIntToStr(amerhour);
		buf = resizeString(buf, LOC62->len + 0);
appendString(buf, LOC62);
	}
	goto LA30;
	LA7: ;
	{
		NimStringDesc* LOC64;
		LOC64 = 0;
		LOC64 = nimIntToStr(((NI) ((*info).hour)));
		buf = resizeString(buf, LOC64->len + 0);
appendString(buf, LOC64);
	}
	goto LA30;
	LA8: ;
	{
		NimStringDesc* LOC70;
		{
			if (!(((NI) ((*info).hour)) < ((NI) 10))) goto LA68;
{			buf = addChar(buf, 48);
}		}
		LA68: ;
		LOC70 = 0;
		LOC70 = nimIntToStr(((NI) ((*info).hour)));
		buf = resizeString(buf, LOC70->len + 0);
appendString(buf, LOC70);
	}
	goto LA30;
	LA9: ;
	{
		NimStringDesc* LOC72;
		LOC72 = 0;
		LOC72 = nimIntToStr(((NI) ((*info).minute)));
		buf = resizeString(buf, LOC72->len + 0);
appendString(buf, LOC72);
	}
	goto LA30;
	LA10: ;
	{
		NimStringDesc* LOC78;
		{
			if (!(((NI) ((*info).minute)) < ((NI) 10))) goto LA76;
{			buf = addChar(buf, 48);
}		}
		LA76: ;
		LOC78 = 0;
		LOC78 = nimIntToStr(((NI) ((*info).minute)));
		buf = resizeString(buf, LOC78->len + 0);
appendString(buf, LOC78);
	}
	goto LA30;
	LA11: ;
	{
		NimStringDesc* LOC80;
		LOC80 = 0;
		LOC80 = nimIntToStr((NI)(((NI) ((*info).month)) + ((NI) 1)));
		buf = resizeString(buf, LOC80->len + 0);
appendString(buf, LOC80);
	}
	goto LA30;
	LA12: ;
	{
		NimStringDesc* LOC86;
		{
			if (!((*info).month < ((NU8) 9))) goto LA84;
{			buf = addChar(buf, 48);
}		}
		LA84: ;
		LOC86 = 0;
		LOC86 = nimIntToStr((NI)(((NI) ((*info).month)) + ((NI) 1)));
		buf = resizeString(buf, LOC86->len + 0);
appendString(buf, LOC86);
	}
	goto LA30;
	LA13: ;
	{
		NimStringDesc* LOC88;
		LOC88 = 0;
		LOC88 = HEX5BHEX5D_87854(HEX24_109250((*info).month), HEX2EHEX2E_109273(((NI) 0), ((NI) 2)));
		buf = resizeString(buf, LOC88->len + 0);
appendString(buf, LOC88);
	}
	goto LA30;
	LA14: ;
	{
		NimStringDesc* LOC90;
		LOC90 = 0;
		LOC90 = HEX24_109250((*info).month);
		buf = resizeString(buf, LOC90->len + 0);
appendString(buf, LOC90);
	}
	goto LA30;
	LA15: ;
	{
		NimStringDesc* LOC92;
		LOC92 = 0;
		LOC92 = nimIntToStr(((NI) ((*info).second)));
		buf = resizeString(buf, LOC92->len + 0);
appendString(buf, LOC92);
	}
	goto LA30;
	LA16: ;
	{
		NimStringDesc* LOC98;
		{
			if (!(((NI) ((*info).second)) < ((NI) 10))) goto LA96;
{			buf = addChar(buf, 48);
}		}
		LA96: ;
		LOC98 = 0;
		LOC98 = nimIntToStr(((NI) ((*info).second)));
		buf = resizeString(buf, LOC98->len + 0);
appendString(buf, LOC98);
	}
	goto LA30;
	LA17: ;
	{
		{
			if (!(((NI) 12) <= ((NI) ((*info).hour)))) goto LA102;
{			buf = addChar(buf, 80);
}		}
		goto LA100;
		LA102: ;
		{
			buf = addChar(buf, 65);
		}
		LA100: ;
	}
	goto LA30;
	LA18: ;
	{
		{
			if (!(((NI) 12) <= ((NI) ((*info).hour)))) goto LA108;
{			buf = resizeString(buf, 2);
appendString(buf, ((NimStringDesc*) &TMP206));
}		}
		goto LA106;
		LA108: ;
		{
			buf = resizeString(buf, 2);
appendString(buf, ((NimStringDesc*) &TMP207));
		}
		LA106: ;
	}
	goto LA30;
	LA19: ;
	{
		NimStringDesc* LOC112;
		NimStringDesc* LOC117;
		NimStringDesc* LOC118;
		NimStringDesc* LOC119;
		LOC112 = 0;
		LOC112 = nimIntToStr(((NI) ((*info).year)));
		NI fr = (NI)((LOC112 ? LOC112->len : 0) - ((NI) 1));
		{
			if (!(fr < ((NI) 0))) goto LA115;
{			fr = ((NI) 0);
}		}
		LA115: ;
		LOC117 = 0;
		LOC117 = nimIntToStr(((NI) ((*info).year)));
		LOC118 = 0;
		LOC118 = nimIntToStr(((NI) ((*info).year)));
		LOC119 = 0;
		LOC119 = HEX5BHEX5D_87854(LOC117, HEX2EHEX2E_109273(fr, (NI)((LOC118 ? LOC118->len : 0) - ((NI) 1))));
		buf = resizeString(buf, LOC119->len + 0);
appendString(buf, LOC119);
	}
	goto LA30;
	LA20: ;
	{
		NimStringDesc* LOC121;
		NimStringDesc* fyear;
		NimStringDesc* LOC126;
		NimStringDesc* LOC127;
		LOC121 = 0;
		LOC121 = nimIntToStr(((NI) ((*info).year)));
		NI fr = (NI)((LOC121 ? LOC121->len : 0) - ((NI) 2));
		{
			if (!(fr < ((NI) 0))) goto LA124;
{			fr = ((NI) 0);
}		}
		LA124: ;
		LOC126 = 0;
		LOC126 = nimIntToStr(((NI) ((*info).year)));
		LOC127 = 0;
		LOC127 = nimIntToStr(((NI) ((*info).year)));
		fyear = HEX5BHEX5D_87854(LOC126, HEX2EHEX2E_109273(fr, (NI)((LOC127 ? LOC127->len : 0) - ((NI) 1))));
		{
			NimStringDesc* LOC132;
			NimStringDesc* LOC133;
			if (!!(((fyear ? fyear->len : 0) == ((NI) 2)))) goto LA130;
{			LOC132 = 0;
			LOC133 = 0;
			LOC133 = nsuRepeatChar(48, ((NI) ((NI)(((NI) 2) - (fyear ? fyear->len : 0)))));
			LOC132 = rawNewString(LOC133->len + fyear->len + 0);
appendString(LOC132, LOC133);
appendString(LOC132, fyear);
			fyear = LOC132;
}		}
		LA130: ;
		buf = resizeString(buf, fyear->len + 0);
appendString(buf, fyear);
	}
	goto LA30;
	LA21: ;
	{
		NimStringDesc* LOC135;
		NimStringDesc* fyear;
		NimStringDesc* LOC140;
		NimStringDesc* LOC141;
		LOC135 = 0;
		LOC135 = nimIntToStr(((NI) ((*info).year)));
		NI fr = (NI)((LOC135 ? LOC135->len : 0) - ((NI) 3));
		{
			if (!(fr < ((NI) 0))) goto LA138;
{			fr = ((NI) 0);
}		}
		LA138: ;
		LOC140 = 0;
		LOC140 = nimIntToStr(((NI) ((*info).year)));
		LOC141 = 0;
		LOC141 = nimIntToStr(((NI) ((*info).year)));
		fyear = HEX5BHEX5D_87854(LOC140, HEX2EHEX2E_109273(fr, (NI)((LOC141 ? LOC141->len : 0) - ((NI) 1))));
		{
			NimStringDesc* LOC146;
			NimStringDesc* LOC147;
			if (!!(((fyear ? fyear->len : 0) == ((NI) 3)))) goto LA144;
{			LOC146 = 0;
			LOC147 = 0;
			LOC147 = nsuRepeatChar(48, ((NI) ((NI)(((NI) 3) - (fyear ? fyear->len : 0)))));
			LOC146 = rawNewString(LOC147->len + fyear->len + 0);
appendString(LOC146, LOC147);
appendString(LOC146, fyear);
			fyear = LOC146;
}		}
		LA144: ;
		buf = resizeString(buf, fyear->len + 0);
appendString(buf, fyear);
	}
	goto LA30;
	LA22: ;
	{
		NimStringDesc* LOC149;
		NimStringDesc* fyear;
		NimStringDesc* LOC154;
		NimStringDesc* LOC155;
		LOC149 = 0;
		LOC149 = nimIntToStr(((NI) ((*info).year)));
		NI fr = (NI)((LOC149 ? LOC149->len : 0) - ((NI) 4));
		{
			if (!(fr < ((NI) 0))) goto LA152;
{			fr = ((NI) 0);
}		}
		LA152: ;
		LOC154 = 0;
		LOC154 = nimIntToStr(((NI) ((*info).year)));
		LOC155 = 0;
		LOC155 = nimIntToStr(((NI) ((*info).year)));
		fyear = HEX5BHEX5D_87854(LOC154, HEX2EHEX2E_109273(fr, (NI)((LOC155 ? LOC155->len : 0) - ((NI) 1))));
		{
			NimStringDesc* LOC160;
			NimStringDesc* LOC161;
			if (!!(((fyear ? fyear->len : 0) == ((NI) 4)))) goto LA158;
{			LOC160 = 0;
			LOC161 = 0;
			LOC161 = nsuRepeatChar(48, ((NI) ((NI)(((NI) 4) - (fyear ? fyear->len : 0)))));
			LOC160 = rawNewString(LOC161->len + fyear->len + 0);
appendString(LOC160, LOC161);
appendString(LOC160, fyear);
			fyear = LOC160;
}		}
		LA158: ;
		buf = resizeString(buf, fyear->len + 0);
appendString(buf, fyear);
	}
	goto LA30;
	LA23: ;
	{
		NimStringDesc* LOC163;
		NimStringDesc* fyear;
		NimStringDesc* LOC168;
		NimStringDesc* LOC169;
		LOC163 = 0;
		LOC163 = nimIntToStr(((NI) ((*info).year)));
		NI fr = (NI)((LOC163 ? LOC163->len : 0) - ((NI) 5));
		{
			if (!(fr < ((NI) 0))) goto LA166;
{			fr = ((NI) 0);
}		}
		LA166: ;
		LOC168 = 0;
		LOC168 = nimIntToStr(((NI) ((*info).year)));
		LOC169 = 0;
		LOC169 = nimIntToStr(((NI) ((*info).year)));
		fyear = HEX5BHEX5D_87854(LOC168, HEX2EHEX2E_109273(fr, (NI)((LOC169 ? LOC169->len : 0) - ((NI) 1))));
		{
			NimStringDesc* LOC174;
			NimStringDesc* LOC175;
			if (!!(((fyear ? fyear->len : 0) == ((NI) 5)))) goto LA172;
{			LOC174 = 0;
			LOC175 = 0;
			LOC175 = nsuRepeatChar(48, ((NI) ((NI)(((NI) 5) - (fyear ? fyear->len : 0)))));
			LOC174 = rawNewString(LOC175->len + fyear->len + 0);
appendString(LOC174, LOC175);
appendString(LOC174, fyear);
			fyear = LOC174;
}		}
		LA172: ;
		buf = resizeString(buf, fyear->len + 0);
appendString(buf, fyear);
	}
	goto LA30;
	LA24: ;
	{
		NimStringDesc* LOC177;
		NI hrs = (NI)((NI)((*info).timezone / ((NI) 60)) / ((NI) 60));
		LOC177 = 0;
		LOC177 = nimIntToStr(hrs);
		buf = resizeString(buf, LOC177->len + 0);
appendString(buf, LOC177);
	}
	goto LA30;
	LA25: ;
	{
		NimStringDesc* LOC179;
		NI hrs = (NI)((NI)((*info).timezone / ((NI) 60)) / ((NI) 60));
		LOC179 = 0;
		LOC179 = nimIntToStr(hrs);
		buf = resizeString(buf, LOC179->len + 0);
appendString(buf, LOC179);
		{
			NimStringDesc* LOC184;
			NI LOC185;
			if (!((hrs > 0? (hrs) : -(hrs)) < ((NI) 10))) goto LA182;
{			LOC184 = 0;
			LOC184 = nimIntToStr(hrs);
			LOC185 = 0;
			{
				if (!(hrs < ((NI) 0))) goto LA188;
{				LOC185 = ((NI) 1);
}			}
			goto LA186;
			LA188: ;
			{
				LOC185 = ((NI) 0);
			}
			LA186: ;
			NI atindex = (NI)((buf ? buf->len : 0) - (NI)((LOC184 ? LOC184->len : 0) - LOC185));
			insert_89601(buf, ((NimStringDesc*) &TMP205), ((NI) (atindex)));
}		}
		LA182: ;
	}
	goto LA30;
	LA26: ;
	{
		NimStringDesc* LOC192;
		NimStringDesc* LOC193;
		NI hrs = (NI)((NI)((*info).timezone / ((NI) 60)) / ((NI) 60));
		LOC192 = 0;
		LOC193 = 0;
		LOC193 = nimIntToStr(hrs);
		LOC192 = rawNewString(LOC193->len + 3);
appendString(LOC192, LOC193);
appendString(LOC192, ((NimStringDesc*) &TMP208));
		buf = resizeString(buf, LOC192->len + 0);
appendString(buf, LOC192);
		{
			NimStringDesc* LOC198;
			NimStringDesc* LOC199;
			NI LOC200;
			if (!((hrs > 0? (hrs) : -(hrs)) < ((NI) 10))) goto LA196;
{			LOC198 = 0;
			LOC199 = 0;
			LOC199 = nimIntToStr(hrs);
			LOC198 = rawNewString(LOC199->len + 3);
appendString(LOC198, LOC199);
appendString(LOC198, ((NimStringDesc*) &TMP208));
			LOC200 = 0;
			{
				if (!(hrs < ((NI) 0))) goto LA203;
{				LOC200 = ((NI) 1);
}			}
			goto LA201;
			LA203: ;
			{
				LOC200 = ((NI) 0);
			}
			LA201: ;
			NI atindex = (NI)((buf ? buf->len : 0) - (NI)((LOC198 ? LOC198->len : 0) - LOC200));
			insert_89601(buf, ((NimStringDesc*) &TMP205), ((NI) (atindex)));
}		}
		LA196: ;
	}
	goto LA30;
	LA27: ;
	{
		buf = resizeString(buf, (*info).tzname->len + 0);
appendString(buf, (*info).tzname);
	}
	goto LA30;
	LA28: ;
	{
	}
	goto LA30;
	LA29: ;
	{
		Valueerror3449* e_109375;
		NimStringDesc* LOC209;
		e_109375 = 0;
		e_109375 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
		(*e_109375).m_type = (&NTI3449);
		LOC209 = 0;
		LOC209 = rawNewString(token->len + 23);
appendString(LOC209, ((NimStringDesc*) &TMP209));
appendString(LOC209, token);
		asgnRefNoCycle((void**) (&(*e_109375).message), LOC209);
		raiseException((Exception*)e_109375, "ValueError");
	}
	LA30: ;
}

N_NIMCALL(NimStringDesc*, format_109394)(Timeinfo107405* info, NimStringDesc* f) {
	NimStringDesc* result;
	NimStringDesc* currentf;
	result = 0;
	result = copyString(((NimStringDesc*) &TMP155));
	NI i = ((NI) 0);
	currentf = copyString(((NimStringDesc*) &TMP155));
	{
		while (1) {
			switch (((NU8)(f->data[i]))) {
			case 32:
			case 45:
			case 47:
			case 58:
			case 39:
			case 0:
			case 40:
			case 41:
			case 91:
			case 93:
			case 44:
			{
				formattoken_109266(info, currentf, result);
				currentf = copyString(((NimStringDesc*) &TMP155));
				{
					if (!((NU8)(f->data[i]) == (NU8)(0))) goto LA6;
{					goto LA1;
}				}
				LA6: ;
				{
					if (!((NU8)(f->data[i]) == (NU8)(39))) goto LA10;
{					i += ((NI) 1);
					{
						while (1) {
							NIM_BOOL LOC14;
							LOC14 = 0;
							LOC14 = !(((NU8)(f->data[i]) == (NU8)(39)));
							if (!(LOC14)) goto LA15;
							LOC14 = (i < (NI)((f ? f->len : 0) - ((NI) 1)));
							LA15: ;
							if (!LOC14) goto LA13;
							result = addChar(result, f->data[i]);
							i += ((NI) 1);
						} LA13: ;
					}
}				}
				goto LA8;
				LA10: ;
				{
					result = addChar(result, f->data[i]);
				}
				LA8: ;
			}
			break;
			default:
			{
				{
					NIM_BOOL LOC20;
					LOC20 = 0;
					LOC20 = ((currentf ? currentf->len : 0) < ((NI) 1));
					if (LOC20) goto LA21;
					LOC20 = ((NU8)(currentf->data[(currentf ? (currentf->len-1) : -1)]) == (NU8)(f->data[i]));
					LA21: ;
					if (!LOC20) goto LA22;
{					currentf = addChar(currentf, f->data[i]);
}				}
				goto LA18;
				LA22: ;
				{
					formattoken_109266(info, currentf, result);
					i -= ((NI) 1);
					currentf = copyString(((NimStringDesc*) &TMP155));
				}
				LA18: ;
			}
			break;
			}
			i += ((NI) 1);
		}
	} LA1: ;
	return result;
}

static N_INLINE(void, nimGCunrefNoCycle)(void* p) {
	nimfr("nimGCunrefNoCycle", "gc.nim")
	nimln(233, "gc.nim");
	Tcell46547* c = usrtocell_50047(p);
	nimln(235, "gc.nim");
	{
		nimln(167, "gc.nim");
		(*c).refcount -= ((NI) 8);
		nimln(168, "gc.nim");
		if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		nimln(236, "gc.nim");
		rtladdzct_51604(c);
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, parsetoken_109462)(Timeinfo107405& info, NimStringDesc* token, NimStringDesc* value, NI& j) {
	NI sv;
	sv = 0;
	switch (hashString(token) & 31) {
	case 1: 
if (eqStrings(token, ((NimStringDesc*) &TMP187))) goto LA8;
break;
	case 5: 
if (eqStrings(token, ((NimStringDesc*) &TMP178))) goto LA1;
break;
	case 6: 
if (eqStrings(token, ((NimStringDesc*) &TMP195))) goto LA16;
break;
	case 7: 
if (eqStrings(token, ((NimStringDesc*) &TMP204))) goto LA22;
break;
	case 10: 
if (eqStrings(token, ((NimStringDesc*) &TMP182))) goto LA5;
if (eqStrings(token, ((NimStringDesc*) &TMP188))) goto LA9;
if (eqStrings(token, ((NimStringDesc*) &TMP189))) goto LA10;
if (eqStrings(token, ((NimStringDesc*) &TMP193))) goto LA14;
if (eqStrings(token, ((NimStringDesc*) &TMP197))) goto LA17;
break;
	case 12: 
if (eqStrings(token, ((NimStringDesc*) &TMP190))) goto LA11;
break;
	case 14: 
if (eqStrings(token, ((NimStringDesc*) &TMP203))) goto LA21;
break;
	case 15: 
if (eqStrings(token, ((NimStringDesc*) &TMP181))) goto LA4;
if (eqStrings(token, ((NimStringDesc*) &TMP194))) goto LA15;
break;
	case 21: 
if (eqStrings(token, ((NimStringDesc*) &TMP179))) goto LA2;
if (eqStrings(token, ((NimStringDesc*) &TMP186))) goto LA7;
break;
	case 22: 
if (eqStrings(token, ((NimStringDesc*) &TMP192))) goto LA13;
if (eqStrings(token, ((NimStringDesc*) &TMP202))) goto LA20;
break;
	case 24: 
if (eqStrings(token, ((NimStringDesc*) &TMP184))) goto LA5;
break;
	case 25: 
if (eqStrings(token, ((NimStringDesc*) &TMP185))) goto LA6;
break;
	case 28: 
if (eqStrings(token, ((NimStringDesc*) &TMP191))) goto LA12;
break;
	case 30: 
if (eqStrings(token, ((NimStringDesc*) &TMP201))) goto LA19;
break;
	case 31: 
if (eqStrings(token, ((NimStringDesc*) &TMP180))) goto LA3;
if (eqStrings(token, ((NimStringDesc*) &TMP183))) goto LA6;
if (eqStrings(token, ((NimStringDesc*) &TMP199))) goto LA18;
break;
	}
	goto LA23;
	LA1: ;
	{
		NI pd = npuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))), sv, ((NI) 0));
		info.monthday = ((NI) (sv));
		j += pd;
	}
	goto LA24;
	LA2: ;
	{
		NI LOC27;
		LOC27 = 0;
		LOC27 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))));
		info.monthday = ((NI) (LOC27));
		j += ((NI) 2);
	}
	goto LA24;
	LA3: ;
	{
		NimStringDesc* LOC29;
		LOC29 = 0;
		LOC29 = nsuToLowerStr(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 2)))));
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP221))) goto LA30;
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP222))) goto LA31;
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP223))) goto LA32;
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP224))) goto LA33;
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP225))) goto LA34;
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP226))) goto LA35;
		if (eqStrings(LOC29, ((NimStringDesc*) &TMP227))) goto LA36;
		goto LA37;
		LA30: ;
		{
			info.weekday = ((NU8) 6);
		}
		goto LA38;
		LA31: ;
		{
			info.weekday = ((NU8) 0);
		}
		goto LA38;
		LA32: ;
		{
			info.weekday = ((NU8) 1);
		}
		goto LA38;
		LA33: ;
		{
			info.weekday = ((NU8) 2);
		}
		goto LA38;
		LA34: ;
		{
			info.weekday = ((NU8) 3);
		}
		goto LA38;
		LA35: ;
		{
			info.weekday = ((NU8) 4);
		}
		goto LA38;
		LA36: ;
		{
			info.weekday = ((NU8) 5);
		}
		goto LA38;
		LA37: ;
		{
			Valueerror3449* e_109523;
			NimStringDesc* LOC47;
			e_109523 = 0;
			e_109523 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_109523).m_type = (&NTI3449);
			LOC47 = 0;
			LOC47 = (*e_109523).message; (*e_109523).message = copyStringRC1(((NimStringDesc*) &TMP228));
			if (LOC47) nimGCunrefNoCycle(LOC47);
			raiseException((Exception*)e_109523, "ValueError");
		}
		LA38: ;
		j += ((NI) 3);
	}
	goto LA24;
	LA4: ;
	{
		{
			NIM_BOOL LOC51;
			NI LOC53;
			LOC51 = 0;
			LOC51 = ((NI)(j + ((NI) 6)) <= (value ? value->len : 0));
			if (!(LOC51)) goto LA52;
			LOC53 = 0;
			LOC53 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 5)))), ((NimStringDesc*) &TMP229));
			LOC51 = (LOC53 == ((NI) 0));
			LA52: ;
			if (!LOC51) goto LA54;
{			info.weekday = ((NU8) 6);
			j += ((NI) 6);
}		}
		goto LA49;
		LA54: ;
		{
			NIM_BOOL LOC57;
			NI LOC59;
			LOC57 = 0;
			LOC57 = ((NI)(j + ((NI) 6)) <= (value ? value->len : 0));
			if (!(LOC57)) goto LA58;
			LOC59 = 0;
			LOC59 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 5)))), ((NimStringDesc*) &TMP230));
			LOC57 = (LOC59 == ((NI) 0));
			LA58: ;
			if (!LOC57) goto LA60;
{			info.weekday = ((NU8) 0);
			j += ((NI) 6);
}		}
		goto LA49;
		LA60: ;
		{
			NIM_BOOL LOC63;
			NI LOC65;
			LOC63 = 0;
			LOC63 = ((NI)(j + ((NI) 7)) <= (value ? value->len : 0));
			if (!(LOC63)) goto LA64;
			LOC65 = 0;
			LOC65 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 6)))), ((NimStringDesc*) &TMP231));
			LOC63 = (LOC65 == ((NI) 0));
			LA64: ;
			if (!LOC63) goto LA66;
{			info.weekday = ((NU8) 1);
			j += ((NI) 7);
}		}
		goto LA49;
		LA66: ;
		{
			NIM_BOOL LOC69;
			NI LOC71;
			LOC69 = 0;
			LOC69 = ((NI)(j + ((NI) 9)) <= (value ? value->len : 0));
			if (!(LOC69)) goto LA70;
			LOC71 = 0;
			LOC71 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 8)))), ((NimStringDesc*) &TMP232));
			LOC69 = (LOC71 == ((NI) 0));
			LA70: ;
			if (!LOC69) goto LA72;
{			info.weekday = ((NU8) 2);
			j += ((NI) 9);
}		}
		goto LA49;
		LA72: ;
		{
			NIM_BOOL LOC75;
			NI LOC77;
			LOC75 = 0;
			LOC75 = ((NI)(j + ((NI) 8)) <= (value ? value->len : 0));
			if (!(LOC75)) goto LA76;
			LOC77 = 0;
			LOC77 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 7)))), ((NimStringDesc*) &TMP233));
			LOC75 = (LOC77 == ((NI) 0));
			LA76: ;
			if (!LOC75) goto LA78;
{			info.weekday = ((NU8) 3);
			j += ((NI) 8);
}		}
		goto LA49;
		LA78: ;
		{
			NIM_BOOL LOC81;
			NI LOC83;
			LOC81 = 0;
			LOC81 = ((NI)(j + ((NI) 6)) <= (value ? value->len : 0));
			if (!(LOC81)) goto LA82;
			LOC83 = 0;
			LOC83 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 5)))), ((NimStringDesc*) &TMP234));
			LOC81 = (LOC83 == ((NI) 0));
			LA82: ;
			if (!LOC81) goto LA84;
{			info.weekday = ((NU8) 4);
			j += ((NI) 6);
}		}
		goto LA49;
		LA84: ;
		{
			NIM_BOOL LOC87;
			NI LOC89;
			LOC87 = 0;
			LOC87 = ((NI)(j + ((NI) 8)) <= (value ? value->len : 0));
			if (!(LOC87)) goto LA88;
			LOC89 = 0;
			LOC89 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 7)))), ((NimStringDesc*) &TMP235));
			LOC87 = (LOC89 == ((NI) 0));
			LA88: ;
			if (!LOC87) goto LA90;
{			info.weekday = ((NU8) 5);
			j += ((NI) 8);
}		}
		goto LA49;
		LA90: ;
		{
			Valueerror3449* e_109677;
			NimStringDesc* LOC93;
			e_109677 = 0;
			e_109677 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_109677).m_type = (&NTI3449);
			LOC93 = 0;
			LOC93 = (*e_109677).message; (*e_109677).message = copyStringRC1(((NimStringDesc*) &TMP228));
			if (LOC93) nimGCunrefNoCycle(LOC93);
			raiseException((Exception*)e_109677, "ValueError");
		}
		LA49: ;
	}
	goto LA24;
	LA5: ;
	{
		NI pd = npuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))), sv, ((NI) 0));
		info.hour = ((NI) (sv));
		j += pd;
	}
	goto LA24;
	LA6: ;
	{
		NI LOC96;
		LOC96 = 0;
		LOC96 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))));
		info.hour = ((NI) (LOC96));
		j += ((NI) 2);
	}
	goto LA24;
	LA7: ;
	{
		NI pd = npuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))), sv, ((NI) 0));
		info.minute = ((NI) (sv));
		j += pd;
	}
	goto LA24;
	LA8: ;
	{
		NI LOC99;
		LOC99 = 0;
		LOC99 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))));
		info.minute = ((NI) (LOC99));
		j += ((NI) 2);
	}
	goto LA24;
	LA9: ;
	{
		NI pd = npuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))), sv, ((NI) 0));
		info.month = ((NU8) ((NI)(sv - ((NI) 1))));
		info.monthday = ((NI) (sv));
		j += pd;
	}
	goto LA24;
	LA10: ;
	{
		NI month = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))));
		j += ((NI) 2);
		info.month = ((NU8) ((NI)(month - ((NI) 1))));
	}
	goto LA24;
	LA11: ;
	{
		NimStringDesc* LOC103;
		LOC103 = 0;
		LOC103 = nsuToLowerStr(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 2)))));
		switch (hashString(LOC103) & 15) {
		case 0: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP237))) goto LA105;
break;
		case 3: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP238))) goto LA106;
if (eqStrings(LOC103, ((NimStringDesc*) &TMP240))) goto LA108;
break;
		case 5: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP247))) goto LA115;
break;
		case 8: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP236))) goto LA104;
break;
		case 9: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP243))) goto LA111;
if (eqStrings(LOC103, ((NimStringDesc*) &TMP244))) goto LA112;
break;
		case 11: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP241))) goto LA109;
break;
		case 14: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP239))) goto LA107;
if (eqStrings(LOC103, ((NimStringDesc*) &TMP246))) goto LA114;
break;
		case 15: 
if (eqStrings(LOC103, ((NimStringDesc*) &TMP242))) goto LA110;
if (eqStrings(LOC103, ((NimStringDesc*) &TMP245))) goto LA113;
break;
		}
		goto LA116;
		LA104: ;
		{
			info.month = ((NU8) 0);
		}
		goto LA117;
		LA105: ;
		{
			info.month = ((NU8) 1);
		}
		goto LA117;
		LA106: ;
		{
			info.month = ((NU8) 2);
		}
		goto LA117;
		LA107: ;
		{
			info.month = ((NU8) 3);
		}
		goto LA117;
		LA108: ;
		{
			info.month = ((NU8) 4);
		}
		goto LA117;
		LA109: ;
		{
			info.month = ((NU8) 5);
		}
		goto LA117;
		LA110: ;
		{
			info.month = ((NU8) 6);
		}
		goto LA117;
		LA111: ;
		{
			info.month = ((NU8) 7);
		}
		goto LA117;
		LA112: ;
		{
			info.month = ((NU8) 8);
		}
		goto LA117;
		LA113: ;
		{
			info.month = ((NU8) 9);
		}
		goto LA117;
		LA114: ;
		{
			info.month = ((NU8) 10);
		}
		goto LA117;
		LA115: ;
		{
			info.month = ((NU8) 11);
		}
		goto LA117;
		LA116: ;
		{
			Valueerror3449* e_109820;
			NimStringDesc* LOC131;
			e_109820 = 0;
			e_109820 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_109820).m_type = (&NTI3449);
			LOC131 = 0;
			LOC131 = (*e_109820).message; (*e_109820).message = copyStringRC1(((NimStringDesc*) &TMP248));
			if (LOC131) nimGCunrefNoCycle(LOC131);
			raiseException((Exception*)e_109820, "ValueError");
		}
		LA117: ;
		j += ((NI) 3);
	}
	goto LA24;
	LA12: ;
	{
		{
			NIM_BOOL LOC135;
			NI LOC137;
			LOC135 = 0;
			LOC135 = ((NI)(j + ((NI) 7)) <= (value ? value->len : 0));
			if (!(LOC135)) goto LA136;
			LOC137 = 0;
			LOC137 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 6)))), ((NimStringDesc*) &TMP249));
			LOC135 = (LOC137 == ((NI) 0));
			LA136: ;
			if (!LOC135) goto LA138;
{			info.month = ((NU8) 0);
			j += ((NI) 7);
}		}
		goto LA133;
		LA138: ;
		{
			NIM_BOOL LOC141;
			NI LOC143;
			LOC141 = 0;
			LOC141 = ((NI)(j + ((NI) 8)) <= (value ? value->len : 0));
			if (!(LOC141)) goto LA142;
			LOC143 = 0;
			LOC143 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 7)))), ((NimStringDesc*) &TMP250));
			LOC141 = (LOC143 == ((NI) 0));
			LA142: ;
			if (!LOC141) goto LA144;
{			info.month = ((NU8) 1);
			j += ((NI) 8);
}		}
		goto LA133;
		LA144: ;
		{
			NIM_BOOL LOC147;
			NI LOC149;
			LOC147 = 0;
			LOC147 = ((NI)(j + ((NI) 5)) <= (value ? value->len : 0));
			if (!(LOC147)) goto LA148;
			LOC149 = 0;
			LOC149 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 4)))), ((NimStringDesc*) &TMP251));
			LOC147 = (LOC149 == ((NI) 0));
			LA148: ;
			if (!LOC147) goto LA150;
{			info.month = ((NU8) 2);
			j += ((NI) 5);
}		}
		goto LA133;
		LA150: ;
		{
			NIM_BOOL LOC153;
			NI LOC155;
			LOC153 = 0;
			LOC153 = ((NI)(j + ((NI) 5)) <= (value ? value->len : 0));
			if (!(LOC153)) goto LA154;
			LOC155 = 0;
			LOC155 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 4)))), ((NimStringDesc*) &TMP252));
			LOC153 = (LOC155 == ((NI) 0));
			LA154: ;
			if (!LOC153) goto LA156;
{			info.month = ((NU8) 3);
			j += ((NI) 5);
}		}
		goto LA133;
		LA156: ;
		{
			NIM_BOOL LOC159;
			NI LOC161;
			LOC159 = 0;
			LOC159 = ((NI)(j + ((NI) 3)) <= (value ? value->len : 0));
			if (!(LOC159)) goto LA160;
			LOC161 = 0;
			LOC161 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 2)))), ((NimStringDesc*) &TMP240));
			LOC159 = (LOC161 == ((NI) 0));
			LA160: ;
			if (!LOC159) goto LA162;
{			info.month = ((NU8) 4);
			j += ((NI) 3);
}		}
		goto LA133;
		LA162: ;
		{
			NIM_BOOL LOC165;
			NI LOC167;
			LOC165 = 0;
			LOC165 = ((NI)(j + ((NI) 4)) <= (value ? value->len : 0));
			if (!(LOC165)) goto LA166;
			LOC167 = 0;
			LOC167 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 3)))), ((NimStringDesc*) &TMP253));
			LOC165 = (LOC167 == ((NI) 0));
			LA166: ;
			if (!LOC165) goto LA168;
{			info.month = ((NU8) 5);
			j += ((NI) 4);
}		}
		goto LA133;
		LA168: ;
		{
			NIM_BOOL LOC171;
			NI LOC173;
			LOC171 = 0;
			LOC171 = ((NI)(j + ((NI) 4)) <= (value ? value->len : 0));
			if (!(LOC171)) goto LA172;
			LOC173 = 0;
			LOC173 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 3)))), ((NimStringDesc*) &TMP254));
			LOC171 = (LOC173 == ((NI) 0));
			LA172: ;
			if (!LOC171) goto LA174;
{			info.month = ((NU8) 6);
			j += ((NI) 4);
}		}
		goto LA133;
		LA174: ;
		{
			NIM_BOOL LOC177;
			NI LOC179;
			LOC177 = 0;
			LOC177 = ((NI)(j + ((NI) 6)) <= (value ? value->len : 0));
			if (!(LOC177)) goto LA178;
			LOC179 = 0;
			LOC179 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 5)))), ((NimStringDesc*) &TMP255));
			LOC177 = (LOC179 == ((NI) 0));
			LA178: ;
			if (!LOC177) goto LA180;
{			info.month = ((NU8) 7);
			j += ((NI) 6);
}		}
		goto LA133;
		LA180: ;
		{
			NIM_BOOL LOC183;
			NI LOC185;
			LOC183 = 0;
			LOC183 = ((NI)(j + ((NI) 9)) <= (value ? value->len : 0));
			if (!(LOC183)) goto LA184;
			LOC185 = 0;
			LOC185 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 8)))), ((NimStringDesc*) &TMP256));
			LOC183 = (LOC185 == ((NI) 0));
			LA184: ;
			if (!LOC183) goto LA186;
{			info.month = ((NU8) 8);
			j += ((NI) 9);
}		}
		goto LA133;
		LA186: ;
		{
			NIM_BOOL LOC189;
			NI LOC191;
			LOC189 = 0;
			LOC189 = ((NI)(j + ((NI) 7)) <= (value ? value->len : 0));
			if (!(LOC189)) goto LA190;
			LOC191 = 0;
			LOC191 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 6)))), ((NimStringDesc*) &TMP257));
			LOC189 = (LOC191 == ((NI) 0));
			LA190: ;
			if (!LOC189) goto LA192;
{			info.month = ((NU8) 9);
			j += ((NI) 7);
}		}
		goto LA133;
		LA192: ;
		{
			NIM_BOOL LOC195;
			NI LOC197;
			LOC195 = 0;
			LOC195 = ((NI)(j + ((NI) 8)) <= (value ? value->len : 0));
			if (!(LOC195)) goto LA196;
			LOC197 = 0;
			LOC197 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 7)))), ((NimStringDesc*) &TMP258));
			LOC195 = (LOC197 == ((NI) 0));
			LA196: ;
			if (!LOC195) goto LA198;
{			info.month = ((NU8) 10);
			j += ((NI) 8);
}		}
		goto LA133;
		LA198: ;
		{
			NIM_BOOL LOC201;
			NI LOC203;
			LOC201 = 0;
			LOC201 = ((NI)(j + ((NI) 8)) <= (value ? value->len : 0));
			if (!(LOC201)) goto LA202;
			LOC203 = 0;
			LOC203 = nsuCmpIgnoreCase(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 7)))), ((NimStringDesc*) &TMP259));
			LOC201 = (LOC203 == ((NI) 0));
			LA202: ;
			if (!LOC201) goto LA204;
{			info.month = ((NU8) 11);
			j += ((NI) 8);
}		}
		goto LA133;
		LA204: ;
		{
			Valueerror3449* e_110069;
			NimStringDesc* LOC207;
			e_110069 = 0;
			e_110069 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_110069).m_type = (&NTI3449);
			LOC207 = 0;
			LOC207 = (*e_110069).message; (*e_110069).message = copyStringRC1(((NimStringDesc*) &TMP248));
			if (LOC207) nimGCunrefNoCycle(LOC207);
			raiseException((Exception*)e_110069, "ValueError");
		}
		LA133: ;
	}
	goto LA24;
	LA13: ;
	{
		NI pd = npuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))), sv, ((NI) 0));
		info.second = ((NI) (sv));
		j += pd;
	}
	goto LA24;
	LA14: ;
	{
		NI LOC210;
		LOC210 = 0;
		LOC210 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))));
		info.second = ((NI) (LOC210));
		j += ((NI) 2);
	}
	goto LA24;
	LA15: ;
	{
		{
			NIM_BOOL LOC214;
			NIM_BOOL LOC215;
			LOC214 = 0;
			LOC215 = 0;
			LOC215 = ((NU8)(value->data[j]) == (NU8)(80));
			if (!(LOC215)) goto LA216;
			LOC215 = (((NI) 0) < ((NI) (info.hour)));
			LA216: ;
			LOC214 = LOC215;
			if (!(LOC214)) goto LA217;
			LOC214 = (((NI) (info.hour)) < ((NI) 12));
			LA217: ;
			if (!LOC214) goto LA218;
{			info.hour += ((NI) 12);
}		}
		LA218: ;
		j += ((NI) 1);
	}
	goto LA24;
	LA16: ;
	{
		{
			NIM_BOOL LOC223;
			NIM_BOOL LOC224;
			NimStringDesc* LOC225;
			LOC223 = 0;
			LOC224 = 0;
			LOC225 = 0;
			LOC225 = HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1))));
			LOC224 = eqStrings(LOC225, ((NimStringDesc*) &TMP206));
			if (!(LOC224)) goto LA226;
			LOC224 = (((NI) 0) < ((NI) (info.hour)));
			LA226: ;
			LOC223 = LOC224;
			if (!(LOC223)) goto LA227;
			LOC223 = (((NI) (info.hour)) < ((NI) 12));
			LA227: ;
			if (!LOC223) goto LA228;
{			info.hour += ((NI) 12);
}		}
		LA228: ;
		j += ((NI) 2);
	}
	goto LA24;
	LA17: ;
	{
		Timeinfo107405 LOC231;
		NI year = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 1)))));
		memset((void*)(&LOC231), 0, sizeof(LOC231));
		LOC231.m_type = (&NTI107405);
		getlocaltime_107453(gettime_107448(), (&LOC231));
		NI thiscen = (NI)(((NI) (LOC231.year)) / ((NI) 100));
		info.year = ((NI) ((NI)(((NI) ((NI)(((NI) (thiscen)) * ((NI) 100)))) + year)));
		j += ((NI) 2);
	}
	goto LA24;
	LA18: ;
	{
		NI LOC233;
		LOC233 = 0;
		LOC233 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 3)))));
		info.year = ((NI) (LOC233));
		j += ((NI) 4);
	}
	goto LA24;
	LA19: ;
	{
		{
			NimStringDesc* LOC239;
			if (!((NU8)(value->data[j]) == (NU8)(43))) goto LA237;
{			LOC239 = 0;
			LOC239 = nimCharToStr(value->data[(NI)(j + ((NI) 1))]);
			info.timezone = nsuParseInt(LOC239);
}		}
		goto LA235;
		LA237: ;
		{
			NimStringDesc* LOC243;
			NI LOC244;
			if (!((NU8)(value->data[j]) == (NU8)(45))) goto LA241;
{			LOC243 = 0;
			LOC243 = nimCharToStr(value->data[(NI)(j + ((NI) 1))]);
			LOC244 = 0;
			LOC244 = nsuParseInt(LOC243);
			info.timezone = (NI)(((NI) 0) - LOC244);
}		}
		goto LA235;
		LA241: ;
		{
			Valueerror3449* e_110211;
			NimStringDesc* LOC246;
			e_110211 = 0;
			e_110211 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_110211).m_type = (&NTI3449);
			LOC246 = 0;
			LOC246 = rawNewString(19);
appendString(LOC246, ((NimStringDesc*) &TMP260));
appendChar(LOC246, value->data[j]);
			asgnRefNoCycle((void**) (&(*e_110211).message), LOC246);
			raiseException((Exception*)e_110211, "ValueError");
		}
		LA235: ;
		j += ((NI) 2);
	}
	goto LA24;
	LA20: ;
	{
		{
			if (!((NU8)(value->data[j]) == (NU8)(43))) goto LA250;
{			info.timezone = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273((NI)(j + ((NI) 1)), (NI)(j + ((NI) 2)))));
}		}
		goto LA248;
		LA250: ;
		{
			NI LOC255;
			if (!((NU8)(value->data[j]) == (NU8)(45))) goto LA253;
{			LOC255 = 0;
			LOC255 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273((NI)(j + ((NI) 1)), (NI)(j + ((NI) 2)))));
			info.timezone = (NI)(((NI) 0) - LOC255);
}		}
		goto LA248;
		LA253: ;
		{
			Valueerror3449* e_110252;
			NimStringDesc* LOC257;
			e_110252 = 0;
			e_110252 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_110252).m_type = (&NTI3449);
			LOC257 = 0;
			LOC257 = rawNewString(19);
appendString(LOC257, ((NimStringDesc*) &TMP260));
appendChar(LOC257, value->data[j]);
			asgnRefNoCycle((void**) (&(*e_110252).message), LOC257);
			raiseException((Exception*)e_110252, "ValueError");
		}
		LA248: ;
		j += ((NI) 3);
	}
	goto LA24;
	LA21: ;
	{
		{
			if (!((NU8)(value->data[j]) == (NU8)(43))) goto LA261;
{			info.timezone = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273((NI)(j + ((NI) 1)), (NI)(j + ((NI) 2)))));
}		}
		goto LA259;
		LA261: ;
		{
			NI LOC266;
			if (!((NU8)(value->data[j]) == (NU8)(45))) goto LA264;
{			LOC266 = 0;
			LOC266 = nsuParseInt(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273((NI)(j + ((NI) 1)), (NI)(j + ((NI) 2)))));
			info.timezone = (NI)(((NI) 0) - LOC266);
}		}
		goto LA259;
		LA264: ;
		{
			Valueerror3449* e_110293;
			NimStringDesc* LOC268;
			e_110293 = 0;
			e_110293 = (Valueerror3449*) newObj((&NTI22601), sizeof(Valueerror3449));
			(*e_110293).m_type = (&NTI3449);
			LOC268 = 0;
			LOC268 = rawNewString(19);
appendString(LOC268, ((NimStringDesc*) &TMP260));
appendChar(LOC268, value->data[j]);
			asgnRefNoCycle((void**) (&(*e_110293).message), LOC268);
			raiseException((Exception*)e_110293, "ValueError");
		}
		LA259: ;
		j += ((NI) 6);
	}
	goto LA24;
	LA22: ;
	{
		unsureAsgnRef((void**) (&info.tzname), nsuToUpperStr(HEX5BHEX5D_87854(value, HEX2EHEX2E_109273(j, (NI)(j + ((NI) 2))))));
		j += ((NI) 3);
	}
	goto LA24;
	LA23: ;
	{
		j += (token ? token->len : 0);
	}
	LA24: ;
}

N_NIMCALL(void, parse_110354)(NimStringDesc* value, NimStringDesc* layout, Timeinfo107405* Result) {
	NimStringDesc* token;
	Timeinfo107405 info;
	Timeinfo107405 LOC29;
{	NI i = ((NI) 0);
	NI j = ((NI) 0);
	token = copyString(((NimStringDesc*) &TMP155));
	memset((void*)(&info), 0, sizeof(info));
	info.m_type = (&NTI107405);
	memset((void*)(&info), 0, sizeof(info));
	info.m_type = (&NTI107405);
	getlocaltime_107453(gettime_107448(), (&info));
	info.hour = ((NI) 0);
	info.minute = ((NI) 0);
	info.second = ((NI) 0);
	{
		while (1) {
			switch (((NU8)(layout->data[i]))) {
			case 32:
			case 45:
			case 47:
			case 58:
			case 39:
			case 0:
			case 40:
			case 41:
			case 91:
			case 93:
			case 44:
			{
				{
					if (!(((NI) 0) < (token ? token->len : 0))) goto LA6;
{					parsetoken_109462(info, token, value, j);
}				}
				LA6: ;
				token = copyString(((NimStringDesc*) &TMP155));
				{
					if (!((NU8)(layout->data[i]) == (NU8)(0))) goto LA10;
{					goto LA1;
}				}
				LA10: ;
				{
					if (!((NU8)(layout->data[i]) == (NU8)(39))) goto LA14;
{					i += ((NI) 1);
					j += ((NI) 1);
					{
						while (1) {
							NIM_BOOL LOC18;
							LOC18 = 0;
							LOC18 = !(((NU8)(layout->data[i]) == (NU8)(39)));
							if (!(LOC18)) goto LA19;
							LOC18 = (i < (NI)((layout ? layout->len : 0) - ((NI) 1)));
							LA19: ;
							if (!LOC18) goto LA17;
							i += ((NI) 1);
							j += ((NI) 1);
						} LA17: ;
					}
}				}
				goto LA12;
				LA14: ;
				{
					i += ((NI) 1);
					j += ((NI) 1);
				}
				LA12: ;
			}
			break;
			default:
			{
				{
					NIM_BOOL LOC24;
					LOC24 = 0;
					LOC24 = ((token ? token->len : 0) < ((NI) 1));
					if (LOC24) goto LA25;
					LOC24 = ((NU8)(token->data[(token ? (token->len-1) : -1)]) == (NU8)(layout->data[i]));
					LA25: ;
					if (!LOC24) goto LA26;
{					token = addChar(token, layout->data[i]);
					i += ((NI) 1);
}				}
				goto LA22;
				LA26: ;
				{
					parsetoken_109462(info, token, value, j);
					token = copyString(((NimStringDesc*) &TMP155));
				}
				LA22: ;
			}
			break;
			}
		}
	} LA1: ;
	memset((void*)(&LOC29), 0, sizeof(LOC29));
	LOC29.m_type = (&NTI107405);
	getlocaltime_107453(timeinfototime_107465((&info)), (&LOC29));
	info.weekday = LOC29.weekday;
	genericAssign((void*)Result, (void*)(&info), (&NTI107405));
	goto BeforeRet;
	}BeforeRet: ;
}
NIM_EXTERNC N_NOINLINE(void, stdlib_timesInit)(void) {
}

NIM_EXTERNC N_NOINLINE(void, stdlib_timesDatInit)(void) {
static TNimNode* TMP147[11];
static TNimNode* TMP148[12];
NI TMP150;
static char* NIM_CONST TMP149[12] = {
"mJan", 
"mFeb", 
"mMar", 
"mApr", 
"mMay", 
"mJun", 
"mJul", 
"mAug", 
"mSep", 
"mOct", 
"mNov", 
"mDec"};
static TNimNode* TMP151[7];
NI TMP153;
static char* NIM_CONST TMP152[7] = {
"dMon", 
"dTue", 
"dWed", 
"dThu", 
"dFri", 
"dSat", 
"dSun"};
static TNimNode TMP137[33];
NTI107405.size = sizeof(Timeinfo107405);
NTI107405.kind = 17;
NTI107405.base = (&NTI3411);
TMP147[0] = &TMP137[1];
NTI107408.size = sizeof(NI);
NTI107408.kind = 20;
NTI107408.base = (&NTI108);
NTI107408.flags = 3;
TMP137[1].kind = 1;
TMP137[1].offset = offsetof(Timeinfo107405, second);
TMP137[1].typ = (&NTI107408);
TMP137[1].name = "second";
TMP147[1] = &TMP137[2];
NTI107410.size = sizeof(NI);
NTI107410.kind = 20;
NTI107410.base = (&NTI108);
NTI107410.flags = 3;
TMP137[2].kind = 1;
TMP137[2].offset = offsetof(Timeinfo107405, minute);
TMP137[2].typ = (&NTI107410);
TMP137[2].name = "minute";
TMP147[2] = &TMP137[3];
NTI107412.size = sizeof(NI);
NTI107412.kind = 20;
NTI107412.base = (&NTI108);
NTI107412.flags = 3;
TMP137[3].kind = 1;
TMP137[3].offset = offsetof(Timeinfo107405, hour);
TMP137[3].typ = (&NTI107412);
TMP137[3].name = "hour";
TMP147[3] = &TMP137[4];
NTI107415.size = sizeof(NI);
NTI107415.kind = 20;
NTI107415.base = (&NTI108);
NTI107415.flags = 3;
TMP137[4].kind = 1;
TMP137[4].offset = offsetof(Timeinfo107405, monthday);
TMP137[4].typ = (&NTI107415);
TMP137[4].name = "monthday";
TMP147[4] = &TMP137[5];
NTI104006.size = sizeof(NU8);
NTI104006.kind = 14;
NTI104006.base = 0;
NTI104006.flags = 3;
for (TMP150 = 0; TMP150 < 12; TMP150++) {
TMP137[TMP150+6].kind = 1;
TMP137[TMP150+6].offset = TMP150;
TMP137[TMP150+6].name = TMP149[TMP150];
TMP148[TMP150] = &TMP137[TMP150+6];
}
TMP137[18].len = 12; TMP137[18].kind = 2; TMP137[18].sons = &TMP148[0];
NTI104006.node = &TMP137[18];
TMP137[5].kind = 1;
TMP137[5].offset = offsetof(Timeinfo107405, month);
TMP137[5].typ = (&NTI104006);
TMP137[5].name = "month";
TMP147[5] = &TMP137[19];
NTI107418.size = sizeof(NI);
NTI107418.kind = 20;
NTI107418.base = (&NTI108);
NTI107418.flags = 3;
TMP137[19].kind = 1;
TMP137[19].offset = offsetof(Timeinfo107405, year);
TMP137[19].typ = (&NTI107418);
TMP137[19].name = "year";
TMP147[6] = &TMP137[20];
NTI104008.size = sizeof(NU8);
NTI104008.kind = 14;
NTI104008.base = 0;
NTI104008.flags = 3;
for (TMP153 = 0; TMP153 < 7; TMP153++) {
TMP137[TMP153+21].kind = 1;
TMP137[TMP153+21].offset = TMP153;
TMP137[TMP153+21].name = TMP152[TMP153];
TMP151[TMP153] = &TMP137[TMP153+21];
}
TMP137[28].len = 7; TMP137[28].kind = 2; TMP137[28].sons = &TMP151[0];
NTI104008.node = &TMP137[28];
TMP137[20].kind = 1;
TMP137[20].offset = offsetof(Timeinfo107405, weekday);
TMP137[20].typ = (&NTI104008);
TMP137[20].name = "weekday";
TMP147[7] = &TMP137[29];
NTI107424.size = sizeof(NI);
NTI107424.kind = 20;
NTI107424.base = (&NTI108);
NTI107424.flags = 3;
TMP137[29].kind = 1;
TMP137[29].offset = offsetof(Timeinfo107405, yearday);
TMP137[29].typ = (&NTI107424);
TMP137[29].name = "yearday";
TMP147[8] = &TMP137[30];
TMP137[30].kind = 1;
TMP137[30].offset = offsetof(Timeinfo107405, isdst);
TMP137[30].typ = (&NTI138);
TMP137[30].name = "isDST";
TMP147[9] = &TMP137[31];
TMP137[31].kind = 1;
TMP137[31].offset = offsetof(Timeinfo107405, tzname);
TMP137[31].typ = (&NTI149);
TMP137[31].name = "tzname";
TMP147[10] = &TMP137[32];
TMP137[32].kind = 1;
TMP137[32].offset = offsetof(Timeinfo107405, timezone);
TMP137[32].typ = (&NTI108);
TMP137[32].name = "timezone";
TMP137[0].len = 11; TMP137[0].kind = 2; TMP137[0].sons = &TMP147[0];
NTI107405.node = &TMP137[0];
}


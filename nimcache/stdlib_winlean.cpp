/* Generated by Nim Compiler v0.11.2 */
/*   (c) 2015 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Windows, amd64, gcc */
/* Command for C compiler:
   g++.exe -c  -w -w -fpermissive  -IC:\Nim\lib -o c:\users\dansm\desktop\folders\robotics\field-telemetry\nimcache\stdlib_winlean.o c:\users\dansm\desktop\folders\robotics\field-telemetry\nimcache\stdlib_winlean.cpp */
#define NIM_INTBITS 64
#include "nimbase.h"

#include <string.h>
struct Tguid106614;
struct TGenericSeq;
struct NimStringDesc;
struct Tfiletime104245;
typedef NI8 TY106627[8];
struct  Tguid106614  {
NI32 D1;
NI16 D2;
NI16 D3;
TY106627 D4;
};
typedef NI8 TY106712[8];
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
typedef N_STDCALL_PTR(void, TY105625) (Tfiletime104245& lpsystemtimeasfiletime);
struct  Tfiletime104245  {
NI32 dwlowdatetime;
NI32 dwhighdatetime;
};
N_NIMCALL(void*, nimLoadLibrary)(NimStringDesc* path);
N_NOINLINE(void, nimLoadLibraryError)(NimStringDesc* path);
N_NIMCALL(void*, nimGetProcAddr)(void* lib, NCSTRING name);
NIM_CONST TY106712 TMP145 = {((NI8) -114),
((NI8) -23),
((NI8) 118),
((NI8) -27),
((NI8) -116),
((NI8) 116),
((NI8) 6),
((NI8) 62)}
;
NIM_CONST TY106712 TMP146 = {((NI8) -107),
((NI8) -54),
((NI8) 0),
((NI8) -128),
((NI8) 95),
((NI8) 72),
((NI8) -95),
((NI8) -110)}
;
STRING_LITERAL(TMP157, "kernel32", 8);
STRING_LITERAL(TMP158, "kernel32", 8);
Tguid106614 Wsaidconnectex_106714;
Tguid106614 Wsaidacceptex_106718;
Tguid106614 Wsaidgetacceptexsockaddrs_106722;
static void* TMP156;
TY105625 Dl_105624;

N_NIMCALL(NI64, rdfiletime_105604)(Tfiletime104245 f) {
	NI64 result;
	result = 0;
	result = (NI64)(((NI64)(NU64)(NU32)(f.dwlowdatetime)) | (NI64)((NU64)(((NI64)(NU64)(NU32)(f.dwhighdatetime))) << (NU64)(IL64(32))));
	return result;
}
NIM_EXTERNC N_NOINLINE(void, stdlib_winleanInit)(void) {
	Tguid106614 LOC1;
	Tguid106614 LOC2;
	Tguid106614 LOC3;
	memset((void*)(&LOC1), 0, sizeof(LOC1));
	LOC1.D1 = ((NI32) 631375801);
	LOC1.D2 = ((NI16) -8717);
	LOC1.D3 = ((NI16) 18016);
	memcpy((void*)LOC1.D4, (NIM_CONST void*)TMP145, sizeof(LOC1.D4));
	Wsaidconnectex_106714 = LOC1;
	memset((void*)(&LOC2), 0, sizeof(LOC2));
	LOC2.D1 = ((NI32) -1254720015);
	LOC2.D2 = ((NI16) -13396);
	LOC2.D3 = ((NI16) 4559);
	memcpy((void*)LOC2.D4, (NIM_CONST void*)TMP146, sizeof(LOC2.D4));
	Wsaidacceptex_106718 = LOC2;
	memset((void*)(&LOC3), 0, sizeof(LOC3));
	LOC3.D1 = ((NI32) -1254720014);
	LOC3.D2 = ((NI16) -13396);
	LOC3.D3 = ((NI16) 4559);
	memcpy((void*)LOC3.D4, (NIM_CONST void*)TMP146, sizeof(LOC3.D4));
	Wsaidgetacceptexsockaddrs_106722 = LOC3;
}

NIM_EXTERNC N_NOINLINE(void, stdlib_winleanDatInit)(void) {
if (!((TMP156 = nimLoadLibrary((NimStringDesc*) &TMP157))
)) nimLoadLibraryError((NimStringDesc*) &TMP158);
	Dl_105624 = (TY105625) nimGetProcAddr(TMP156, "GetSystemTimeAsFileTime");
}

